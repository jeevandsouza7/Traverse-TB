
traverse_arena.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800200  000020ec  00002180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080030a  0080030a  0000228a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000228a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000046b  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ee9  00000000  00000000  00002715  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000307  00000000  00000000  000055fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002302  00000000  00000000  00005905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00007c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b6  00000000  00000000  00007f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001481  00000000  00000000  0000840e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000540  00000000  00000000  0000988f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_5>
      18:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec ee       	ldi	r30, 0xEC	; 236
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 30       	cpi	r26, 0x0A	; 10
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	aa e0       	ldi	r26, 0x0A	; 10
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 32       	cpi	r26, 0x25	; 37
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <main>
     122:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	fc 01       	movw	r30, r24
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	40 e3       	ldi	r20, 0x30	; 48
     13a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	38 e4       	ldi	r19, 0x48	; 72
     142:	f9 01       	movw	r30, r18
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	fc 01       	movw	r30, r24
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     154:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     156:	42 9a       	sbi	0x08, 2	; 8
     158:	f9 01       	movw	r30, r18
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15e:	42 98       	cbi	0x08, 2	; 8
     160:	fc 01       	movw	r30, r24
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	f9 01       	movw	r30, r18
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     174:	42 98       	cbi	0x08, 2	; 8
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     17a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     17c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     17e:	80 e2       	ldi	r24, 0x20	; 32
     180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     182:	42 9a       	sbi	0x08, 2	; 8
     184:	c9 01       	movw	r24, r18
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8

	
}
     18c:	08 95       	ret

0000018e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     194:	28 b1       	in	r18, 0x08	; 8
     196:	98 2f       	mov	r25, r24
     198:	90 7f       	andi	r25, 0xF0	; 240
     19a:	92 2b       	or	r25, r18
     19c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1a2:	42 9a       	sbi	0x08, 2	; 8
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	38 e4       	ldi	r19, 0x48	; 72
     1a8:	f9 01       	movw	r30, r18
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1ae:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1b6:	98 b1       	in	r25, 0x08	; 8
     1b8:	82 95       	swap	r24
     1ba:	80 7f       	andi	r24, 0xF0	; 240
     1bc:	98 2b       	or	r25, r24
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	c9 01       	movw	r24, r18
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1cc:	42 98       	cbi	0x08, 2	; 8
}
     1ce:	08 95       	ret

000001d0 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     1d0:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
     1d4:	86 e6       	ldi	r24, 0x66	; 102
     1d6:	9e e0       	ldi	r25, 0x0E	; 14
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x8>
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     1dc:	88 e2       	ldi	r24, 0x28	; 40
     1de:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x01);
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x06);
     1e8:	86 e0       	ldi	r24, 0x06	; 6
     1ea:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x0E);
     1ee:	8e e0       	ldi	r24, 0x0E	; 14
     1f0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x80);
     1f4:	80 e8       	ldi	r24, 0x80	; 128
     1f6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
		
}
     1fa:	08 95       	ret

000001fc <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     1fc:	98 b1       	in	r25, 0x08	; 8
     1fe:	9f 70       	andi	r25, 0x0F	; 15
     200:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     202:	28 b1       	in	r18, 0x08	; 8
     204:	98 2f       	mov	r25, r24
     206:	90 7f       	andi	r25, 0xF0	; 240
     208:	92 2b       	or	r25, r18
     20a:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     20c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     20e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     210:	42 9a       	sbi	0x08, 2	; 8
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	38 e4       	ldi	r19, 0x48	; 72
     216:	f9 01       	movw	r30, r18
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     21c:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     224:	98 b1       	in	r25, 0x08	; 8
     226:	82 95       	swap	r24
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	98 2b       	or	r25, r24
     22c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     22e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     230:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	c9 01       	movw	r24, r18
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     23a:	42 98       	cbi	0x08, 2	; 8
}
     23c:	08 95       	ret

0000023e <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     23e:	80 e8       	ldi	r24, 0x80	; 128
     240:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
}
     244:	08 95       	ret

00000246 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	ec 01       	movw	r28, r24
     24c:	03 c0       	rjmp	.+6      	; 0x254 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     24e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
		str++;
     252:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     254:	88 81       	ld	r24, Y
     256:	88 23       	and	r24, r24
     258:	d1 f7       	brne	.-12     	; 0x24e <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	69 f0       	breq	.+26     	; 0x27e <lcd_cursor+0x1e>
     264:	83 30       	cpi	r24, 0x03	; 3
     266:	18 f4       	brcc	.+6      	; 0x26e <lcd_cursor+0xe>
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	a9 f4       	brne	.+42     	; 0x296 <lcd_cursor+0x36>
     26c:	05 c0       	rjmp	.+10     	; 0x278 <lcd_cursor+0x18>
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	49 f0       	breq	.+18     	; 0x284 <lcd_cursor+0x24>
     272:	84 30       	cpi	r24, 0x04	; 4
     274:	81 f4       	brne	.+32     	; 0x296 <lcd_cursor+0x36>
     276:	0b c0       	rjmp	.+22     	; 0x28e <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     278:	86 2f       	mov	r24, r22
     27a:	81 58       	subi	r24, 0x81	; 129
     27c:	05 c0       	rjmp	.+10     	; 0x288 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     27e:	86 2f       	mov	r24, r22
     280:	81 54       	subi	r24, 0x41	; 65
     282:	02 c0       	rjmp	.+4      	; 0x288 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     284:	86 2f       	mov	r24, r22
     286:	8d 56       	subi	r24, 0x6D	; 109
     288:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     28c:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     28e:	86 2f       	mov	r24, r22
     290:	8d 52       	subi	r24, 0x2D	; 45
     292:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     296:	08 95       	ret

00000298 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	8a 01       	movw	r16, r20
     2a2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2a4:	88 23       	and	r24, r24
     2a6:	11 f0       	breq	.+4      	; 0x2ac <lcd_print+0x14>
     2a8:	66 23       	and	r22, r22
     2aa:	19 f4       	brne	.+6      	; 0x2b2 <lcd_print+0x1a>
	{
		lcd_home();
     2ac:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_home>
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2b2:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2b6:	c5 30       	cpi	r28, 0x05	; 5
     2b8:	d1 05       	cpc	r29, r1
     2ba:	71 f4       	brne	.+28     	; 0x2d8 <lcd_print+0x40>
	{
		million=value/10000+48;
     2bc:	c8 01       	movw	r24, r16
     2be:	60 e1       	ldi	r22, 0x10	; 16
     2c0:	77 e2       	ldi	r23, 0x27	; 39
     2c2:	0e 94 29 10 	call	0x2052	; 0x2052 <__udivmodhi4>
     2c6:	cb 01       	movw	r24, r22
     2c8:	c0 96       	adiw	r24, 0x30	; 48
     2ca:	90 93 19 03 	sts	0x0319, r25
     2ce:	80 93 18 03 	sts	0x0318, r24
		lcd_wr_char(million);
     2d2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     2d8:	c4 30       	cpi	r28, 0x04	; 4
     2da:	d1 05       	cpc	r29, r1
     2dc:	11 f0       	breq	.+4      	; 0x2e2 <lcd_print+0x4a>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	16 c0       	rjmp	.+44     	; 0x30e <lcd_print+0x76>
	{
		temp = value/1000;
     2e2:	c8 01       	movw	r24, r16
     2e4:	68 ee       	ldi	r22, 0xE8	; 232
     2e6:	73 e0       	ldi	r23, 0x03	; 3
     2e8:	0e 94 29 10 	call	0x2052	; 0x2052 <__udivmodhi4>
     2ec:	cb 01       	movw	r24, r22
     2ee:	60 93 1a 03 	sts	0x031A, r22
     2f2:	90 93 1b 03 	sts	0x031B, r25
		thousand = temp%10 + 48;
     2f6:	6a e0       	ldi	r22, 0x0A	; 10
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	0e 94 29 10 	call	0x2052	; 0x2052 <__udivmodhi4>
     2fe:	c0 96       	adiw	r24, 0x30	; 48
     300:	90 93 24 03 	sts	0x0324, r25
     304:	80 93 23 03 	sts	0x0323, r24
		lcd_wr_char(thousand);
     308:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     30c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     30e:	c3 30       	cpi	r28, 0x03	; 3
     310:	d1 05       	cpc	r29, r1
     312:	21 f0       	breq	.+8      	; 0x31c <lcd_print+0x84>
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	11 f0       	breq	.+4      	; 0x31c <lcd_print+0x84>
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	16 c0       	rjmp	.+44     	; 0x348 <lcd_print+0xb0>
	{
		temp = value/100;
     31c:	c8 01       	movw	r24, r16
     31e:	64 e6       	ldi	r22, 0x64	; 100
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	0e 94 29 10 	call	0x2052	; 0x2052 <__udivmodhi4>
     326:	cb 01       	movw	r24, r22
     328:	60 93 1a 03 	sts	0x031A, r22
     32c:	90 93 1b 03 	sts	0x031B, r25
		hundred = temp%10 + 48;
     330:	6a e0       	ldi	r22, 0x0A	; 10
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	0e 94 29 10 	call	0x2052	; 0x2052 <__udivmodhi4>
     338:	c0 96       	adiw	r24, 0x30	; 48
     33a:	90 93 20 03 	sts	0x0320, r25
     33e:	80 93 1f 03 	sts	0x031F, r24
		lcd_wr_char(hundred);
     342:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     346:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     348:	c2 30       	cpi	r28, 0x02	; 2
     34a:	d1 05       	cpc	r29, r1
     34c:	21 f0       	breq	.+8      	; 0x356 <lcd_print+0xbe>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	11 f0       	breq	.+4      	; 0x356 <lcd_print+0xbe>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	16 c0       	rjmp	.+44     	; 0x382 <lcd_print+0xea>
	{
		temp = value/10;
     356:	c8 01       	movw	r24, r16
     358:	6a e0       	ldi	r22, 0x0A	; 10
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	0e 94 29 10 	call	0x2052	; 0x2052 <__udivmodhi4>
     360:	cb 01       	movw	r24, r22
     362:	60 93 1a 03 	sts	0x031A, r22
     366:	90 93 1b 03 	sts	0x031B, r25
		tens = temp%10 + 48;
     36a:	6a e0       	ldi	r22, 0x0A	; 10
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	0e 94 29 10 	call	0x2052	; 0x2052 <__udivmodhi4>
     372:	c0 96       	adiw	r24, 0x30	; 48
     374:	90 93 1e 03 	sts	0x031E, r25
     378:	80 93 1d 03 	sts	0x031D, r24
		lcd_wr_char(tens);
     37c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     380:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     382:	c1 30       	cpi	r28, 0x01	; 1
     384:	d1 05       	cpc	r29, r1
     386:	11 f0       	breq	.+4      	; 0x38c <lcd_print+0xf4>
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	61 f4       	brne	.+24     	; 0x3a4 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     38c:	c8 01       	movw	r24, r16
     38e:	6a e0       	ldi	r22, 0x0A	; 10
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 29 10 	call	0x2052	; 0x2052 <__udivmodhi4>
     396:	c0 96       	adiw	r24, 0x30	; 48
     398:	90 93 22 03 	sts	0x0322, r25
     39c:	80 93 21 03 	sts	0x0321, r24
		lcd_wr_char(unit);
     3a0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
	}
	if(digits>5)
     3a4:	26 97       	sbiw	r28, 0x06	; 6
     3a6:	1c f0       	brlt	.+6      	; 0x3ae <lcd_print+0x116>
	{
		lcd_wr_char('E');
     3a8:	85 e4       	ldi	r24, 0x45	; 69
     3aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
	}
	
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <lcd_port_config>:
volatile unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     3b8:	87 b1       	in	r24, 0x07	; 7
     3ba:	87 6f       	ori	r24, 0xF7	; 247
     3bc:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     3be:	88 b1       	in	r24, 0x08	; 8
     3c0:	80 78       	andi	r24, 0x80	; 128
     3c2:	88 b9       	out	0x08, r24	; 8
}
     3c4:	08 95       	ret

000003c6 <buzzer_pin_config>:

//
//Function to initialize Buzzer
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;        //Setting PORTC 3 as output
     3c6:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;      //Setting PORTC 3 logic low to turnoff buzzer
     3c8:	43 98       	cbi	0x08, 3	; 8
}
     3ca:	08 95       	ret

000003cc <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     3cc:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     3ce:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     3d0:	88 b9       	out	0x08, r24	; 8
}
     3d2:	08 95       	ret

000003d4 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     3d4:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     3d6:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     3d8:	88 b9       	out	0x08, r24	; 8
}
     3da:	08 95       	ret

000003dc <adc_pin_config>:
//

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00;
     3dc:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     3de:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     3e0:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     3e4:	10 92 08 01 	sts	0x0108, r1
}
     3e8:	08 95       	ret

000003ea <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     3ea:	81 b1       	in	r24, 0x01	; 1
     3ec:	8f 60       	ori	r24, 0x0F	; 15
     3ee:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     3f0:	82 b1       	in	r24, 0x02	; 2
     3f2:	80 7f       	andi	r24, 0xF0	; 240
     3f4:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     3f6:	ea e0       	ldi	r30, 0x0A	; 10
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	80 81       	ld	r24, Z
     3fc:	88 61       	ori	r24, 0x18	; 24
     3fe:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     400:	eb e0       	ldi	r30, 0x0B	; 11
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	80 81       	ld	r24, Z
     406:	88 61       	ori	r24, 0x18	; 24
     408:	80 83       	st	Z, r24
}
     40a:	08 95       	ret

0000040c <left_encoder_pin_config>:

//posenc
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     40c:	6c 98       	cbi	0x0d, 4	; 13
    PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     40e:	74 9a       	sbi	0x0e, 4	; 14
}
     410:	08 95       	ret

00000412 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     412:	6d 98       	cbi	0x0d, 5	; 13
    PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     414:	75 9a       	sbi	0x0e, 5	; 14
}
     416:	08 95       	ret

00000418 <port_init>:
//

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00;
     418:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     41a:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     41c:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     420:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     424:	81 b1       	in	r24, 0x01	; 1
     426:	8f 60       	ori	r24, 0x0F	; 15
     428:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     42a:	82 b1       	in	r24, 0x02	; 2
     42c:	80 7f       	andi	r24, 0xF0	; 240
     42e:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     430:	ea e0       	ldi	r30, 0x0A	; 10
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	80 81       	ld	r24, Z
     436:	88 61       	ori	r24, 0x18	; 24
     438:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     43a:	eb e0       	ldi	r30, 0x0B	; 11
     43c:	f1 e0       	ldi	r31, 0x01	; 1
     43e:	80 81       	ld	r24, Z
     440:	88 61       	ori	r24, 0x18	; 24
     442:	80 83       	st	Z, r24

//posenc
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     444:	6c 98       	cbi	0x0d, 4	; 13
    PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     446:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     448:	6d 98       	cbi	0x0d, 5	; 13
    PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     44a:	75 9a       	sbi	0x0e, 5	; 14

//
//Function to initialize Buzzer
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;        //Setting PORTC 3 as output
     44c:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;      //Setting PORTC 3 logic low to turnoff buzzer
     44e:	43 98       	cbi	0x08, 3	; 8
	adc_pin_config();
	motion_pin_config();
    left_encoder_pin_config(); //left encoder pin config
    right_encoder_pin_config(); //right encoder pin config
    buzzer_pin_config();
}
     450:	08 95       	ret

00000452 <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    cli(); //Clears the global interrupt
     452:	f8 94       	cli
    EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     454:	ea e6       	ldi	r30, 0x6A	; 106
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	82 60       	ori	r24, 0x02	; 2
     45c:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     45e:	ec 9a       	sbi	0x1d, 4	; 29
    sei();   // Enables the global interrupt
     460:	78 94       	sei
}
     462:	08 95       	ret

00000464 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    cli(); //Clears the global interrupt
     464:	f8 94       	cli
    EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     466:	ea e6       	ldi	r30, 0x6A	; 106
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	88 60       	ori	r24, 0x08	; 8
     46e:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     470:	ed 9a       	sbi	0x1d, 5	; 29
    sei();   // Enables the global interrupt
     472:	78 94       	sei
}
     474:	08 95       	ret

00000476 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	8f 93       	push	r24
     482:	9f 93       	push	r25
     484:	af 93       	push	r26
     486:	bf 93       	push	r27
    ShaftCountRight++;  //increment right shaft position count
     488:	80 91 12 03 	lds	r24, 0x0312
     48c:	90 91 13 03 	lds	r25, 0x0313
     490:	a0 91 14 03 	lds	r26, 0x0314
     494:	b0 91 15 03 	lds	r27, 0x0315
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	a1 1d       	adc	r26, r1
     49c:	b1 1d       	adc	r27, r1
     49e:	80 93 12 03 	sts	0x0312, r24
     4a2:	90 93 13 03 	sts	0x0313, r25
     4a6:	a0 93 14 03 	sts	0x0314, r26
     4aa:	b0 93 15 03 	sts	0x0315, r27
}
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	af 93       	push	r26
     4d0:	bf 93       	push	r27
    ShaftCountLeft++;  //increment left shaft position count
     4d2:	80 91 0e 03 	lds	r24, 0x030E
     4d6:	90 91 0f 03 	lds	r25, 0x030F
     4da:	a0 91 10 03 	lds	r26, 0x0310
     4de:	b0 91 11 03 	lds	r27, 0x0311
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	a1 1d       	adc	r26, r1
     4e6:	b1 1d       	adc	r27, r1
     4e8:	80 93 0e 03 	sts	0x030E, r24
     4ec:	90 93 0f 03 	sts	0x030F, r25
     4f0:	a0 93 10 03 	sts	0x0310, r26
     4f4:	b0 93 11 03 	sts	0x0311, r27
}
     4f8:	bf 91       	pop	r27
     4fa:	af 91       	pop	r26
     4fc:	9f 91       	pop	r25
     4fe:	8f 91       	pop	r24
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <drop>:
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     50a:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     50c:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     50e:	88 b9       	out	0x08, r24	; 8
     510:	88 e8       	ldi	r24, 0x88	; 136
     512:	93 e1       	ldi	r25, 0x13	; 19
     514:	20 e7       	ldi	r18, 0x70	; 112
     516:	31 e0       	ldi	r19, 0x01	; 1
     518:	f9 01       	movw	r30, r18
     51a:	31 97       	sbiw	r30, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <drop+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     51e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     520:	d9 f7       	brne	.-10     	; 0x518 <drop+0xe>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     522:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     524:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     526:	88 b9       	out	0x08, r24	; 8
     528:	88 e8       	ldi	r24, 0x88	; 136
     52a:	93 e1       	ldi	r25, 0x13	; 19
     52c:	20 e7       	ldi	r18, 0x70	; 112
     52e:	31 e0       	ldi	r19, 0x01	; 1
     530:	f9 01       	movw	r30, r18
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <drop+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     536:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     538:	d9 f7       	brne	.-10     	; 0x530 <drop+0x26>
void drop() {
    buzzer_on();
    _delay_ms(500);
    buzzer_off();
    _delay_ms(500);
}
     53a:	08 95       	ret

0000053c <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     53c:	e1 e2       	ldi	r30, 0x21	; 33
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     54e:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     552:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     556:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     55a:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     55e:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     562:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     566:	89 ea       	ldi	r24, 0xA9	; 169
     568:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     56c:	8b e0       	ldi	r24, 0x0B	; 11
     56e:	80 83       	st	Z, r24
}
     570:	08 95       	ret

00000572 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     572:	ea e7       	ldi	r30, 0x7A	; 122
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     578:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     57c:	80 e2       	ldi	r24, 0x20	; 32
     57e:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     582:	80 e8       	ldi	r24, 0x80	; 128
     584:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     586:	86 e8       	ldi	r24, 0x86	; 134
     588:	80 83       	st	Z, r24
}
     58a:	08 95       	ret

0000058c <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
     58c:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     58e:	88 30       	cpi	r24, 0x08	; 8
     590:	18 f0       	brcs	.+6      	; 0x598 <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     592:	88 e0       	ldi	r24, 0x08	; 8
     594:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;
	ADMUX= 0x20| Ch;
     598:	97 70       	andi	r25, 0x07	; 7
     59a:	90 62       	ori	r25, 0x20	; 32
     59c:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     5a0:	80 91 7a 00 	lds	r24, 0x007A
     5a4:	80 64       	ori	r24, 0x40	; 64
     5a6:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     5aa:	80 91 7a 00 	lds	r24, 0x007A
     5ae:	84 ff       	sbrs	r24, 4
     5b0:	fc cf       	rjmp	.-8      	; 0x5aa <ADC_Conversion+0x1e>
	a=ADCH;
     5b2:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     5b6:	90 91 7a 00 	lds	r25, 0x007A
     5ba:	90 61       	ori	r25, 0x10	; 16
     5bc:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     5c0:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     5c4:	08 95       	ret

000005c6 <velocity>:
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     5c6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     5ca:	60 93 2a 01 	sts	0x012A, r22
}
     5ce:	08 95       	ret

000005d0 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	18 2f       	mov	r17, r24
     5d6:	06 2f       	mov	r16, r22
     5d8:	84 2f       	mov	r24, r20

    ADC_Value = ADC_Conversion(channel);
     5da:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     5de:	48 2f       	mov	r20, r24
     5e0:	80 93 1c 03 	sts	0x031C, r24
    lcd_print(row, coloumn, ADC_Value, 3);
     5e4:	81 2f       	mov	r24, r17
     5e6:	60 2f       	mov	r22, r16
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	23 e0       	ldi	r18, 0x03	; 3
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_print>
}
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret

000005f8 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5f8:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     5fa:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     5fc:	8f 70       	andi	r24, 0x0F	; 15
     5fe:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     600:	82 b9       	out	0x02, r24	; 2
}
     602:	08 95       	ret

00000604 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     604:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     606:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     608:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     60a:	82 b9       	out	0x02, r24	; 2
}

void forward (void)
{
  motion_set (0x06);
}
     60c:	08 95       	ret

0000060e <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     60e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     610:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     612:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     614:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     616:	08 95       	ret

00000618 <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     618:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     61a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     61c:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     61e:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     620:	08 95       	ret

00000622 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     622:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     624:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     626:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     628:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    motion_set(0x04);
}
     62a:	08 95       	ret

0000062c <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     62c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     62e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     630:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     632:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    motion_set(0x02);
}
     634:	08 95       	ret

00000636 <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     636:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     638:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     63a:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     63c:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    motion_set(0x01);
}
     63e:	08 95       	ret

00000640 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     640:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     642:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     644:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     646:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    motion_set(0x08);
}
     648:	08 95       	ret

0000064a <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     64a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     64c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     64e:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
    motion_set(0x00);
}
     650:	08 95       	ret

00000652 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
    float ReqdShaftCount = 0;
    unsigned long int ReqdShaftCountInt = 0;

    ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     65a:	a0 e0       	ldi	r26, 0x00	; 0
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	bc 01       	movw	r22, r24
     660:	cd 01       	movw	r24, r26
     662:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatunsisf>
     666:	28 e4       	ldi	r18, 0x48	; 72
     668:	31 ee       	ldi	r19, 0xE1	; 225
     66a:	42 e8       	ldi	r20, 0x82	; 130
     66c:	50 e4       	ldi	r21, 0x40	; 64
     66e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__divsf3>
     672:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fixunssfsi>
     676:	7b 01       	movw	r14, r22
     678:	00 e0       	ldi	r16, 0x00	; 0
     67a:	10 e0       	ldi	r17, 0x00	; 0
    ShaftCountRight = 0;
     67c:	10 92 12 03 	sts	0x0312, r1
     680:	10 92 13 03 	sts	0x0313, r1
     684:	10 92 14 03 	sts	0x0314, r1
     688:	10 92 15 03 	sts	0x0315, r1
    ShaftCountLeft = 0;
     68c:	10 92 0e 03 	sts	0x030E, r1
     690:	10 92 0f 03 	sts	0x030F, r1
     694:	10 92 10 03 	sts	0x0310, r1
     698:	10 92 11 03 	sts	0x0311, r1

    while (1)
    {
        if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     69c:	80 91 12 03 	lds	r24, 0x0312
     6a0:	90 91 13 03 	lds	r25, 0x0313
     6a4:	a0 91 14 03 	lds	r26, 0x0314
     6a8:	b0 91 15 03 	lds	r27, 0x0315
     6ac:	20 91 0e 03 	lds	r18, 0x030E
     6b0:	30 91 0f 03 	lds	r19, 0x030F
     6b4:	40 91 10 03 	lds	r20, 0x0310
     6b8:	50 91 11 03 	lds	r21, 0x0311
     6bc:	8e 15       	cp	r24, r14
     6be:	9f 05       	cpc	r25, r15
     6c0:	a0 07       	cpc	r26, r16
     6c2:	b1 07       	cpc	r27, r17
     6c4:	28 f4       	brcc	.+10     	; 0x6d0 <angle_rotate+0x7e>
     6c6:	2e 15       	cp	r18, r14
     6c8:	3f 05       	cpc	r19, r15
     6ca:	40 07       	cpc	r20, r16
     6cc:	51 07       	cpc	r21, r17
     6ce:	30 f3       	brcs	.-52     	; 0x69c <angle_rotate+0x4a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6d0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6d2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     6d4:	82 b9       	out	0x02, r24	; 2
    {
        if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
        break;
    }
    stop(); //Stop robot
}
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	08 95       	ret

000006e0 <linear_distance_mm>:
{
    float ReqdShaftCount = 0;
    unsigned long int ReqdShaftCountInt = 0;

    ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     6e0:	a0 e0       	ldi	r26, 0x00	; 0
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	bc 01       	movw	r22, r24
     6e6:	cd 01       	movw	r24, r26
     6e8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatunsisf>
     6ec:	25 ee       	ldi	r18, 0xE5	; 229
     6ee:	30 ed       	ldi	r19, 0xD0	; 208
     6f0:	4a ea       	ldi	r20, 0xAA	; 170
     6f2:	50 e4       	ldi	r21, 0x40	; 64
     6f4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__divsf3>
     6f8:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fixunssfsi>
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24

    ShaftCountRight = 0;
     700:	10 92 12 03 	sts	0x0312, r1
     704:	10 92 13 03 	sts	0x0313, r1
     708:	10 92 14 03 	sts	0x0314, r1
     70c:	10 92 15 03 	sts	0x0315, r1
    while(1)
    {
        if(ShaftCountRight > ReqdShaftCountInt)
     710:	80 91 12 03 	lds	r24, 0x0312
     714:	90 91 13 03 	lds	r25, 0x0313
     718:	a0 91 14 03 	lds	r26, 0x0314
     71c:	b0 91 15 03 	lds	r27, 0x0315
     720:	28 17       	cp	r18, r24
     722:	39 07       	cpc	r19, r25
     724:	4a 07       	cpc	r20, r26
     726:	5b 07       	cpc	r21, r27
     728:	98 f7       	brcc	.-26     	; 0x710 <linear_distance_mm+0x30>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     72a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     72c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     72e:	82 b9       	out	0x02, r24	; 2
        {
            break;
        }
    }
    stop(); //Stop robot
}
     730:	08 95       	ret

00000732 <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     732:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     734:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     736:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     738:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
    forward();
    linear_distance_mm(DistanceInMM);
     73a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <linear_distance_mm>
}
     73e:	08 95       	ret

00000740 <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     740:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     742:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     744:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     746:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees)
{
    // 88 pulses for 360 degrees rotation 4.090 degrees per count
    left(); //Turn left
    angle_rotate(Degrees);
     748:	0e 94 29 03 	call	0x652	; 0x652 <angle_rotate>
}
     74c:	08 95       	ret

0000074e <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     74e:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     750:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     752:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     754:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
    // 88 pulses for 360 degrees rotation 4.090 degrees per count
    right(); //Turn right
    angle_rotate(Degrees);
     756:	0e 94 29 03 	call	0x652	; 0x652 <angle_rotate>
}
     75a:	08 95       	ret

0000075c <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     75c:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     75e:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     760:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     762:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_left(); //Turn soft left
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	0e 94 29 03 	call	0x652	; 0x652 <angle_rotate>
}
     76c:	08 95       	ret

0000076e <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     76e:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     770:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     772:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     774:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_right();  //Turn soft right
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	0e 94 29 03 	call	0x652	; 0x652 <angle_rotate>
}
     77e:	08 95       	ret

00000780 <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     780:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     782:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     784:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     786:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_left_2(); //Turn reverse soft left
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	0e 94 29 03 	call	0x652	; 0x652 <angle_rotate>
}
     790:	08 95       	ret

00000792 <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     792:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     794:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     796:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     798:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_right_2();  //Turn reverse soft right
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	0e 94 29 03 	call	0x652	; 0x652 <angle_rotate>
}
     7a2:	08 95       	ret

000007a4 <line_follow>:

void line_follow() {
        Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     7aa:	80 93 0b 03 	sts	0x030B, r24
        Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     7b4:	80 93 0c 03 	sts	0x030C, r24
        Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     7be:	80 93 0d 03 	sts	0x030D, r24

       // flag=0;

        print_sensor(1,1,3);    //Prints value of White Line Sensor1
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	43 e0       	ldi	r20, 0x03	; 3
     7c8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_sensor>
        print_sensor(1,5,2);    //Prints Value of White Line Sensor2
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	65 e0       	ldi	r22, 0x05	; 5
     7d0:	42 e0       	ldi	r20, 0x02	; 2
     7d2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_sensor>
        print_sensor(1,9,1);    //Prints Value of White Line Sensor3
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	69 e0       	ldi	r22, 0x09	; 9
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_sensor>



        if(Center_white_line>=thr)
     7e0:	30 91 0c 03 	lds	r19, 0x030C
     7e4:	90 91 00 02 	lds	r25, 0x0200
     7e8:	39 17       	cp	r19, r25
     7ea:	60 f0       	brcs	.+24     	; 0x804 <line_follow+0x60>
        {
            flag=1;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7f2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7f4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7f6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     7f8:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     7fa:	8a ef       	ldi	r24, 0xFA	; 250
     7fc:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     800:	80 93 2a 01 	sts	0x012A, r24
            flag=1;
            forward();
            velocity(250,250);
        }

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
     804:	20 91 0b 03 	lds	r18, 0x030B
     808:	29 17       	cp	r18, r25
     80a:	98 f4       	brcc	.+38     	; 0x832 <line_follow+0x8e>
     80c:	80 91 0d 03 	lds	r24, 0x030D
     810:	89 17       	cp	r24, r25
     812:	78 f0       	brcs	.+30     	; 0x832 <line_follow+0x8e>
     814:	39 17       	cp	r19, r25
     816:	68 f4       	brcc	.+26     	; 0x832 <line_follow+0x8e>
        {
            flag=1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     81e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     820:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     822:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     824:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     826:	86 e9       	ldi	r24, 0x96	; 150
     828:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     82c:	88 e7       	ldi	r24, 0x78	; 120
     82e:	80 93 2a 01 	sts	0x012A, r24
            flag=1;
            forward();
            velocity(150,120);
        }

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
     832:	80 91 0d 03 	lds	r24, 0x030D
     836:	89 17       	cp	r24, r25
     838:	90 f4       	brcc	.+36     	; 0x85e <line_follow+0xba>
     83a:	29 17       	cp	r18, r25
     83c:	80 f0       	brcs	.+32     	; 0x85e <line_follow+0xba>
     83e:	39 17       	cp	r19, r25
     840:	a8 f5       	brcc	.+106    	; 0x8ac <line_follow+0x108>
        {
            flag=1;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     848:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     84a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     84c:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     84e:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     850:	88 e7       	ldi	r24, 0x78	; 120
     852:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     856:	86 e9       	ldi	r24, 0x96	; 150
     858:	80 93 2a 01 	sts	0x012A, r24
     85c:	08 95       	ret
            flag=1;
            forward();
            velocity(120,150);
        }

        if(Center_white_line<thr && Left_white_line<thr && Right_white_line<thr)
     85e:	39 17       	cp	r19, r25
     860:	28 f5       	brcc	.+74     	; 0x8ac <line_follow+0x108>
     862:	29 17       	cp	r18, r25
     864:	18 f5       	brcc	.+70     	; 0x8ac <line_follow+0x108>
     866:	89 17       	cp	r24, r25
     868:	08 f5       	brcc	.+66     	; 0x8ac <line_follow+0x108>
        {
            //forward();
            if(flag<3){
     86a:	90 91 0a 03 	lds	r25, 0x030A
     86e:	93 30       	cpi	r25, 0x03	; 3
     870:	40 f0       	brcs	.+16     	; 0x882 <line_follow+0xde>
            right();
            velocity(100,100);
            flag++;
            }
            else if(flag<12){
     872:	9c 30       	cpi	r25, 0x0C	; 12
     874:	20 f4       	brcc	.+8      	; 0x87e <line_follow+0xda>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     876:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     878:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     87a:	85 60       	ori	r24, 0x05	; 5
     87c:	05 c0       	rjmp	.+10     	; 0x888 <line_follow+0xe4>
            else if(flag<12){
            left();
            velocity(100,100);
            flag++;
            }
            else if(flag<15) {
     87e:	9f 30       	cpi	r25, 0x0F	; 15
     880:	68 f4       	brcc	.+26     	; 0x89c <line_follow+0xf8>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     882:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     884:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     886:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     888:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     88a:	84 e6       	ldi	r24, 0x64	; 100
     88c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     890:	80 93 2a 01 	sts	0x012A, r24
            flag++;
            }
            else if(flag<15) {
            right();
            velocity(100,100);
            flag++;
     894:	9f 5f       	subi	r25, 0xFF	; 255
     896:	90 93 0a 03 	sts	0x030A, r25
     89a:	08 95       	ret
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     89c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     89e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     8a0:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     8a2:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8a4:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
     8a8:	10 92 2a 01 	sts	0x012A, r1
     8ac:	08 95       	ret

000008ae <line_follow_1>:
            velocity(0,0);
            }
        }
}

void line_follow_1(unsigned char wheel_speed) {
     8ae:	1f 93       	push	r17
     8b0:	18 2f       	mov	r17, r24
        Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     8b8:	80 93 0b 03 	sts	0x030B, r24
        Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     8c2:	80 93 0c 03 	sts	0x030C, r24
        Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     8cc:	80 93 0d 03 	sts	0x030D, r24

       // flag=0;

        print_sensor(1,1,3);    //Prints value of White Line Sensor1
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	43 e0       	ldi	r20, 0x03	; 3
     8d6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_sensor>
        print_sensor(1,5,2);    //Prints Value of White Line Sensor2
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	65 e0       	ldi	r22, 0x05	; 5
     8de:	42 e0       	ldi	r20, 0x02	; 2
     8e0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_sensor>
        print_sensor(1,9,1);    //Prints Value of White Line Sensor3
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	69 e0       	ldi	r22, 0x09	; 9
     8e8:	41 e0       	ldi	r20, 0x01	; 1
     8ea:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_sensor>



        if(Center_white_line>=thr)
     8ee:	30 91 0c 03 	lds	r19, 0x030C
     8f2:	90 91 00 02 	lds	r25, 0x0200
     8f6:	39 17       	cp	r19, r25
     8f8:	58 f0       	brcs	.+22     	; 0x910 <line_follow_1+0x62>
        {
            flag=1;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     900:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     902:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     904:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     906:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     908:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
     90c:	10 93 2a 01 	sts	0x012A, r17
            flag=1;
            forward();
            velocity(wheel_speed,wheel_speed);
        }

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
     910:	20 91 0b 03 	lds	r18, 0x030B
     914:	29 17       	cp	r18, r25
     916:	98 f4       	brcc	.+38     	; 0x93e <line_follow_1+0x90>
     918:	80 91 0d 03 	lds	r24, 0x030D
     91c:	89 17       	cp	r24, r25
     91e:	78 f0       	brcs	.+30     	; 0x93e <line_follow_1+0x90>
     920:	39 17       	cp	r19, r25
     922:	68 f4       	brcc	.+26     	; 0x93e <line_follow_1+0x90>
        {
            flag=1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     92a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     92c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     92e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     930:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     932:	10 93 28 01 	sts	0x0128, r17

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
        {
            flag=1;
            forward();
            velocity(wheel_speed,wheel_speed-30);
     936:	1e 51       	subi	r17, 0x1E	; 30
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
     938:	10 93 2a 01 	sts	0x012A, r17
     93c:	12 5e       	subi	r17, 0xE2	; 226
            flag=1;
            forward();
            velocity(wheel_speed,wheel_speed-30);
        }

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
     93e:	80 91 0d 03 	lds	r24, 0x030D
     942:	89 17       	cp	r24, r25
     944:	90 f4       	brcc	.+36     	; 0x96a <line_follow_1+0xbc>
     946:	29 17       	cp	r18, r25
     948:	80 f0       	brcs	.+32     	; 0x96a <line_follow_1+0xbc>
     94a:	39 17       	cp	r19, r25
     94c:	a8 f5       	brcc	.+106    	; 0x9b8 <line_follow_1+0x10a>
        {
            flag=1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     954:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     956:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     958:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     95a:	82 b9       	out	0x02, r24	; 2

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
        {
            flag=1;
            forward();
            velocity(wheel_speed-30,wheel_speed);
     95c:	1e 51       	subi	r17, 0x1E	; 30
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     95e:	10 93 28 01 	sts	0x0128, r17
     962:	12 5e       	subi	r17, 0xE2	; 226
	OCR5BL = (unsigned char)right_motor;
     964:	10 93 2a 01 	sts	0x012A, r17
     968:	27 c0       	rjmp	.+78     	; 0x9b8 <line_follow_1+0x10a>
            flag=1;
            forward();
            velocity(wheel_speed-30,wheel_speed);
        }

        if(Center_white_line<thr && Left_white_line<thr && Right_white_line<thr)
     96a:	39 17       	cp	r19, r25
     96c:	28 f5       	brcc	.+74     	; 0x9b8 <line_follow_1+0x10a>
     96e:	29 17       	cp	r18, r25
     970:	18 f5       	brcc	.+70     	; 0x9b8 <line_follow_1+0x10a>
     972:	89 17       	cp	r24, r25
     974:	08 f5       	brcc	.+66     	; 0x9b8 <line_follow_1+0x10a>
        {
            //forward();
            if(flag<3){
     976:	90 91 0a 03 	lds	r25, 0x030A
     97a:	93 30       	cpi	r25, 0x03	; 3
     97c:	40 f0       	brcs	.+16     	; 0x98e <line_follow_1+0xe0>
            right();
            velocity(80,80);
            flag++;
            }
            else if(flag<12){
     97e:	9c 30       	cpi	r25, 0x0C	; 12
     980:	20 f4       	brcc	.+8      	; 0x98a <line_follow_1+0xdc>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     982:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     984:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     986:	85 60       	ori	r24, 0x05	; 5
     988:	05 c0       	rjmp	.+10     	; 0x994 <line_follow_1+0xe6>
            else if(flag<12){
            left();
            velocity(80,80);
            flag++;
            }
            else if(flag<15) {
     98a:	9f 30       	cpi	r25, 0x0F	; 15
     98c:	68 f4       	brcc	.+26     	; 0x9a8 <line_follow_1+0xfa>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     98e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     990:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     992:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     994:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     996:	80 e5       	ldi	r24, 0x50	; 80
     998:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     99c:	80 93 2a 01 	sts	0x012A, r24
            flag++;
            }
            else if(flag<15) {
            right();
            velocity(80,80);
            flag++;
     9a0:	9f 5f       	subi	r25, 0xFF	; 255
     9a2:	90 93 0a 03 	sts	0x030A, r25
     9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <line_follow_1+0x10a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9a8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9aa:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9ac:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9ae:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9b0:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
     9b4:	10 92 2a 01 	sts	0x012A, r1
            else{
            forward();
            velocity(0,0);
            }
        }
}
     9b8:	1f 91       	pop	r17
     9ba:	08 95       	ret

000009bc <init_devices>:
    }
}

void init_devices (void)
{
 	cli(); //Clears the global interrupts
     9bc:	f8 94       	cli
	port_init();
     9be:	0e 94 0c 02 	call	0x418	; 0x418 <port_init>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
     9c2:	ea e7       	ldi	r30, 0x7A	; 122
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     9c8:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     9cc:	80 e2       	ldi	r24, 0x20	; 32
     9ce:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     9d2:	80 e8       	ldi	r24, 0x80	; 128
     9d4:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     9d6:	86 e8       	ldi	r24, 0x86	; 134
     9d8:	80 83       	st	Z, r24
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     9da:	e1 e2       	ldi	r30, 0x21	; 33
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     9e0:	9f ef       	ldi	r25, 0xFF	; 255
     9e2:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     9ec:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     9f0:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     9f4:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     9f8:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     9fc:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     a00:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     a04:	89 ea       	ldi	r24, 0xA9	; 169
     a06:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     a0a:	8b e0       	ldi	r24, 0x0B	; 11
     a0c:	80 83       	st	Z, r24
}


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    cli(); //Clears the global interrupt
     a0e:	f8 94       	cli
    EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     a10:	ea e6       	ldi	r30, 0x6A	; 106
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     a1a:	ec 9a       	sbi	0x1d, 4	; 29
    sei();   // Enables the global interrupt
     a1c:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    cli(); //Clears the global interrupt
     a1e:	f8 94       	cli
    EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     a20:	ea e6       	ldi	r30, 0x6A	; 106
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	88 60       	ori	r24, 0x08	; 8
     a28:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     a2a:	ed 9a       	sbi	0x1d, 5	; 29
    sei();   // Enables the global interrupt
     a2c:	78 94       	sei
	port_init();
	adc_init();
	timer5_init();
    left_position_encoder_interrupt_init();
    right_position_encoder_interrupt_init();
	sei();   //Enables the global interrupts
     a2e:	78 94       	sei
}
     a30:	08 95       	ret

00000a32 <pickup_1>:
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a32:	8a ef       	ldi	r24, 0xFA	; 250
     a34:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     a38:	80 93 2a 01 	sts	0x012A, r24
	//traverse(1);
}

void pickup_1() {
	velocity(250,250);
    left_degrees(90);
     a3c:	8a e5       	ldi	r24, 0x5A	; 90
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 a0 03 	call	0x740	; 0x740 <left_degrees>
     a44:	88 ee       	ldi	r24, 0xE8	; 232
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	20 e7       	ldi	r18, 0x70	; 112
     a4a:	31 e0       	ldi	r19, 0x01	; 1
     a4c:	f9 01       	movw	r30, r18
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <pickup_1+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a52:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a54:	d9 f7       	brne	.-10     	; 0xa4c <pickup_1+0x1a>
    _delay_ms(100);
    right_degrees(90);
     a56:	8a e5       	ldi	r24, 0x5A	; 90
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 a7 03 	call	0x74e	; 0x74e <right_degrees>
     a5e:	88 ee       	ldi	r24, 0xE8	; 232
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	20 e7       	ldi	r18, 0x70	; 112
     a64:	31 e0       	ldi	r19, 0x01	; 1
     a66:	f9 01       	movw	r30, r18
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <pickup_1+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a6e:	d9 f7       	brne	.-10     	; 0xa66 <pickup_1+0x34>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a70:	86 e9       	ldi	r24, 0x96	; 150
     a72:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     a76:	80 93 2a 01 	sts	0x012A, r24
    left_degrees(90);
    _delay_ms(100);
    right_degrees(90);
    _delay_ms(100);
	velocity(150,150);
}
     a7a:	08 95       	ret

00000a7c <traverse>:

	velocity(0,0);

}

void traverse(unsigned char pick_up) {
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	08 2f       	mov	r16, r24
    unsigned char rot,rot2,jn,temp,i;
    if(pick_up<7) {
     a8c:	87 30       	cpi	r24, 0x07	; 7
     a8e:	08 f0       	brcs	.+2      	; 0xa92 <traverse+0x16>
     a90:	dd c1       	rjmp	.+954    	; 0xe4c <traverse+0x3d0>
        rot = (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	80 fd       	sbrc	r24, 0
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <traverse+0x22>
     a98:	e0 2e       	mov	r14, r16
     a9a:	e6 94       	lsr	r14
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <traverse+0x2a>
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	95 95       	asr	r25
     aa2:	87 95       	ror	r24
     aa4:	e8 2e       	mov	r14, r24
     aa6:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     aa8:	42 e8       	ldi	r20, 0x82	; 130
     aaa:	d4 2e       	mov	r13, r20
	OCR5BL = (unsigned char)right_motor;
     aac:	32 e3       	ldi	r19, 0x32	; 50
     aae:	f3 2e       	mov	r15, r19
     ab0:	c0 e7       	ldi	r28, 0x70	; 112
     ab2:	d1 e0       	ldi	r29, 0x01	; 1
     ab4:	4d c0       	rjmp	.+154    	; 0xb50 <traverse+0xd4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ab6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ab8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     aba:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     abc:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     abe:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
     ac2:	f0 92 2a 01 	sts	0x012A, r15
     ac6:	80 e1       	ldi	r24, 0x10	; 16
     ac8:	97 e2       	ldi	r25, 0x27	; 39
     aca:	fe 01       	movw	r30, r28
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <traverse+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad2:	d9 f7       	brne	.-10     	; 0xaca <traverse+0x4e>
void traverse(unsigned char pick_up) {
    unsigned char rot,rot2,jn,temp,i;
    if(pick_up<7) {
        rot = (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
            while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     ada:	90 91 00 02 	lds	r25, 0x0200
     ade:	98 17       	cp	r25, r24
     ae0:	50 f3       	brcs	.-44     	; 0xab6 <traverse+0x3a>
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     ae8:	90 91 00 02 	lds	r25, 0x0200
     aec:	98 17       	cp	r25, r24
     aee:	18 f3       	brcs	.-58     	; 0xab6 <traverse+0x3a>
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     af6:	90 91 00 02 	lds	r25, 0x0200
     afa:	98 17       	cp	r25, r24
     afc:	e0 f2       	brcs	.-72     	; 0xab6 <traverse+0x3a>
     afe:	08 c0       	rjmp	.+16     	; 0xb10 <traverse+0x94>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b00:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b02:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b04:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     b06:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b08:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
     b0c:	f0 92 2a 01 	sts	0x012A, r15
                velocity(130,50);
				_delay_ms(1000);
            }
            //stop();
            //_delay_ms(100);
            while(ADC_Conversion(1)<thr&&ADC_Conversion(2)<thr&&ADC_Conversion(3)<thr) {
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     b16:	90 91 00 02 	lds	r25, 0x0200
     b1a:	89 17       	cp	r24, r25
     b1c:	70 f4       	brcc	.+28     	; 0xb3a <traverse+0xbe>
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     b24:	90 91 00 02 	lds	r25, 0x0200
     b28:	89 17       	cp	r24, r25
     b2a:	38 f4       	brcc	.+14     	; 0xb3a <traverse+0xbe>
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     b32:	90 91 00 02 	lds	r25, 0x0200
     b36:	89 17       	cp	r24, r25
     b38:	18 f3       	brcs	.-58     	; 0xb00 <traverse+0x84>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b3a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b3c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     b3e:	82 b9       	out	0x02, r24	; 2
     b40:	88 ee       	ldi	r24, 0xE8	; 232
     b42:	93 e0       	ldi	r25, 0x03	; 3
     b44:	fe 01       	movw	r30, r28
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <traverse+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b4c:	d9 f7       	brne	.-10     	; 0xb44 <traverse+0xc8>

void traverse(unsigned char pick_up) {
    unsigned char rot,rot2,jn,temp,i;
    if(pick_up<7) {
        rot = (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
     b4e:	1f 5f       	subi	r17, 0xFF	; 255
     b50:	1e 15       	cp	r17, r14
     b52:	08 f4       	brcc	.+2      	; 0xb56 <traverse+0xda>
     b54:	bf cf       	rjmp	.-130    	; 0xad4 <traverse+0x58>
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <traverse+0xe0>
        stop();
        _delay_ms(50);
*/

        while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
            line_follow();
     b58:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
        }// end while
        stop();
        _delay_ms(50);
*/

        while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     b62:	90 91 00 02 	lds	r25, 0x0200
     b66:	98 17       	cp	r25, r24
     b68:	b8 f3       	brcs	.-18     	; 0xb58 <traverse+0xdc>
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     b70:	90 91 00 02 	lds	r25, 0x0200
     b74:	98 17       	cp	r25, r24
     b76:	80 f3       	brcs	.-32     	; 0xb58 <traverse+0xdc>
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     b7e:	90 91 00 02 	lds	r25, 0x0200
     b82:	98 17       	cp	r25, r24
     b84:	48 f3       	brcs	.-46     	; 0xb58 <traverse+0xdc>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b86:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b88:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     b8a:	82 b9       	out	0x02, r24	; 2
     b8c:	84 ef       	ldi	r24, 0xF4	; 244
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	20 e7       	ldi	r18, 0x70	; 112
     b92:	31 e0       	ldi	r19, 0x01	; 1
     b94:	f9 01       	movw	r30, r18
     b96:	31 97       	sbiw	r30, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <traverse+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9c:	d9 f7       	brne	.-10     	; 0xb94 <traverse+0x118>
     b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <traverse+0x136>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ba0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ba2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ba4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     ba6:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ba8:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
     bac:	10 93 2a 01 	sts	0x012A, r17
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <traverse+0x13c>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     bb2:	22 e8       	ldi	r18, 0x82	; 130
     bb4:	f2 2e       	mov	r15, r18
	OCR5BL = (unsigned char)right_motor;
     bb6:	12 e3       	ldi	r17, 0x32	; 50
        while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
            line_follow();
        }
        stop();
        _delay_ms(50);
        while(ADC_Conversion(1)<thr && ADC_Conversion(2)<thr && ADC_Conversion(3)<thr){
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     bbe:	90 91 00 02 	lds	r25, 0x0200
     bc2:	89 17       	cp	r24, r25
     bc4:	70 f4       	brcc	.+28     	; 0xbe2 <traverse+0x166>
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     bcc:	90 91 00 02 	lds	r25, 0x0200
     bd0:	89 17       	cp	r24, r25
     bd2:	38 f4       	brcc	.+14     	; 0xbe2 <traverse+0x166>
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     bda:	90 91 00 02 	lds	r25, 0x0200
     bde:	89 17       	cp	r24, r25
     be0:	f8 f2       	brcs	.-66     	; 0xba0 <traverse+0x124>
            forward();
            velocity(130,50);
        }

        temp = 2-(pick_up%2); // pickup point
     be2:	01 70       	andi	r16, 0x01	; 1
     be4:	12 e0       	ldi	r17, 0x02	; 2
     be6:	10 1b       	sub	r17, r16
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     be8:	04 e6       	ldi	r16, 0x64	; 100
     bea:	c0 e7       	ldi	r28, 0x70	; 112
     bec:	d1 e0       	ldi	r29, 0x01	; 1
            velocity(130,50);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
     bee:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
            if(ADC_Conversion(3)>thr&&ADC_Conversion(2)>thr){
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     bf8:	90 91 00 02 	lds	r25, 0x0200
     bfc:	98 17       	cp	r25, r24
     bfe:	b8 f7       	brcc	.-18     	; 0xbee <traverse+0x172>
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     c06:	90 91 00 02 	lds	r25, 0x0200
     c0a:	98 17       	cp	r25, r24
     c0c:	80 f7       	brcc	.-32     	; 0xbee <traverse+0x172>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c0e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c10:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c12:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c14:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c16:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
     c1a:	00 93 2a 01 	sts	0x012A, r16
     c1e:	84 ef       	ldi	r24, 0xF4	; 244
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	fe 01       	movw	r30, r28
     c24:	31 97       	sbiw	r30, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <traverse+0x1a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c28:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2a:	d9 f7       	brne	.-10     	; 0xc22 <traverse+0x1a6>

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
            if(ADC_Conversion(3)>thr&&ADC_Conversion(2)>thr){
                temp--;
     c2c:	11 50       	subi	r17, 0x01	; 1
            forward();
            velocity(130,50);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
     c2e:	f9 f6       	brne	.-66     	; 0xbee <traverse+0x172>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c30:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c32:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     c34:	82 b9       	out	0x02, r24	; 2
     c36:	84 ef       	ldi	r24, 0xF4	; 244
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	20 e7       	ldi	r18, 0x70	; 112
     c3c:	31 e0       	ldi	r19, 0x01	; 1
     c3e:	f9 01       	movw	r30, r18
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <traverse+0x1c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c46:	d9 f7       	brne	.-10     	; 0xc3e <traverse+0x1c2>
        }//end while

        stop();
        _delay_ms(50);

            pickup_1();
     c48:	0e 94 19 05 	call	0xa32	; 0xa32 <pickup_1>
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <traverse+0x1d6>

        while(ADC_Conversion(1)<thr&&ADC_Conversion(2)>thr){
            line_follow();
     c4e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
        stop();
        _delay_ms(50);

            pickup_1();

        while(ADC_Conversion(1)<thr&&ADC_Conversion(2)>thr){
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     c58:	90 91 00 02 	lds	r25, 0x0200
     c5c:	89 17       	cp	r24, r25
     c5e:	88 f4       	brcc	.+34     	; 0xc82 <traverse+0x206>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     c66:	90 91 00 02 	lds	r25, 0x0200
     c6a:	98 17       	cp	r25, r24
     c6c:	80 f3       	brcs	.-32     	; 0xc4e <traverse+0x1d2>
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <traverse+0x206>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c70:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c72:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c74:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c76:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c78:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
     c7c:	10 93 2a 01 	sts	0x012A, r17
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <traverse+0x20a>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c82:	02 e8       	ldi	r16, 0x82	; 130
	OCR5BL = (unsigned char)right_motor;
     c84:	12 e3       	ldi	r17, 0x32	; 50
        while(ADC_Conversion(1)<thr&&ADC_Conversion(2)>thr){
            line_follow();
        }

        // may need some changes
        while(ADC_Conversion(3)>thr || ADC_Conversion(1)>thr || ADC_Conversion(2)<thr){
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     c8c:	90 91 00 02 	lds	r25, 0x0200
     c90:	98 17       	cp	r25, r24
     c92:	70 f3       	brcs	.-36     	; 0xc70 <traverse+0x1f4>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     c9a:	90 91 00 02 	lds	r25, 0x0200
     c9e:	98 17       	cp	r25, r24
     ca0:	38 f3       	brcs	.-50     	; 0xc70 <traverse+0x1f4>
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     ca8:	90 91 00 02 	lds	r25, 0x0200
     cac:	89 17       	cp	r24, r25
     cae:	00 f3       	brcs	.-64     	; 0xc70 <traverse+0x1f4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     cb0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cb2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     cb4:	82 b9       	out	0x02, r24	; 2
     cb6:	84 ef       	ldi	r24, 0xF4	; 244
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	20 e7       	ldi	r18, 0x70	; 112
     cbc:	31 e0       	ldi	r19, 0x01	; 1
     cbe:	f9 01       	movw	r30, r18
     cc0:	31 97       	sbiw	r30, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <traverse+0x244>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc6:	d9 f7       	brne	.-10     	; 0xcbe <traverse+0x242>
     cc8:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cca:	04 e6       	ldi	r16, 0x64	; 100
     ccc:	c0 e7       	ldi	r28, 0x70	; 112
     cce:	d1 e0       	ldi	r29, 0x01	; 1
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
            line_follow();
     cd0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     cda:	90 91 00 02 	lds	r25, 0x0200
     cde:	98 17       	cp	r25, r24
     ce0:	b8 f7       	brcc	.-18     	; 0xcd0 <traverse+0x254>
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     ce8:	90 91 00 02 	lds	r25, 0x0200
     cec:	98 17       	cp	r25, r24
     cee:	80 f7       	brcc	.-32     	; 0xcd0 <traverse+0x254>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     cf0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cf2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     cf4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     cf6:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cf8:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
     cfc:	00 93 2a 01 	sts	0x012A, r16
     d00:	84 ef       	ldi	r24, 0xF4	; 244
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	fe 01       	movw	r30, r28
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <traverse+0x28a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0c:	d9 f7       	brne	.-10     	; 0xd04 <traverse+0x288>
        jn=2;

        while(jn) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
                jn--;
     d0e:	11 50       	subi	r17, 0x01	; 1
        }
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
     d10:	f9 f6       	brne	.-66     	; 0xcd0 <traverse+0x254>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d12:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d14:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     d16:	82 b9       	out	0x02, r24	; 2
     d18:	84 ef       	ldi	r24, 0xF4	; 244
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	20 e7       	ldi	r18, 0x70	; 112
     d1e:	31 e0       	ldi	r19, 0x01	; 1
     d20:	f9 01       	movw	r30, r18
     d22:	31 97       	sbiw	r30, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <traverse+0x2a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d28:	d9 f7       	brne	.-10     	; 0xd20 <traverse+0x2a4>
        }//end while

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
     d2a:	03 e0       	ldi	r16, 0x03	; 3
     d2c:	0e 19       	sub	r16, r14
     d2e:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d30:	92 e8       	ldi	r25, 0x82	; 130
     d32:	e9 2e       	mov	r14, r25
	OCR5BL = (unsigned char)right_motor;
     d34:	82 e3       	ldi	r24, 0x32	; 50
     d36:	f8 2e       	mov	r15, r24
     d38:	c0 e7       	ldi	r28, 0x70	; 112
     d3a:	d1 e0       	ldi	r29, 0x01	; 1
     d3c:	50 c0       	rjmp	.+160    	; 0xdde <traverse+0x362>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d3e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d40:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     d42:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     d44:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d46:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
     d4a:	f0 92 2a 01 	sts	0x012A, r15
        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
            while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     d54:	90 91 00 02 	lds	r25, 0x0200
     d58:	98 17       	cp	r25, r24
     d5a:	88 f3       	brcs	.-30     	; 0xd3e <traverse+0x2c2>
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     d62:	90 91 00 02 	lds	r25, 0x0200
     d66:	98 17       	cp	r25, r24
     d68:	50 f3       	brcs	.-44     	; 0xd3e <traverse+0x2c2>
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     d70:	90 91 00 02 	lds	r25, 0x0200
     d74:	98 17       	cp	r25, r24
     d76:	18 f3       	brcs	.-58     	; 0xd3e <traverse+0x2c2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d78:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d7a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     d7c:	82 b9       	out	0x02, r24	; 2
     d7e:	88 ee       	ldi	r24, 0xE8	; 232
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	fe 01       	movw	r30, r28
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <traverse+0x308>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d88:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8a:	d9 f7       	brne	.-10     	; 0xd82 <traverse+0x306>
     d8c:	08 c0       	rjmp	.+16     	; 0xd9e <traverse+0x322>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d8e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d90:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     d92:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     d94:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d96:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
     d9a:	f0 92 2a 01 	sts	0x012A, r15
                forward();
                velocity(130,50);
            }
            stop();
            _delay_ms(100);
            while(ADC_Conversion(1)<thr&&ADC_Conversion(2)<thr&&ADC_Conversion(3)<thr) {
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     da4:	90 91 00 02 	lds	r25, 0x0200
     da8:	89 17       	cp	r24, r25
     daa:	70 f4       	brcc	.+28     	; 0xdc8 <traverse+0x34c>
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     db2:	90 91 00 02 	lds	r25, 0x0200
     db6:	89 17       	cp	r24, r25
     db8:	38 f4       	brcc	.+14     	; 0xdc8 <traverse+0x34c>
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     dc0:	90 91 00 02 	lds	r25, 0x0200
     dc4:	89 17       	cp	r24, r25
     dc6:	18 f3       	brcs	.-58     	; 0xd8e <traverse+0x312>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     dc8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     dca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     dcc:	82 b9       	out	0x02, r24	; 2
     dce:	88 ee       	ldi	r24, 0xE8	; 232
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	fe 01       	movw	r30, r28
     dd4:	31 97       	sbiw	r30, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <traverse+0x358>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	d9 f7       	brne	.-10     	; 0xdd2 <traverse+0x356>

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
     ddc:	1f 5f       	subi	r17, 0xFF	; 255
     dde:	10 17       	cp	r17, r16
     de0:	08 f4       	brcc	.+2      	; 0xde4 <traverse+0x368>
     de2:	b5 cf       	rjmp	.-150    	; 0xd4e <traverse+0x2d2>
     de4:	11 e0       	ldi	r17, 0x01	; 1
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
            line_follow();
     de6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr && ADC_Conversion(3)>thr) {
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     df0:	90 91 00 02 	lds	r25, 0x0200
     df4:	98 17       	cp	r25, r24
     df6:	b8 f7       	brcc	.-18     	; 0xde6 <traverse+0x36a>
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     dfe:	90 91 00 02 	lds	r25, 0x0200
     e02:	98 17       	cp	r25, r24
     e04:	80 f7       	brcc	.-32     	; 0xde6 <traverse+0x36a>
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     e0c:	90 91 00 02 	lds	r25, 0x0200
     e10:	98 17       	cp	r25, r24
     e12:	08 f4       	brcc	.+2      	; 0xe16 <traverse+0x39a>
                jn--;
     e14:	11 50       	subi	r17, 0x01	; 1
            stop();
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
     e16:	11 23       	and	r17, r17
     e18:	31 f7       	brne	.-52     	; 0xde6 <traverse+0x36a>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     e1a:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     e1c:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     e1e:	88 b9       	out	0x08, r24	; 8
     e20:	88 e8       	ldi	r24, 0x88	; 136
     e22:	93 e1       	ldi	r25, 0x13	; 19
     e24:	20 e7       	ldi	r18, 0x70	; 112
     e26:	31 e0       	ldi	r19, 0x01	; 1
     e28:	f9 01       	movw	r30, r18
     e2a:	31 97       	sbiw	r30, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <traverse+0x3ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e30:	d9 f7       	brne	.-10     	; 0xe28 <traverse+0x3ac>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     e32:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     e34:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     e36:	88 b9       	out	0x08, r24	; 8
     e38:	88 e8       	ldi	r24, 0x88	; 136
     e3a:	93 e1       	ldi	r25, 0x13	; 19
     e3c:	20 e7       	ldi	r18, 0x70	; 112
     e3e:	31 e0       	ldi	r19, 0x01	; 1
     e40:	f9 01       	movw	r30, r18
     e42:	31 97       	sbiw	r30, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <traverse+0x3c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e48:	d9 f7       	brne	.-10     	; 0xe40 <traverse+0x3c4>
     e4a:	11 c2       	rjmp	.+1058   	; 0x126e <traverse+0x7f2>
        drop();

    } // end if

    else {
        rot = 7 - (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
     e4c:	d8 2e       	mov	r13, r24
     e4e:	d6 94       	lsr	r13
     e50:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e52:	b2 e3       	ldi	r27, 0x32	; 50
     e54:	eb 2e       	mov	r14, r27
	OCR5BL = (unsigned char)right_motor;
     e56:	a2 e8       	ldi	r26, 0x82	; 130
     e58:	fa 2e       	mov	r15, r26
     e5a:	c0 e7       	ldi	r28, 0x70	; 112
     e5c:	d1 e0       	ldi	r29, 0x01	; 1
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <traverse+0x3f4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e60:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e62:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     e64:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     e66:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e68:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
     e6c:	f0 92 2a 01 	sts	0x012A, r15
    } // end if

    else {
        rot = 7 - (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
            while(ADC_Conversion(1)>thr || ADC_Conversion(2)>thr || ADC_Conversion(3)>thr) {
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     e76:	90 91 00 02 	lds	r25, 0x0200
     e7a:	98 17       	cp	r25, r24
     e7c:	88 f3       	brcs	.-30     	; 0xe60 <traverse+0x3e4>
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     e84:	90 91 00 02 	lds	r25, 0x0200
     e88:	98 17       	cp	r25, r24
     e8a:	50 f3       	brcs	.-44     	; 0xe60 <traverse+0x3e4>
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     e92:	90 91 00 02 	lds	r25, 0x0200
     e96:	98 17       	cp	r25, r24
     e98:	18 f3       	brcs	.-58     	; 0xe60 <traverse+0x3e4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e9a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e9c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     e9e:	82 b9       	out	0x02, r24	; 2
     ea0:	88 ee       	ldi	r24, 0xE8	; 232
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	fe 01       	movw	r30, r28
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <traverse+0x42a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eaa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	d9 f7       	brne	.-10     	; 0xea4 <traverse+0x428>
     eae:	08 c0       	rjmp	.+16     	; 0xec0 <traverse+0x444>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     eb0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     eb2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     eb4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     eb6:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     eb8:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
     ebc:	f0 92 2a 01 	sts	0x012A, r15
                forward();
                velocity(50,130);
            }
            stop();
            _delay_ms(100);
            while(ADC_Conversion(1)<thr && ADC_Conversion(2)<thr && ADC_Conversion(3)<thr) {
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     ec6:	90 91 00 02 	lds	r25, 0x0200
     eca:	89 17       	cp	r24, r25
     ecc:	70 f4       	brcc	.+28     	; 0xeea <traverse+0x46e>
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     ed4:	90 91 00 02 	lds	r25, 0x0200
     ed8:	89 17       	cp	r24, r25
     eda:	38 f4       	brcc	.+14     	; 0xeea <traverse+0x46e>
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     ee2:	90 91 00 02 	lds	r25, 0x0200
     ee6:	89 17       	cp	r24, r25
     ee8:	18 f3       	brcs	.-58     	; 0xeb0 <traverse+0x434>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     eea:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     eec:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     eee:	82 b9       	out	0x02, r24	; 2
     ef0:	88 ee       	ldi	r24, 0xE8	; 232
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	fe 01       	movw	r30, r28
     ef6:	31 97       	sbiw	r30, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <traverse+0x47a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efc:	d9 f7       	brne	.-10     	; 0xef4 <traverse+0x478>

    } // end if

    else {
        rot = 7 - (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
     efe:	1f 5f       	subi	r17, 0xFF	; 255
     f00:	1d 15       	cp	r17, r13
     f02:	08 f4       	brcc	.+2      	; 0xf06 <traverse+0x48a>
     f04:	b5 cf       	rjmp	.-150    	; 0xe70 <traverse+0x3f4>
     f06:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f08:	f4 e6       	ldi	r31, 0x64	; 100
     f0a:	ff 2e       	mov	r15, r31
     f0c:	c0 e7       	ldi	r28, 0x70	; 112
     f0e:	d1 e0       	ldi	r29, 0x01	; 1
            _delay_ms(100);
        }//end for

        jn=2;
        while(jn) {
            line_follow();
     f10:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     f1a:	90 91 00 02 	lds	r25, 0x0200
     f1e:	98 17       	cp	r25, r24
     f20:	b8 f7       	brcc	.-18     	; 0xf10 <traverse+0x494>
     f22:	83 e0       	ldi	r24, 0x03	; 3
     f24:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     f28:	90 91 00 02 	lds	r25, 0x0200
     f2c:	98 17       	cp	r25, r24
     f2e:	80 f7       	brcc	.-32     	; 0xf10 <traverse+0x494>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f30:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f32:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     f34:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     f36:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f38:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
     f3c:	f0 92 2a 01 	sts	0x012A, r15
     f40:	84 ef       	ldi	r24, 0xF4	; 244
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	fe 01       	movw	r30, r28
     f46:	31 97       	sbiw	r30, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <traverse+0x4ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4c:	d9 f7       	brne	.-10     	; 0xf44 <traverse+0x4c8>

        jn=2;
        while(jn) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
                jn--;
     f4e:	11 50       	subi	r17, 0x01	; 1
            stop();
            _delay_ms(100);
        }//end for

        jn=2;
        while(jn) {
     f50:	f9 f6       	brne	.-66     	; 0xf10 <traverse+0x494>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f52:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f54:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     f56:	82 b9       	out	0x02, r24	; 2
     f58:	84 ef       	ldi	r24, 0xF4	; 244
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	20 e7       	ldi	r18, 0x70	; 112
     f5e:	31 e0       	ldi	r19, 0x01	; 1
     f60:	f9 01       	movw	r30, r18
     f62:	31 97       	sbiw	r30, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <traverse+0x4e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f66:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f68:	d9 f7       	brne	.-10     	; 0xf60 <traverse+0x4e4>
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <traverse+0x502>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f6c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f6e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     f70:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     f72:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f74:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
     f78:	10 93 2a 01 	sts	0x012A, r17
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <traverse+0x504>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f7e:	14 e6       	ldi	r17, 0x64	; 100
            }
        }// end while
        stop();
        _delay_ms(50);

        while(ADC_Conversion(1)>thr || ADC_Conversion(2)>thr || ADC_Conversion(3)>thr) {
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     f86:	90 91 00 02 	lds	r25, 0x0200
     f8a:	98 17       	cp	r25, r24
     f8c:	78 f3       	brcs	.-34     	; 0xf6c <traverse+0x4f0>
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     f94:	90 91 00 02 	lds	r25, 0x0200
     f98:	98 17       	cp	r25, r24
     f9a:	40 f3       	brcs	.-48     	; 0xf6c <traverse+0x4f0>
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     fa2:	90 91 00 02 	lds	r25, 0x0200
     fa6:	98 17       	cp	r25, r24
     fa8:	08 f3       	brcs	.-62     	; 0xf6c <traverse+0x4f0>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     faa:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     fac:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     fae:	82 b9       	out	0x02, r24	; 2
     fb0:	84 ef       	ldi	r24, 0xF4	; 244
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	20 e7       	ldi	r18, 0x70	; 112
     fb6:	31 e0       	ldi	r19, 0x01	; 1
     fb8:	f9 01       	movw	r30, r18
     fba:	31 97       	sbiw	r30, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <traverse+0x53e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc0:	d9 f7       	brne	.-10     	; 0xfb8 <traverse+0x53c>
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <traverse+0x55a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     fc4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     fc6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     fc8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     fca:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     fcc:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
     fd0:	10 93 2a 01 	sts	0x012A, r17
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <traverse+0x560>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     fd6:	e2 e3       	ldi	r30, 0x32	; 50
     fd8:	fe 2e       	mov	r15, r30
	OCR5BL = (unsigned char)right_motor;
     fda:	12 e8       	ldi	r17, 0x82	; 130
            forward();
            velocity(100,100);
        }
        stop();
        _delay_ms(50);
        while(ADC_Conversion(1)<thr && ADC_Conversion(2)<thr && ADC_Conversion(3)<thr){
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     fe2:	90 91 00 02 	lds	r25, 0x0200
     fe6:	89 17       	cp	r24, r25
     fe8:	70 f4       	brcc	.+28     	; 0x1006 <traverse+0x58a>
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     ff0:	90 91 00 02 	lds	r25, 0x0200
     ff4:	89 17       	cp	r24, r25
     ff6:	38 f4       	brcc	.+14     	; 0x1006 <traverse+0x58a>
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
     ffe:	90 91 00 02 	lds	r25, 0x0200
    1002:	89 17       	cp	r24, r25
    1004:	f8 f2       	brcs	.-66     	; 0xfc4 <traverse+0x548>
            forward();
            velocity(50,130);
        }

        temp = 2-(pick_up%2); // pickup point
    1006:	01 70       	andi	r16, 0x01	; 1
    1008:	12 e0       	ldi	r17, 0x02	; 2
    100a:	10 1b       	sub	r17, r16
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    100c:	04 e6       	ldi	r16, 0x64	; 100
    100e:	c0 e7       	ldi	r28, 0x70	; 112
    1010:	d1 e0       	ldi	r29, 0x01	; 1
            velocity(50,130);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
    1012:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr){
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    101c:	90 91 00 02 	lds	r25, 0x0200
    1020:	98 17       	cp	r25, r24
    1022:	b8 f7       	brcc	.-18     	; 0x1012 <traverse+0x596>
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    102a:	90 91 00 02 	lds	r25, 0x0200
    102e:	98 17       	cp	r25, r24
    1030:	80 f7       	brcc	.-32     	; 0x1012 <traverse+0x596>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1032:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1034:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1036:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1038:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    103a:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    103e:	00 93 2a 01 	sts	0x012A, r16
    1042:	84 ef       	ldi	r24, 0xF4	; 244
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	fe 01       	movw	r30, r28
    1048:	31 97       	sbiw	r30, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <traverse+0x5cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	d9 f7       	brne	.-10     	; 0x1046 <traverse+0x5ca>

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr){
                temp--;
    1050:	11 50       	subi	r17, 0x01	; 1
            forward();
            velocity(50,130);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
    1052:	f9 f6       	brne	.-66     	; 0x1012 <traverse+0x596>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1054:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1056:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1058:	82 b9       	out	0x02, r24	; 2
    105a:	84 ef       	ldi	r24, 0xF4	; 244
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	20 e7       	ldi	r18, 0x70	; 112
    1060:	31 e0       	ldi	r19, 0x01	; 1
    1062:	f9 01       	movw	r30, r18
    1064:	31 97       	sbiw	r30, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <traverse+0x5e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106a:	d9 f7       	brne	.-10     	; 0x1062 <traverse+0x5e6>
        }//end while

        stop();
        _delay_ms(50);
        //
            pickup_1();
    106c:	0e 94 19 05 	call	0xa32	; 0xa32 <pickup_1>
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <traverse+0x5fa>
        //
        while(ADC_Conversion(3)<thr && ADC_Conversion(2)>thr){
            line_follow();
    1072:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
        stop();
        _delay_ms(50);
        //
            pickup_1();
        //
        while(ADC_Conversion(3)<thr && ADC_Conversion(2)>thr){
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    107c:	90 91 00 02 	lds	r25, 0x0200
    1080:	89 17       	cp	r24, r25
    1082:	88 f4       	brcc	.+34     	; 0x10a6 <traverse+0x62a>
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    108a:	90 91 00 02 	lds	r25, 0x0200
    108e:	98 17       	cp	r25, r24
    1090:	80 f3       	brcs	.-32     	; 0x1072 <traverse+0x5f6>
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <traverse+0x62a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1094:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1096:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1098:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    109a:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    109c:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    10a0:	10 93 2a 01 	sts	0x012A, r17
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <traverse+0x62e>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    10a6:	02 e3       	ldi	r16, 0x32	; 50
	OCR5BL = (unsigned char)right_motor;
    10a8:	12 e8       	ldi	r17, 0x82	; 130
        while(ADC_Conversion(3)<thr && ADC_Conversion(2)>thr){
            line_follow();
        }

        // may need some changes
        while(ADC_Conversion(3)>thr || ADC_Conversion(1)>thr || ADC_Conversion(2)<thr){
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    10b0:	90 91 00 02 	lds	r25, 0x0200
    10b4:	98 17       	cp	r25, r24
    10b6:	70 f3       	brcs	.-36     	; 0x1094 <traverse+0x618>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    10be:	90 91 00 02 	lds	r25, 0x0200
    10c2:	98 17       	cp	r25, r24
    10c4:	38 f3       	brcs	.-50     	; 0x1094 <traverse+0x618>
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    10cc:	90 91 00 02 	lds	r25, 0x0200
    10d0:	89 17       	cp	r24, r25
    10d2:	00 f3       	brcs	.-64     	; 0x1094 <traverse+0x618>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    10d4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    10d6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    10d8:	82 b9       	out	0x02, r24	; 2
    10da:	84 ef       	ldi	r24, 0xF4	; 244
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	20 e7       	ldi	r18, 0x70	; 112
    10e0:	31 e0       	ldi	r19, 0x01	; 1
    10e2:	f9 01       	movw	r30, r18
    10e4:	31 97       	sbiw	r30, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <traverse+0x668>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ea:	d9 f7       	brne	.-10     	; 0x10e2 <traverse+0x666>
    10ec:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    10ee:	04 e6       	ldi	r16, 0x64	; 100
    10f0:	c0 e7       	ldi	r28, 0x70	; 112
    10f2:	d1 e0       	ldi	r29, 0x01	; 1
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
            line_follow();
    10f4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    10fe:	90 91 00 02 	lds	r25, 0x0200
    1102:	98 17       	cp	r25, r24
    1104:	b8 f7       	brcc	.-18     	; 0x10f4 <traverse+0x678>
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    110c:	90 91 00 02 	lds	r25, 0x0200
    1110:	98 17       	cp	r25, r24
    1112:	80 f7       	brcc	.-32     	; 0x10f4 <traverse+0x678>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1114:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1116:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1118:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    111a:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    111c:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    1120:	00 93 2a 01 	sts	0x012A, r16
    1124:	84 ef       	ldi	r24, 0xF4	; 244
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	fe 01       	movw	r30, r28
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <traverse+0x6ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1130:	d9 f7       	brne	.-10     	; 0x1128 <traverse+0x6ac>
        jn=2;

        while(jn) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
                jn--;
    1132:	11 50       	subi	r17, 0x01	; 1
        }
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
    1134:	f9 f6       	brne	.-66     	; 0x10f4 <traverse+0x678>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1136:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1138:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    113a:	82 b9       	out	0x02, r24	; 2
    113c:	84 ef       	ldi	r24, 0xF4	; 244
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	20 e7       	ldi	r18, 0x70	; 112
    1142:	31 e0       	ldi	r19, 0x01	; 1
    1144:	f9 01       	movw	r30, r18
    1146:	31 97       	sbiw	r30, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <traverse+0x6ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114c:	d9 f7       	brne	.-10     	; 0x1144 <traverse+0x6c8>
        }//end while

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
    114e:	03 e0       	ldi	r16, 0x03	; 3
    1150:	0d 19       	sub	r16, r13
    1152:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1154:	72 e3       	ldi	r23, 0x32	; 50
    1156:	e7 2e       	mov	r14, r23
	OCR5BL = (unsigned char)right_motor;
    1158:	62 e8       	ldi	r22, 0x82	; 130
    115a:	f6 2e       	mov	r15, r22
    115c:	c0 e7       	ldi	r28, 0x70	; 112
    115e:	d1 e0       	ldi	r29, 0x01	; 1
    1160:	50 c0       	rjmp	.+160    	; 0x1202 <traverse+0x786>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1162:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1164:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1166:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1168:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    116a:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    116e:	f0 92 2a 01 	sts	0x012A, r15
        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
            while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1178:	90 91 00 02 	lds	r25, 0x0200
    117c:	98 17       	cp	r25, r24
    117e:	88 f3       	brcs	.-30     	; 0x1162 <traverse+0x6e6>
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1186:	90 91 00 02 	lds	r25, 0x0200
    118a:	98 17       	cp	r25, r24
    118c:	50 f3       	brcs	.-44     	; 0x1162 <traverse+0x6e6>
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1194:	90 91 00 02 	lds	r25, 0x0200
    1198:	98 17       	cp	r25, r24
    119a:	18 f3       	brcs	.-58     	; 0x1162 <traverse+0x6e6>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    119c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    119e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    11a0:	82 b9       	out	0x02, r24	; 2
    11a2:	88 ee       	ldi	r24, 0xE8	; 232
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	fe 01       	movw	r30, r28
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <traverse+0x72c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	d9 f7       	brne	.-10     	; 0x11a6 <traverse+0x72a>
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <traverse+0x746>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11b2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11b4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    11b6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    11b8:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    11ba:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    11be:	f0 92 2a 01 	sts	0x012A, r15
                forward();
                velocity(50,130);
            }
            stop();
            _delay_ms(100);
            while(ADC_Conversion(1)<thr&&ADC_Conversion(2)<thr&&ADC_Conversion(3)<thr) {
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    11c8:	90 91 00 02 	lds	r25, 0x0200
    11cc:	89 17       	cp	r24, r25
    11ce:	70 f4       	brcc	.+28     	; 0x11ec <traverse+0x770>
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    11d6:	90 91 00 02 	lds	r25, 0x0200
    11da:	89 17       	cp	r24, r25
    11dc:	38 f4       	brcc	.+14     	; 0x11ec <traverse+0x770>
    11de:	83 e0       	ldi	r24, 0x03	; 3
    11e0:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    11e4:	90 91 00 02 	lds	r25, 0x0200
    11e8:	89 17       	cp	r24, r25
    11ea:	18 f3       	brcs	.-58     	; 0x11b2 <traverse+0x736>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11ec:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11ee:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    11f0:	82 b9       	out	0x02, r24	; 2
    11f2:	88 ee       	ldi	r24, 0xE8	; 232
    11f4:	93 e0       	ldi	r25, 0x03	; 3
    11f6:	fe 01       	movw	r30, r28
    11f8:	31 97       	sbiw	r30, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <traverse+0x77c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fe:	d9 f7       	brne	.-10     	; 0x11f6 <traverse+0x77a>

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
    1200:	1f 5f       	subi	r17, 0xFF	; 255
    1202:	10 17       	cp	r17, r16
    1204:	08 f4       	brcc	.+2      	; 0x1208 <traverse+0x78c>
    1206:	b5 cf       	rjmp	.-150    	; 0x1172 <traverse+0x6f6>
    1208:	11 e0       	ldi	r17, 0x01	; 1
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
            line_follow();
    120a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr && ADC_Conversion(3)>thr) {
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1214:	90 91 00 02 	lds	r25, 0x0200
    1218:	98 17       	cp	r25, r24
    121a:	b8 f7       	brcc	.-18     	; 0x120a <traverse+0x78e>
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1222:	90 91 00 02 	lds	r25, 0x0200
    1226:	98 17       	cp	r25, r24
    1228:	80 f7       	brcc	.-32     	; 0x120a <traverse+0x78e>
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1230:	90 91 00 02 	lds	r25, 0x0200
    1234:	98 17       	cp	r25, r24
    1236:	08 f4       	brcc	.+2      	; 0x123a <traverse+0x7be>
                jn--;
    1238:	11 50       	subi	r17, 0x01	; 1
            stop();
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
    123a:	11 23       	and	r17, r17
    123c:	31 f7       	brne	.-52     	; 0x120a <traverse+0x78e>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    123e:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1240:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1242:	88 b9       	out	0x08, r24	; 8
    1244:	88 e8       	ldi	r24, 0x88	; 136
    1246:	93 e1       	ldi	r25, 0x13	; 19
    1248:	20 e7       	ldi	r18, 0x70	; 112
    124a:	31 e0       	ldi	r19, 0x01	; 1
    124c:	f9 01       	movw	r30, r18
    124e:	31 97       	sbiw	r30, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <traverse+0x7d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1252:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1254:	d9 f7       	brne	.-10     	; 0x124c <traverse+0x7d0>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1256:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1258:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    125a:	88 b9       	out	0x08, r24	; 8
    125c:	88 e8       	ldi	r24, 0x88	; 136
    125e:	93 e1       	ldi	r25, 0x13	; 19
    1260:	20 e7       	ldi	r18, 0x70	; 112
    1262:	31 e0       	ldi	r19, 0x01	; 1
    1264:	f9 01       	movw	r30, r18
    1266:	31 97       	sbiw	r30, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <traverse+0x7ea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126c:	d9 f7       	brne	.-10     	; 0x1264 <traverse+0x7e8>

        //
        drop();
        //
    }
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	08 95       	ret

0000127e <temp_fn>:
            }
        }
}


void temp_fn() {
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29

    right_degrees(45);
    1288:	8d e2       	ldi	r24, 0x2D	; 45
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 a7 03 	call	0x74e	; 0x74e <right_degrees>

    while(1) {
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1296:	90 91 00 02 	lds	r25, 0x0200
    129a:	98 17       	cp	r25, r24
    129c:	88 f0       	brcs	.+34     	; 0x12c0 <temp_fn+0x42>
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    12a4:	90 91 00 02 	lds	r25, 0x0200
    12a8:	98 17       	cp	r25, r24
    12aa:	50 f0       	brcs	.+20     	; 0x12c0 <temp_fn+0x42>
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    12b2:	90 91 00 02 	lds	r25, 0x0200
    12b6:	98 17       	cp	r25, r24
    12b8:	58 f7       	brcc	.-42     	; 0x1290 <temp_fn+0x12>
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <temp_fn+0x42>
            break;
    }

    while(flag<15) {
    line_follow();
    12bc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
    while(1) {
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
            break;
    }

    while(flag<15) {
    12c0:	80 91 0a 03 	lds	r24, 0x030A
    12c4:	8f 30       	cpi	r24, 0x0F	; 15
    12c6:	d0 f3       	brcs	.-12     	; 0x12bc <temp_fn+0x3e>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12c8:	14 e6       	ldi	r17, 0x64	; 100
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12ca:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12cc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    12ce:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    12d0:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12d2:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    12d6:	10 93 2a 01 	sts	0x012A, r17
	}

	while(1) {
	right();
	velocity(100,100);
	if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    12e0:	90 91 00 02 	lds	r25, 0x0200
    12e4:	98 17       	cp	r25, r24
    12e6:	38 f4       	brcc	.+14     	; 0x12f6 <temp_fn+0x78>
    12e8:	13 e0       	ldi	r17, 0x03	; 3
    12ea:	01 e0       	ldi	r16, 0x01	; 1
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12ec:	74 e6       	ldi	r23, 0x64	; 100
    12ee:	f7 2e       	mov	r15, r23
    12f0:	c0 e7       	ldi	r28, 0x70	; 112
    12f2:	d1 e0       	ldi	r29, 0x01	; 1
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <temp_fn+0x96>
	}

	while(1) {
	right();
	velocity(100,100);
	if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    12fc:	90 91 00 02 	lds	r25, 0x0200
    1300:	98 17       	cp	r25, r24
    1302:	90 f3       	brcs	.-28     	; 0x12e8 <temp_fn+0x6a>
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    130a:	90 91 00 02 	lds	r25, 0x0200
    130e:	98 17       	cp	r25, r24
    1310:	e0 f6       	brcc	.-72     	; 0x12ca <temp_fn+0x4c>
    1312:	ea cf       	rjmp	.-44     	; 0x12e8 <temp_fn+0x6a>

    // A
    unsigned char count = 3;
    uint8_t turn=1;
    while(count) {
        line_follow_1(150);
    1314:	86 e9       	ldi	r24, 0x96	; 150
    1316:	0e 94 57 04 	call	0x8ae	; 0x8ae <line_follow_1>

        if(count==1&&turn==1){
    131a:	11 30       	cpi	r17, 0x01	; 1
    131c:	29 f4       	brne	.+10     	; 0x1328 <temp_fn+0xaa>
    131e:	01 30       	cpi	r16, 0x01	; 1
    1320:	11 f4       	brne	.+4      	; 0x1326 <temp_fn+0xa8>
            pickup_1();
    1322:	0e 94 19 05 	call	0xa32	; 0xa32 <pickup_1>
    1326:	00 e0       	ldi	r16, 0x00	; 0
            turn=0;
        }

        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    132e:	90 91 00 02 	lds	r25, 0x0200
    1332:	98 17       	cp	r25, r24
    1334:	38 f0       	brcs	.+14     	; 0x1344 <temp_fn+0xc6>
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    133c:	90 91 00 02 	lds	r25, 0x0200
    1340:	98 17       	cp	r25, r24
    1342:	b8 f4       	brcc	.+46     	; 0x1372 <temp_fn+0xf4>
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    134a:	90 91 00 02 	lds	r25, 0x0200
    134e:	98 17       	cp	r25, r24
    1350:	80 f4       	brcc	.+32     	; 0x1372 <temp_fn+0xf4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1352:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1354:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1356:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1358:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    135a:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    135e:	f0 92 2a 01 	sts	0x012A, r15
    1362:	80 e1       	ldi	r24, 0x10	; 16
    1364:	97 e2       	ldi	r25, 0x27	; 39
    1366:	fe 01       	movw	r30, r28
    1368:	31 97       	sbiw	r30, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <temp_fn+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136e:	d9 f7       	brne	.-10     	; 0x1366 <temp_fn+0xe8>
            pickup_1();
            turn=0;
        }

        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
            count--;
    1370:	11 50       	subi	r17, 0x01	; 1
	}

    // A
    unsigned char count = 3;
    uint8_t turn=1;
    while(count) {
    1372:	11 23       	and	r17, r17
    1374:	79 f6       	brne	.-98     	; 0x1314 <temp_fn+0x96>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1376:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1378:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    137a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    137c:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    137e:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    1382:	10 92 2a 01 	sts	0x012A, r1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1386:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1388:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    138a:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    138c:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    138e:	84 e6       	ldi	r24, 0x64	; 100
    1390:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1394:	80 93 2a 01 	sts	0x012A, r24
    1398:	80 e2       	ldi	r24, 0x20	; 32
    139a:	9e e4       	ldi	r25, 0x4E	; 78
    139c:	20 e7       	ldi	r18, 0x70	; 112
    139e:	31 e0       	ldi	r19, 0x01	; 1
    13a0:	f9 01       	movw	r30, r18
    13a2:	31 97       	sbiw	r30, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <temp_fn+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a8:	d9 f7       	brne	.-10     	; 0x13a0 <temp_fn+0x122>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13aa:	16 e9       	ldi	r17, 0x96	; 150
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    13ac:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    13ae:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    13b0:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    13b2:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13b4:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    13b8:	10 93 2a 01 	sts	0x012A, r17
	_delay_ms(2000);

    while(1) {
        right();
        velocity(150,150);
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    13c2:	90 91 00 02 	lds	r25, 0x0200
    13c6:	98 17       	cp	r25, r24
    13c8:	28 f4       	brcc	.+10     	; 0x13d4 <temp_fn+0x156>
    13ca:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13cc:	04 e6       	ldi	r16, 0x64	; 100
    13ce:	c0 e7       	ldi	r28, 0x70	; 112
    13d0:	d1 e0       	ldi	r29, 0x01	; 1
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <temp_fn+0x174>
	_delay_ms(2000);

    while(1) {
        right();
        velocity(150,150);
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    13da:	90 91 00 02 	lds	r25, 0x0200
    13de:	98 17       	cp	r25, r24
    13e0:	a0 f3       	brcs	.-24     	; 0x13ca <temp_fn+0x14c>
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    13e8:	90 91 00 02 	lds	r25, 0x0200
    13ec:	98 17       	cp	r25, r24
    13ee:	f0 f6       	brcc	.-68     	; 0x13ac <temp_fn+0x12e>
    13f0:	ec cf       	rjmp	.-40     	; 0x13ca <temp_fn+0x14c>
    }

    count = 2;

    while(count) {
        line_follow();
    13f2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    13fc:	90 91 00 02 	lds	r25, 0x0200
    1400:	98 17       	cp	r25, r24
    1402:	38 f0       	brcs	.+14     	; 0x1412 <temp_fn+0x194>
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    140a:	90 91 00 02 	lds	r25, 0x0200
    140e:	98 17       	cp	r25, r24
    1410:	b8 f4       	brcc	.+46     	; 0x1440 <temp_fn+0x1c2>
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1418:	90 91 00 02 	lds	r25, 0x0200
    141c:	98 17       	cp	r25, r24
    141e:	80 f4       	brcc	.+32     	; 0x1440 <temp_fn+0x1c2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1420:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1422:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1424:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1426:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1428:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    142c:	00 93 2a 01 	sts	0x012A, r16
    1430:	80 e1       	ldi	r24, 0x10	; 16
    1432:	97 e2       	ldi	r25, 0x27	; 39
    1434:	fe 01       	movw	r30, r28
    1436:	31 97       	sbiw	r30, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <temp_fn+0x1b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	d9 f7       	brne	.-10     	; 0x1434 <temp_fn+0x1b6>
    count = 2;

    while(count) {
        line_follow();
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
            count--;
    143e:	11 50       	subi	r17, 0x01	; 1
            break;
    }

    count = 2;

    while(count) {
    1440:	11 23       	and	r17, r17
    1442:	b9 f6       	brne	.-82     	; 0x13f2 <temp_fn+0x174>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1444:	64 e6       	ldi	r22, 0x64	; 100
    1446:	f6 2e       	mov	r15, r22
    1448:	c0 e7       	ldi	r28, 0x70	; 112
    144a:	d1 e0       	ldi	r29, 0x01	; 1
    144c:	06 e9       	ldi	r16, 0x96	; 150
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    144e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1450:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1452:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1454:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1456:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    145a:	f0 92 2a 01 	sts	0x012A, r15
    145e:	80 e1       	ldi	r24, 0x10	; 16
    1460:	97 e2       	ldi	r25, 0x27	; 39
    1462:	fe 01       	movw	r30, r28
    1464:	31 97       	sbiw	r30, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <temp_fn+0x1e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1468:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	d9 f7       	brne	.-10     	; 0x1462 <temp_fn+0x1e4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    146c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    146e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1470:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1472:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1474:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    1478:	00 93 2a 01 	sts	0x012A, r16
        _delay_ms(1000);

        while(1) {
            right();
            velocity(150,150);
            if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1482:	90 91 00 02 	lds	r25, 0x0200
    1486:	98 17       	cp	r25, r24
    1488:	70 f0       	brcs	.+28     	; 0x14a6 <temp_fn+0x228>
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    1490:	90 91 00 02 	lds	r25, 0x0200
    1494:	98 17       	cp	r25, r24
    1496:	38 f0       	brcs	.+14     	; 0x14a6 <temp_fn+0x228>
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    149e:	90 91 00 02 	lds	r25, 0x0200
    14a2:	98 17       	cp	r25, r24
    14a4:	18 f7       	brcc	.-58     	; 0x146c <temp_fn+0x1ee>
            _delay_ms(1000);
        }
    }

    unsigned char i=0;
    for(i=0;i<2;i++) {
    14a6:	1f 5f       	subi	r17, 0xFF	; 255
    14a8:	12 30       	cpi	r17, 0x02	; 2
    14aa:	89 f6       	brne	.-94     	; 0x144e <temp_fn+0x1d0>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    14ac:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    14ae:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    14b0:	88 b9       	out	0x08, r24	; 8
    14b2:	88 ee       	ldi	r24, 0xE8	; 232
    14b4:	93 e0       	ldi	r25, 0x03	; 3
    14b6:	20 e7       	ldi	r18, 0x70	; 112
    14b8:	31 e0       	ldi	r19, 0x01	; 1
    14ba:	f9 01       	movw	r30, r18
    14bc:	31 97       	sbiw	r30, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <temp_fn+0x23e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	d9 f7       	brne	.-10     	; 0x14ba <temp_fn+0x23c>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    14c4:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    14c6:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    14c8:	88 b9       	out	0x08, r24	; 8
    14ca:	88 ee       	ldi	r24, 0xE8	; 232
    14cc:	93 e0       	ldi	r25, 0x03	; 3
    14ce:	20 e7       	ldi	r18, 0x70	; 112
    14d0:	31 e0       	ldi	r19, 0x01	; 1
    14d2:	f9 01       	movw	r30, r18
    14d4:	31 97       	sbiw	r30, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <temp_fn+0x256>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14da:	d9 f7       	brne	.-10     	; 0x14d2 <temp_fn+0x254>
    14dc:	11 e0       	ldi	r17, 0x01	; 1
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14de:	04 e6       	ldi	r16, 0x64	; 100
    14e0:	c0 e7       	ldi	r28, 0x70	; 112
    14e2:	d1 e0       	ldi	r29, 0x01	; 1
	//velocity(0,0);

    // S
    count = 1;
     while(count) {
        line_follow();
    14e4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    14ee:	90 91 00 02 	lds	r25, 0x0200
    14f2:	98 17       	cp	r25, r24
    14f4:	38 f0       	brcs	.+14     	; 0x1504 <temp_fn+0x286>
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    14fc:	90 91 00 02 	lds	r25, 0x0200
    1500:	98 17       	cp	r25, r24
    1502:	b8 f4       	brcc	.+46     	; 0x1532 <temp_fn+0x2b4>
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	0e 94 c6 02 	call	0x58c	; 0x58c <ADC_Conversion>
    150a:	90 91 00 02 	lds	r25, 0x0200
    150e:	98 17       	cp	r25, r24
    1510:	80 f4       	brcc	.+32     	; 0x1532 <temp_fn+0x2b4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1512:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1514:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1516:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1518:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    151a:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    151e:	00 93 2a 01 	sts	0x012A, r16
    1522:	80 e1       	ldi	r24, 0x10	; 16
    1524:	97 e2       	ldi	r25, 0x27	; 39
    1526:	fe 01       	movw	r30, r28
    1528:	31 97       	sbiw	r30, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <temp_fn+0x2aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	d9 f7       	brne	.-10     	; 0x1526 <temp_fn+0x2a8>
    // S
    count = 1;
     while(count) {
        line_follow();
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
            count--;
    1530:	11 50       	subi	r17, 0x01	; 1
    _delay_ms(100);
	//velocity(0,0);

    // S
    count = 1;
     while(count) {
    1532:	11 23       	and	r17, r17
    1534:	b9 f6       	brne	.-82     	; 0x14e4 <temp_fn+0x266>
    1536:	1a e0       	ldi	r17, 0x0A	; 10
        }
    }

    count=10;
    while(count){
        line_follow();
    1538:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <line_follow>
        count--;
    153c:	11 50       	subi	r17, 0x01	; 1
            _delay_ms(1000);
        }
    }

    count=10;
    while(count){
    153e:	e1 f7       	brne	.-8      	; 0x1538 <temp_fn+0x2ba>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1540:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    1544:	10 92 2a 01 	sts	0x012A, r1
        count--;
    }

	velocity(0,0);

}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	08 95       	ret

00001554 <main>:
}

//Main Function
int main()
{
	init_devices();
    1554:	0e 94 de 04 	call	0x9bc	; 0x9bc <init_devices>
	lcd_set_4bit();
    1558:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    155c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>

    temp_fn();
    1560:	0e 94 3f 09 	call	0x127e	; 0x127e <temp_fn>
	//traverse(1);
}
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	08 95       	ret

0000156a <__fixunssfsi>:
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	7b 01       	movw	r14, r22
    1574:	8c 01       	movw	r16, r24
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	5f e4       	ldi	r21, 0x4F	; 79
    157e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gesf2>
    1582:	88 23       	and	r24, r24
    1584:	8c f0       	brlt	.+34     	; 0x15a8 <__fixunssfsi+0x3e>
    1586:	c8 01       	movw	r24, r16
    1588:	b7 01       	movw	r22, r14
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	5f e4       	ldi	r21, 0x4F	; 79
    1592:	0e 94 2d 0c 	call	0x185a	; 0x185a <__subsf3>
    1596:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__fixsfsi>
    159a:	9b 01       	movw	r18, r22
    159c:	ac 01       	movw	r20, r24
    159e:	20 50       	subi	r18, 0x00	; 0
    15a0:	30 40       	sbci	r19, 0x00	; 0
    15a2:	40 40       	sbci	r20, 0x00	; 0
    15a4:	50 48       	sbci	r21, 0x80	; 128
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <__fixunssfsi+0x4a>
    15a8:	c8 01       	movw	r24, r16
    15aa:	b7 01       	movw	r22, r14
    15ac:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__fixsfsi>
    15b0:	9b 01       	movw	r18, r22
    15b2:	ac 01       	movw	r20, r24
    15b4:	b9 01       	movw	r22, r18
    15b6:	ca 01       	movw	r24, r20
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	08 95       	ret

000015c2 <_fpadd_parts>:
    15c2:	a0 e0       	ldi	r26, 0x00	; 0
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 ee       	ldi	r30, 0xE7	; 231
    15c8:	fa e0       	ldi	r31, 0x0A	; 10
    15ca:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__prologue_saves__>
    15ce:	dc 01       	movw	r26, r24
    15d0:	2b 01       	movw	r4, r22
    15d2:	fa 01       	movw	r30, r20
    15d4:	9c 91       	ld	r25, X
    15d6:	92 30       	cpi	r25, 0x02	; 2
    15d8:	08 f4       	brcc	.+2      	; 0x15dc <_fpadd_parts+0x1a>
    15da:	39 c1       	rjmp	.+626    	; 0x184e <_fpadd_parts+0x28c>
    15dc:	eb 01       	movw	r28, r22
    15de:	88 81       	ld	r24, Y
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	08 f4       	brcc	.+2      	; 0x15e6 <_fpadd_parts+0x24>
    15e4:	33 c1       	rjmp	.+614    	; 0x184c <_fpadd_parts+0x28a>
    15e6:	94 30       	cpi	r25, 0x04	; 4
    15e8:	69 f4       	brne	.+26     	; 0x1604 <_fpadd_parts+0x42>
    15ea:	84 30       	cpi	r24, 0x04	; 4
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <_fpadd_parts+0x2e>
    15ee:	2f c1       	rjmp	.+606    	; 0x184e <_fpadd_parts+0x28c>
    15f0:	11 96       	adiw	r26, 0x01	; 1
    15f2:	9c 91       	ld	r25, X
    15f4:	11 97       	sbiw	r26, 0x01	; 1
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	98 17       	cp	r25, r24
    15fa:	09 f4       	brne	.+2      	; 0x15fe <_fpadd_parts+0x3c>
    15fc:	28 c1       	rjmp	.+592    	; 0x184e <_fpadd_parts+0x28c>
    15fe:	a1 e0       	ldi	r26, 0x01	; 1
    1600:	b2 e0       	ldi	r27, 0x02	; 2
    1602:	25 c1       	rjmp	.+586    	; 0x184e <_fpadd_parts+0x28c>
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	09 f4       	brne	.+2      	; 0x160a <_fpadd_parts+0x48>
    1608:	21 c1       	rjmp	.+578    	; 0x184c <_fpadd_parts+0x28a>
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	a9 f4       	brne	.+42     	; 0x1638 <_fpadd_parts+0x76>
    160e:	92 30       	cpi	r25, 0x02	; 2
    1610:	09 f0       	breq	.+2      	; 0x1614 <_fpadd_parts+0x52>
    1612:	1d c1       	rjmp	.+570    	; 0x184e <_fpadd_parts+0x28c>
    1614:	9a 01       	movw	r18, r20
    1616:	ad 01       	movw	r20, r26
    1618:	88 e0       	ldi	r24, 0x08	; 8
    161a:	ea 01       	movw	r28, r20
    161c:	09 90       	ld	r0, Y+
    161e:	ae 01       	movw	r20, r28
    1620:	e9 01       	movw	r28, r18
    1622:	09 92       	st	Y+, r0
    1624:	9e 01       	movw	r18, r28
    1626:	81 50       	subi	r24, 0x01	; 1
    1628:	c1 f7       	brne	.-16     	; 0x161a <_fpadd_parts+0x58>
    162a:	e2 01       	movw	r28, r4
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	11 96       	adiw	r26, 0x01	; 1
    1630:	9c 91       	ld	r25, X
    1632:	89 23       	and	r24, r25
    1634:	81 83       	std	Z+1, r24	; 0x01
    1636:	08 c1       	rjmp	.+528    	; 0x1848 <_fpadd_parts+0x286>
    1638:	92 30       	cpi	r25, 0x02	; 2
    163a:	09 f4       	brne	.+2      	; 0x163e <_fpadd_parts+0x7c>
    163c:	07 c1       	rjmp	.+526    	; 0x184c <_fpadd_parts+0x28a>
    163e:	12 96       	adiw	r26, 0x02	; 2
    1640:	2d 90       	ld	r2, X+
    1642:	3c 90       	ld	r3, X
    1644:	13 97       	sbiw	r26, 0x03	; 3
    1646:	eb 01       	movw	r28, r22
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	9b 81       	ldd	r25, Y+3	; 0x03
    164c:	14 96       	adiw	r26, 0x04	; 4
    164e:	ad 90       	ld	r10, X+
    1650:	bd 90       	ld	r11, X+
    1652:	cd 90       	ld	r12, X+
    1654:	dc 90       	ld	r13, X
    1656:	17 97       	sbiw	r26, 0x07	; 7
    1658:	ec 80       	ldd	r14, Y+4	; 0x04
    165a:	fd 80       	ldd	r15, Y+5	; 0x05
    165c:	0e 81       	ldd	r16, Y+6	; 0x06
    165e:	1f 81       	ldd	r17, Y+7	; 0x07
    1660:	91 01       	movw	r18, r2
    1662:	28 1b       	sub	r18, r24
    1664:	39 0b       	sbc	r19, r25
    1666:	b9 01       	movw	r22, r18
    1668:	37 ff       	sbrs	r19, 7
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <_fpadd_parts+0xb2>
    166c:	66 27       	eor	r22, r22
    166e:	77 27       	eor	r23, r23
    1670:	62 1b       	sub	r22, r18
    1672:	73 0b       	sbc	r23, r19
    1674:	60 32       	cpi	r22, 0x20	; 32
    1676:	71 05       	cpc	r23, r1
    1678:	0c f0       	brlt	.+2      	; 0x167c <_fpadd_parts+0xba>
    167a:	61 c0       	rjmp	.+194    	; 0x173e <_fpadd_parts+0x17c>
    167c:	12 16       	cp	r1, r18
    167e:	13 06       	cpc	r1, r19
    1680:	6c f5       	brge	.+90     	; 0x16dc <_fpadd_parts+0x11a>
    1682:	37 01       	movw	r6, r14
    1684:	48 01       	movw	r8, r16
    1686:	06 2e       	mov	r0, r22
    1688:	04 c0       	rjmp	.+8      	; 0x1692 <_fpadd_parts+0xd0>
    168a:	96 94       	lsr	r9
    168c:	87 94       	ror	r8
    168e:	77 94       	ror	r7
    1690:	67 94       	ror	r6
    1692:	0a 94       	dec	r0
    1694:	d2 f7       	brpl	.-12     	; 0x168a <_fpadd_parts+0xc8>
    1696:	21 e0       	ldi	r18, 0x01	; 1
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	04 c0       	rjmp	.+8      	; 0x16a8 <_fpadd_parts+0xe6>
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	44 1f       	adc	r20, r20
    16a6:	55 1f       	adc	r21, r21
    16a8:	6a 95       	dec	r22
    16aa:	d2 f7       	brpl	.-12     	; 0x16a0 <_fpadd_parts+0xde>
    16ac:	21 50       	subi	r18, 0x01	; 1
    16ae:	30 40       	sbci	r19, 0x00	; 0
    16b0:	40 40       	sbci	r20, 0x00	; 0
    16b2:	50 40       	sbci	r21, 0x00	; 0
    16b4:	2e 21       	and	r18, r14
    16b6:	3f 21       	and	r19, r15
    16b8:	40 23       	and	r20, r16
    16ba:	51 23       	and	r21, r17
    16bc:	21 15       	cp	r18, r1
    16be:	31 05       	cpc	r19, r1
    16c0:	41 05       	cpc	r20, r1
    16c2:	51 05       	cpc	r21, r1
    16c4:	21 f0       	breq	.+8      	; 0x16ce <_fpadd_parts+0x10c>
    16c6:	21 e0       	ldi	r18, 0x01	; 1
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	79 01       	movw	r14, r18
    16d0:	8a 01       	movw	r16, r20
    16d2:	e6 28       	or	r14, r6
    16d4:	f7 28       	or	r15, r7
    16d6:	08 29       	or	r16, r8
    16d8:	19 29       	or	r17, r9
    16da:	3c c0       	rjmp	.+120    	; 0x1754 <_fpadd_parts+0x192>
    16dc:	23 2b       	or	r18, r19
    16de:	d1 f1       	breq	.+116    	; 0x1754 <_fpadd_parts+0x192>
    16e0:	26 0e       	add	r2, r22
    16e2:	37 1e       	adc	r3, r23
    16e4:	35 01       	movw	r6, r10
    16e6:	46 01       	movw	r8, r12
    16e8:	06 2e       	mov	r0, r22
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <_fpadd_parts+0x132>
    16ec:	96 94       	lsr	r9
    16ee:	87 94       	ror	r8
    16f0:	77 94       	ror	r7
    16f2:	67 94       	ror	r6
    16f4:	0a 94       	dec	r0
    16f6:	d2 f7       	brpl	.-12     	; 0x16ec <_fpadd_parts+0x12a>
    16f8:	21 e0       	ldi	r18, 0x01	; 1
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	04 c0       	rjmp	.+8      	; 0x170a <_fpadd_parts+0x148>
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	44 1f       	adc	r20, r20
    1708:	55 1f       	adc	r21, r21
    170a:	6a 95       	dec	r22
    170c:	d2 f7       	brpl	.-12     	; 0x1702 <_fpadd_parts+0x140>
    170e:	21 50       	subi	r18, 0x01	; 1
    1710:	30 40       	sbci	r19, 0x00	; 0
    1712:	40 40       	sbci	r20, 0x00	; 0
    1714:	50 40       	sbci	r21, 0x00	; 0
    1716:	2a 21       	and	r18, r10
    1718:	3b 21       	and	r19, r11
    171a:	4c 21       	and	r20, r12
    171c:	5d 21       	and	r21, r13
    171e:	21 15       	cp	r18, r1
    1720:	31 05       	cpc	r19, r1
    1722:	41 05       	cpc	r20, r1
    1724:	51 05       	cpc	r21, r1
    1726:	21 f0       	breq	.+8      	; 0x1730 <_fpadd_parts+0x16e>
    1728:	21 e0       	ldi	r18, 0x01	; 1
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	59 01       	movw	r10, r18
    1732:	6a 01       	movw	r12, r20
    1734:	a6 28       	or	r10, r6
    1736:	b7 28       	or	r11, r7
    1738:	c8 28       	or	r12, r8
    173a:	d9 28       	or	r13, r9
    173c:	0b c0       	rjmp	.+22     	; 0x1754 <_fpadd_parts+0x192>
    173e:	82 15       	cp	r24, r2
    1740:	93 05       	cpc	r25, r3
    1742:	2c f0       	brlt	.+10     	; 0x174e <_fpadd_parts+0x18c>
    1744:	1c 01       	movw	r2, r24
    1746:	aa 24       	eor	r10, r10
    1748:	bb 24       	eor	r11, r11
    174a:	65 01       	movw	r12, r10
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <_fpadd_parts+0x192>
    174e:	ee 24       	eor	r14, r14
    1750:	ff 24       	eor	r15, r15
    1752:	87 01       	movw	r16, r14
    1754:	11 96       	adiw	r26, 0x01	; 1
    1756:	9c 91       	ld	r25, X
    1758:	d2 01       	movw	r26, r4
    175a:	11 96       	adiw	r26, 0x01	; 1
    175c:	8c 91       	ld	r24, X
    175e:	98 17       	cp	r25, r24
    1760:	09 f4       	brne	.+2      	; 0x1764 <_fpadd_parts+0x1a2>
    1762:	45 c0       	rjmp	.+138    	; 0x17ee <_fpadd_parts+0x22c>
    1764:	99 23       	and	r25, r25
    1766:	39 f0       	breq	.+14     	; 0x1776 <_fpadd_parts+0x1b4>
    1768:	a8 01       	movw	r20, r16
    176a:	97 01       	movw	r18, r14
    176c:	2a 19       	sub	r18, r10
    176e:	3b 09       	sbc	r19, r11
    1770:	4c 09       	sbc	r20, r12
    1772:	5d 09       	sbc	r21, r13
    1774:	06 c0       	rjmp	.+12     	; 0x1782 <_fpadd_parts+0x1c0>
    1776:	a6 01       	movw	r20, r12
    1778:	95 01       	movw	r18, r10
    177a:	2e 19       	sub	r18, r14
    177c:	3f 09       	sbc	r19, r15
    177e:	40 0b       	sbc	r20, r16
    1780:	51 0b       	sbc	r21, r17
    1782:	57 fd       	sbrc	r21, 7
    1784:	08 c0       	rjmp	.+16     	; 0x1796 <_fpadd_parts+0x1d4>
    1786:	11 82       	std	Z+1, r1	; 0x01
    1788:	33 82       	std	Z+3, r3	; 0x03
    178a:	22 82       	std	Z+2, r2	; 0x02
    178c:	24 83       	std	Z+4, r18	; 0x04
    178e:	35 83       	std	Z+5, r19	; 0x05
    1790:	46 83       	std	Z+6, r20	; 0x06
    1792:	57 83       	std	Z+7, r21	; 0x07
    1794:	1d c0       	rjmp	.+58     	; 0x17d0 <_fpadd_parts+0x20e>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	81 83       	std	Z+1, r24	; 0x01
    179a:	33 82       	std	Z+3, r3	; 0x03
    179c:	22 82       	std	Z+2, r2	; 0x02
    179e:	88 27       	eor	r24, r24
    17a0:	99 27       	eor	r25, r25
    17a2:	dc 01       	movw	r26, r24
    17a4:	82 1b       	sub	r24, r18
    17a6:	93 0b       	sbc	r25, r19
    17a8:	a4 0b       	sbc	r26, r20
    17aa:	b5 0b       	sbc	r27, r21
    17ac:	84 83       	std	Z+4, r24	; 0x04
    17ae:	95 83       	std	Z+5, r25	; 0x05
    17b0:	a6 83       	std	Z+6, r26	; 0x06
    17b2:	b7 83       	std	Z+7, r27	; 0x07
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <_fpadd_parts+0x20e>
    17b6:	22 0f       	add	r18, r18
    17b8:	33 1f       	adc	r19, r19
    17ba:	44 1f       	adc	r20, r20
    17bc:	55 1f       	adc	r21, r21
    17be:	24 83       	std	Z+4, r18	; 0x04
    17c0:	35 83       	std	Z+5, r19	; 0x05
    17c2:	46 83       	std	Z+6, r20	; 0x06
    17c4:	57 83       	std	Z+7, r21	; 0x07
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	93 83       	std	Z+3, r25	; 0x03
    17ce:	82 83       	std	Z+2, r24	; 0x02
    17d0:	24 81       	ldd	r18, Z+4	; 0x04
    17d2:	35 81       	ldd	r19, Z+5	; 0x05
    17d4:	46 81       	ldd	r20, Z+6	; 0x06
    17d6:	57 81       	ldd	r21, Z+7	; 0x07
    17d8:	da 01       	movw	r26, r20
    17da:	c9 01       	movw	r24, r18
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	a1 09       	sbc	r26, r1
    17e0:	b1 09       	sbc	r27, r1
    17e2:	8f 5f       	subi	r24, 0xFF	; 255
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	af 4f       	sbci	r26, 0xFF	; 255
    17e8:	bf 43       	sbci	r27, 0x3F	; 63
    17ea:	28 f3       	brcs	.-54     	; 0x17b6 <_fpadd_parts+0x1f4>
    17ec:	0b c0       	rjmp	.+22     	; 0x1804 <_fpadd_parts+0x242>
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	33 82       	std	Z+3, r3	; 0x03
    17f2:	22 82       	std	Z+2, r2	; 0x02
    17f4:	ea 0c       	add	r14, r10
    17f6:	fb 1c       	adc	r15, r11
    17f8:	0c 1d       	adc	r16, r12
    17fa:	1d 1d       	adc	r17, r13
    17fc:	e4 82       	std	Z+4, r14	; 0x04
    17fe:	f5 82       	std	Z+5, r15	; 0x05
    1800:	06 83       	std	Z+6, r16	; 0x06
    1802:	17 83       	std	Z+7, r17	; 0x07
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	80 83       	st	Z, r24
    1808:	24 81       	ldd	r18, Z+4	; 0x04
    180a:	35 81       	ldd	r19, Z+5	; 0x05
    180c:	46 81       	ldd	r20, Z+6	; 0x06
    180e:	57 81       	ldd	r21, Z+7	; 0x07
    1810:	57 ff       	sbrs	r21, 7
    1812:	1a c0       	rjmp	.+52     	; 0x1848 <_fpadd_parts+0x286>
    1814:	c9 01       	movw	r24, r18
    1816:	aa 27       	eor	r26, r26
    1818:	97 fd       	sbrc	r25, 7
    181a:	a0 95       	com	r26
    181c:	ba 2f       	mov	r27, r26
    181e:	81 70       	andi	r24, 0x01	; 1
    1820:	90 70       	andi	r25, 0x00	; 0
    1822:	a0 70       	andi	r26, 0x00	; 0
    1824:	b0 70       	andi	r27, 0x00	; 0
    1826:	56 95       	lsr	r21
    1828:	47 95       	ror	r20
    182a:	37 95       	ror	r19
    182c:	27 95       	ror	r18
    182e:	82 2b       	or	r24, r18
    1830:	93 2b       	or	r25, r19
    1832:	a4 2b       	or	r26, r20
    1834:	b5 2b       	or	r27, r21
    1836:	84 83       	std	Z+4, r24	; 0x04
    1838:	95 83       	std	Z+5, r25	; 0x05
    183a:	a6 83       	std	Z+6, r26	; 0x06
    183c:	b7 83       	std	Z+7, r27	; 0x07
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	93 83       	std	Z+3, r25	; 0x03
    1846:	82 83       	std	Z+2, r24	; 0x02
    1848:	df 01       	movw	r26, r30
    184a:	01 c0       	rjmp	.+2      	; 0x184e <_fpadd_parts+0x28c>
    184c:	d2 01       	movw	r26, r4
    184e:	cd 01       	movw	r24, r26
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	e2 e1       	ldi	r30, 0x12	; 18
    1856:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__epilogue_restores__>

0000185a <__subsf3>:
    185a:	a0 e2       	ldi	r26, 0x20	; 32
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e3 e3       	ldi	r30, 0x33	; 51
    1860:	fc e0       	ldi	r31, 0x0C	; 12
    1862:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__prologue_saves__+0x18>
    1866:	69 83       	std	Y+1, r22	; 0x01
    1868:	7a 83       	std	Y+2, r23	; 0x02
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	2d 83       	std	Y+5, r18	; 0x05
    1870:	3e 83       	std	Y+6, r19	; 0x06
    1872:	4f 83       	std	Y+7, r20	; 0x07
    1874:	58 87       	std	Y+8, r21	; 0x08
    1876:	e9 e0       	ldi	r30, 0x09	; 9
    1878:	ee 2e       	mov	r14, r30
    187a:	f1 2c       	mov	r15, r1
    187c:	ec 0e       	add	r14, r28
    187e:	fd 1e       	adc	r15, r29
    1880:	ce 01       	movw	r24, r28
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	b7 01       	movw	r22, r14
    1886:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__unpack_f>
    188a:	8e 01       	movw	r16, r28
    188c:	0f 5e       	subi	r16, 0xEF	; 239
    188e:	1f 4f       	sbci	r17, 0xFF	; 255
    1890:	ce 01       	movw	r24, r28
    1892:	05 96       	adiw	r24, 0x05	; 5
    1894:	b8 01       	movw	r22, r16
    1896:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__unpack_f>
    189a:	8a 89       	ldd	r24, Y+18	; 0x12
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	89 27       	eor	r24, r25
    18a0:	8a 8b       	std	Y+18, r24	; 0x12
    18a2:	c7 01       	movw	r24, r14
    18a4:	b8 01       	movw	r22, r16
    18a6:	ae 01       	movw	r20, r28
    18a8:	47 5e       	subi	r20, 0xE7	; 231
    18aa:	5f 4f       	sbci	r21, 0xFF	; 255
    18ac:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_fpadd_parts>
    18b0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__pack_f>
    18b4:	a0 96       	adiw	r28, 0x20	; 32
    18b6:	e6 e0       	ldi	r30, 0x06	; 6
    18b8:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__epilogue_restores__+0x18>

000018bc <__addsf3>:
    18bc:	a0 e2       	ldi	r26, 0x20	; 32
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e4 e6       	ldi	r30, 0x64	; 100
    18c2:	fc e0       	ldi	r31, 0x0C	; 12
    18c4:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__prologue_saves__+0x18>
    18c8:	69 83       	std	Y+1, r22	; 0x01
    18ca:	7a 83       	std	Y+2, r23	; 0x02
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	9c 83       	std	Y+4, r25	; 0x04
    18d0:	2d 83       	std	Y+5, r18	; 0x05
    18d2:	3e 83       	std	Y+6, r19	; 0x06
    18d4:	4f 83       	std	Y+7, r20	; 0x07
    18d6:	58 87       	std	Y+8, r21	; 0x08
    18d8:	f9 e0       	ldi	r31, 0x09	; 9
    18da:	ef 2e       	mov	r14, r31
    18dc:	f1 2c       	mov	r15, r1
    18de:	ec 0e       	add	r14, r28
    18e0:	fd 1e       	adc	r15, r29
    18e2:	ce 01       	movw	r24, r28
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	b7 01       	movw	r22, r14
    18e8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__unpack_f>
    18ec:	8e 01       	movw	r16, r28
    18ee:	0f 5e       	subi	r16, 0xEF	; 239
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	ce 01       	movw	r24, r28
    18f4:	05 96       	adiw	r24, 0x05	; 5
    18f6:	b8 01       	movw	r22, r16
    18f8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__unpack_f>
    18fc:	c7 01       	movw	r24, r14
    18fe:	b8 01       	movw	r22, r16
    1900:	ae 01       	movw	r20, r28
    1902:	47 5e       	subi	r20, 0xE7	; 231
    1904:	5f 4f       	sbci	r21, 0xFF	; 255
    1906:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_fpadd_parts>
    190a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__pack_f>
    190e:	a0 96       	adiw	r28, 0x20	; 32
    1910:	e6 e0       	ldi	r30, 0x06	; 6
    1912:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__epilogue_restores__+0x18>

00001916 <__divsf3>:
    1916:	a8 e1       	ldi	r26, 0x18	; 24
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e1 e9       	ldi	r30, 0x91	; 145
    191c:	fc e0       	ldi	r31, 0x0C	; 12
    191e:	0c 94 45 10 	jmp	0x208a	; 0x208a <__prologue_saves__+0x10>
    1922:	69 83       	std	Y+1, r22	; 0x01
    1924:	7a 83       	std	Y+2, r23	; 0x02
    1926:	8b 83       	std	Y+3, r24	; 0x03
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	2d 83       	std	Y+5, r18	; 0x05
    192c:	3e 83       	std	Y+6, r19	; 0x06
    192e:	4f 83       	std	Y+7, r20	; 0x07
    1930:	58 87       	std	Y+8, r21	; 0x08
    1932:	b9 e0       	ldi	r27, 0x09	; 9
    1934:	eb 2e       	mov	r14, r27
    1936:	f1 2c       	mov	r15, r1
    1938:	ec 0e       	add	r14, r28
    193a:	fd 1e       	adc	r15, r29
    193c:	ce 01       	movw	r24, r28
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	b7 01       	movw	r22, r14
    1942:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__unpack_f>
    1946:	8e 01       	movw	r16, r28
    1948:	0f 5e       	subi	r16, 0xEF	; 239
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
    194c:	ce 01       	movw	r24, r28
    194e:	05 96       	adiw	r24, 0x05	; 5
    1950:	b8 01       	movw	r22, r16
    1952:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__unpack_f>
    1956:	29 85       	ldd	r18, Y+9	; 0x09
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	08 f4       	brcc	.+2      	; 0x195e <__divsf3+0x48>
    195c:	7e c0       	rjmp	.+252    	; 0x1a5a <__divsf3+0x144>
    195e:	39 89       	ldd	r19, Y+17	; 0x11
    1960:	32 30       	cpi	r19, 0x02	; 2
    1962:	10 f4       	brcc	.+4      	; 0x1968 <__divsf3+0x52>
    1964:	b8 01       	movw	r22, r16
    1966:	7c c0       	rjmp	.+248    	; 0x1a60 <__divsf3+0x14a>
    1968:	8a 85       	ldd	r24, Y+10	; 0x0a
    196a:	9a 89       	ldd	r25, Y+18	; 0x12
    196c:	89 27       	eor	r24, r25
    196e:	8a 87       	std	Y+10, r24	; 0x0a
    1970:	24 30       	cpi	r18, 0x04	; 4
    1972:	11 f0       	breq	.+4      	; 0x1978 <__divsf3+0x62>
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 f4       	brne	.+12     	; 0x1984 <__divsf3+0x6e>
    1978:	23 17       	cp	r18, r19
    197a:	09 f0       	breq	.+2      	; 0x197e <__divsf3+0x68>
    197c:	6e c0       	rjmp	.+220    	; 0x1a5a <__divsf3+0x144>
    197e:	61 e0       	ldi	r22, 0x01	; 1
    1980:	72 e0       	ldi	r23, 0x02	; 2
    1982:	6e c0       	rjmp	.+220    	; 0x1a60 <__divsf3+0x14a>
    1984:	34 30       	cpi	r19, 0x04	; 4
    1986:	39 f4       	brne	.+14     	; 0x1996 <__divsf3+0x80>
    1988:	1d 86       	std	Y+13, r1	; 0x0d
    198a:	1e 86       	std	Y+14, r1	; 0x0e
    198c:	1f 86       	std	Y+15, r1	; 0x0f
    198e:	18 8a       	std	Y+16, r1	; 0x10
    1990:	1c 86       	std	Y+12, r1	; 0x0c
    1992:	1b 86       	std	Y+11, r1	; 0x0b
    1994:	04 c0       	rjmp	.+8      	; 0x199e <__divsf3+0x88>
    1996:	32 30       	cpi	r19, 0x02	; 2
    1998:	21 f4       	brne	.+8      	; 0x19a2 <__divsf3+0x8c>
    199a:	84 e0       	ldi	r24, 0x04	; 4
    199c:	89 87       	std	Y+9, r24	; 0x09
    199e:	b7 01       	movw	r22, r14
    19a0:	5f c0       	rjmp	.+190    	; 0x1a60 <__divsf3+0x14a>
    19a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    19a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    19a6:	8b 89       	ldd	r24, Y+19	; 0x13
    19a8:	9c 89       	ldd	r25, Y+20	; 0x14
    19aa:	28 1b       	sub	r18, r24
    19ac:	39 0b       	sbc	r19, r25
    19ae:	3c 87       	std	Y+12, r19	; 0x0c
    19b0:	2b 87       	std	Y+11, r18	; 0x0b
    19b2:	ed 84       	ldd	r14, Y+13	; 0x0d
    19b4:	fe 84       	ldd	r15, Y+14	; 0x0e
    19b6:	0f 85       	ldd	r16, Y+15	; 0x0f
    19b8:	18 89       	ldd	r17, Y+16	; 0x10
    19ba:	ad 88       	ldd	r10, Y+21	; 0x15
    19bc:	be 88       	ldd	r11, Y+22	; 0x16
    19be:	cf 88       	ldd	r12, Y+23	; 0x17
    19c0:	d8 8c       	ldd	r13, Y+24	; 0x18
    19c2:	ea 14       	cp	r14, r10
    19c4:	fb 04       	cpc	r15, r11
    19c6:	0c 05       	cpc	r16, r12
    19c8:	1d 05       	cpc	r17, r13
    19ca:	40 f4       	brcc	.+16     	; 0x19dc <__divsf3+0xc6>
    19cc:	ee 0c       	add	r14, r14
    19ce:	ff 1c       	adc	r15, r15
    19d0:	00 1f       	adc	r16, r16
    19d2:	11 1f       	adc	r17, r17
    19d4:	21 50       	subi	r18, 0x01	; 1
    19d6:	30 40       	sbci	r19, 0x00	; 0
    19d8:	3c 87       	std	Y+12, r19	; 0x0c
    19da:	2b 87       	std	Y+11, r18	; 0x0b
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a0 e0       	ldi	r26, 0x00	; 0
    19ea:	b0 e4       	ldi	r27, 0x40	; 64
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	ea 14       	cp	r14, r10
    19f2:	fb 04       	cpc	r15, r11
    19f4:	0c 05       	cpc	r16, r12
    19f6:	1d 05       	cpc	r17, r13
    19f8:	40 f0       	brcs	.+16     	; 0x1a0a <__divsf3+0xf4>
    19fa:	28 2b       	or	r18, r24
    19fc:	39 2b       	or	r19, r25
    19fe:	4a 2b       	or	r20, r26
    1a00:	5b 2b       	or	r21, r27
    1a02:	ea 18       	sub	r14, r10
    1a04:	fb 08       	sbc	r15, r11
    1a06:	0c 09       	sbc	r16, r12
    1a08:	1d 09       	sbc	r17, r13
    1a0a:	b6 95       	lsr	r27
    1a0c:	a7 95       	ror	r26
    1a0e:	97 95       	ror	r25
    1a10:	87 95       	ror	r24
    1a12:	ee 0c       	add	r14, r14
    1a14:	ff 1c       	adc	r15, r15
    1a16:	00 1f       	adc	r16, r16
    1a18:	11 1f       	adc	r17, r17
    1a1a:	6f 5f       	subi	r22, 0xFF	; 255
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	6f 31       	cpi	r22, 0x1F	; 31
    1a20:	71 05       	cpc	r23, r1
    1a22:	31 f7       	brne	.-52     	; 0x19f0 <__divsf3+0xda>
    1a24:	da 01       	movw	r26, r20
    1a26:	c9 01       	movw	r24, r18
    1a28:	8f 77       	andi	r24, 0x7F	; 127
    1a2a:	90 70       	andi	r25, 0x00	; 0
    1a2c:	a0 70       	andi	r26, 0x00	; 0
    1a2e:	b0 70       	andi	r27, 0x00	; 0
    1a30:	80 34       	cpi	r24, 0x40	; 64
    1a32:	91 05       	cpc	r25, r1
    1a34:	a1 05       	cpc	r26, r1
    1a36:	b1 05       	cpc	r27, r1
    1a38:	61 f4       	brne	.+24     	; 0x1a52 <__divsf3+0x13c>
    1a3a:	27 fd       	sbrc	r18, 7
    1a3c:	0a c0       	rjmp	.+20     	; 0x1a52 <__divsf3+0x13c>
    1a3e:	e1 14       	cp	r14, r1
    1a40:	f1 04       	cpc	r15, r1
    1a42:	01 05       	cpc	r16, r1
    1a44:	11 05       	cpc	r17, r1
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <__divsf3+0x13c>
    1a48:	20 5c       	subi	r18, 0xC0	; 192
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a50:	20 78       	andi	r18, 0x80	; 128
    1a52:	2d 87       	std	Y+13, r18	; 0x0d
    1a54:	3e 87       	std	Y+14, r19	; 0x0e
    1a56:	4f 87       	std	Y+15, r20	; 0x0f
    1a58:	58 8b       	std	Y+16, r21	; 0x10
    1a5a:	be 01       	movw	r22, r28
    1a5c:	67 5f       	subi	r22, 0xF7	; 247
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a60:	cb 01       	movw	r24, r22
    1a62:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__pack_f>
    1a66:	68 96       	adiw	r28, 0x18	; 24
    1a68:	ea e0       	ldi	r30, 0x0A	; 10
    1a6a:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__epilogue_restores__+0x10>

00001a6e <__gesf2>:
    1a6e:	a8 e1       	ldi	r26, 0x18	; 24
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ed e3       	ldi	r30, 0x3D	; 61
    1a74:	fd e0       	ldi	r31, 0x0D	; 13
    1a76:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__prologue_saves__+0x18>
    1a7a:	69 83       	std	Y+1, r22	; 0x01
    1a7c:	7a 83       	std	Y+2, r23	; 0x02
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	2d 83       	std	Y+5, r18	; 0x05
    1a84:	3e 83       	std	Y+6, r19	; 0x06
    1a86:	4f 83       	std	Y+7, r20	; 0x07
    1a88:	58 87       	std	Y+8, r21	; 0x08
    1a8a:	89 e0       	ldi	r24, 0x09	; 9
    1a8c:	e8 2e       	mov	r14, r24
    1a8e:	f1 2c       	mov	r15, r1
    1a90:	ec 0e       	add	r14, r28
    1a92:	fd 1e       	adc	r15, r29
    1a94:	ce 01       	movw	r24, r28
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	b7 01       	movw	r22, r14
    1a9a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__unpack_f>
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	0f 5e       	subi	r16, 0xEF	; 239
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	05 96       	adiw	r24, 0x05	; 5
    1aa8:	b8 01       	movw	r22, r16
    1aaa:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__unpack_f>
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	40 f0       	brcs	.+16     	; 0x1ac4 <__gesf2+0x56>
    1ab4:	89 89       	ldd	r24, Y+17	; 0x11
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	28 f0       	brcs	.+10     	; 0x1ac4 <__gesf2+0x56>
    1aba:	c7 01       	movw	r24, r14
    1abc:	b8 01       	movw	r22, r16
    1abe:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__fpcmp_parts_f>
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <__gesf2+0x58>
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	68 96       	adiw	r28, 0x18	; 24
    1ac8:	e6 e0       	ldi	r30, 0x06	; 6
    1aca:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__epilogue_restores__+0x18>

00001ace <__fixsfsi>:
    1ace:	ac e0       	ldi	r26, 0x0C	; 12
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ed e6       	ldi	r30, 0x6D	; 109
    1ad4:	fd e0       	ldi	r31, 0x0D	; 13
    1ad6:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__prologue_saves__+0x20>
    1ada:	69 83       	std	Y+1, r22	; 0x01
    1adc:	7a 83       	std	Y+2, r23	; 0x02
    1ade:	8b 83       	std	Y+3, r24	; 0x03
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	be 01       	movw	r22, r28
    1ae8:	6b 5f       	subi	r22, 0xFB	; 251
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__unpack_f>
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	82 30       	cpi	r24, 0x02	; 2
    1af4:	61 f1       	breq	.+88     	; 0x1b4e <__fixsfsi+0x80>
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	50 f1       	brcs	.+84     	; 0x1b4e <__fixsfsi+0x80>
    1afa:	84 30       	cpi	r24, 0x04	; 4
    1afc:	21 f4       	brne	.+8      	; 0x1b06 <__fixsfsi+0x38>
    1afe:	8e 81       	ldd	r24, Y+6	; 0x06
    1b00:	88 23       	and	r24, r24
    1b02:	51 f1       	breq	.+84     	; 0x1b58 <__fixsfsi+0x8a>
    1b04:	2e c0       	rjmp	.+92     	; 0x1b62 <__fixsfsi+0x94>
    1b06:	2f 81       	ldd	r18, Y+7	; 0x07
    1b08:	38 85       	ldd	r19, Y+8	; 0x08
    1b0a:	37 fd       	sbrc	r19, 7
    1b0c:	20 c0       	rjmp	.+64     	; 0x1b4e <__fixsfsi+0x80>
    1b0e:	6e 81       	ldd	r22, Y+6	; 0x06
    1b10:	2f 31       	cpi	r18, 0x1F	; 31
    1b12:	31 05       	cpc	r19, r1
    1b14:	1c f0       	brlt	.+6      	; 0x1b1c <__fixsfsi+0x4e>
    1b16:	66 23       	and	r22, r22
    1b18:	f9 f0       	breq	.+62     	; 0x1b58 <__fixsfsi+0x8a>
    1b1a:	23 c0       	rjmp	.+70     	; 0x1b62 <__fixsfsi+0x94>
    1b1c:	8e e1       	ldi	r24, 0x1E	; 30
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	82 1b       	sub	r24, r18
    1b22:	93 0b       	sbc	r25, r19
    1b24:	29 85       	ldd	r18, Y+9	; 0x09
    1b26:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b28:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <__fixsfsi+0x68>
    1b2e:	56 95       	lsr	r21
    1b30:	47 95       	ror	r20
    1b32:	37 95       	ror	r19
    1b34:	27 95       	ror	r18
    1b36:	8a 95       	dec	r24
    1b38:	d2 f7       	brpl	.-12     	; 0x1b2e <__fixsfsi+0x60>
    1b3a:	66 23       	and	r22, r22
    1b3c:	b1 f0       	breq	.+44     	; 0x1b6a <__fixsfsi+0x9c>
    1b3e:	50 95       	com	r21
    1b40:	40 95       	com	r20
    1b42:	30 95       	com	r19
    1b44:	21 95       	neg	r18
    1b46:	3f 4f       	sbci	r19, 0xFF	; 255
    1b48:	4f 4f       	sbci	r20, 0xFF	; 255
    1b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4c:	0e c0       	rjmp	.+28     	; 0x1b6a <__fixsfsi+0x9c>
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	09 c0       	rjmp	.+18     	; 0x1b6a <__fixsfsi+0x9c>
    1b58:	2f ef       	ldi	r18, 0xFF	; 255
    1b5a:	3f ef       	ldi	r19, 0xFF	; 255
    1b5c:	4f ef       	ldi	r20, 0xFF	; 255
    1b5e:	5f e7       	ldi	r21, 0x7F	; 127
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__fixsfsi+0x9c>
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	50 e8       	ldi	r21, 0x80	; 128
    1b6a:	b9 01       	movw	r22, r18
    1b6c:	ca 01       	movw	r24, r20
    1b6e:	2c 96       	adiw	r28, 0x0c	; 12
    1b70:	e2 e0       	ldi	r30, 0x02	; 2
    1b72:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__epilogue_restores__+0x20>

00001b76 <__floatunsisf>:
    1b76:	a8 e0       	ldi	r26, 0x08	; 8
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e1 ec       	ldi	r30, 0xC1	; 193
    1b7c:	fd e0       	ldi	r31, 0x0D	; 13
    1b7e:	0c 94 45 10 	jmp	0x208a	; 0x208a <__prologue_saves__+0x10>
    1b82:	7b 01       	movw	r14, r22
    1b84:	8c 01       	movw	r16, r24
    1b86:	61 15       	cp	r22, r1
    1b88:	71 05       	cpc	r23, r1
    1b8a:	81 05       	cpc	r24, r1
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	19 f4       	brne	.+6      	; 0x1b96 <__floatunsisf+0x20>
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	60 c0       	rjmp	.+192    	; 0x1c56 <__floatunsisf+0xe0>
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	8e e1       	ldi	r24, 0x1E	; 30
    1b9c:	c8 2e       	mov	r12, r24
    1b9e:	d1 2c       	mov	r13, r1
    1ba0:	dc 82       	std	Y+4, r13	; 0x04
    1ba2:	cb 82       	std	Y+3, r12	; 0x03
    1ba4:	ed 82       	std	Y+5, r14	; 0x05
    1ba6:	fe 82       	std	Y+6, r15	; 0x06
    1ba8:	0f 83       	std	Y+7, r16	; 0x07
    1baa:	18 87       	std	Y+8, r17	; 0x08
    1bac:	c8 01       	movw	r24, r16
    1bae:	b7 01       	movw	r22, r14
    1bb0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__clzsi2>
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	31 97       	sbiw	r30, 0x01	; 1
    1bb8:	f7 ff       	sbrs	r31, 7
    1bba:	3b c0       	rjmp	.+118    	; 0x1c32 <__floatunsisf+0xbc>
    1bbc:	22 27       	eor	r18, r18
    1bbe:	33 27       	eor	r19, r19
    1bc0:	2e 1b       	sub	r18, r30
    1bc2:	3f 0b       	sbc	r19, r31
    1bc4:	57 01       	movw	r10, r14
    1bc6:	68 01       	movw	r12, r16
    1bc8:	02 2e       	mov	r0, r18
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <__floatunsisf+0x5e>
    1bcc:	d6 94       	lsr	r13
    1bce:	c7 94       	ror	r12
    1bd0:	b7 94       	ror	r11
    1bd2:	a7 94       	ror	r10
    1bd4:	0a 94       	dec	r0
    1bd6:	d2 f7       	brpl	.-12     	; 0x1bcc <__floatunsisf+0x56>
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e0       	ldi	r26, 0x00	; 0
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	04 c0       	rjmp	.+8      	; 0x1bf2 <__floatunsisf+0x7c>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	aa 1f       	adc	r26, r26
    1bf0:	bb 1f       	adc	r27, r27
    1bf2:	2a 95       	dec	r18
    1bf4:	d2 f7       	brpl	.-12     	; 0x1bea <__floatunsisf+0x74>
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	a1 09       	sbc	r26, r1
    1bfa:	b1 09       	sbc	r27, r1
    1bfc:	8e 21       	and	r24, r14
    1bfe:	9f 21       	and	r25, r15
    1c00:	a0 23       	and	r26, r16
    1c02:	b1 23       	and	r27, r17
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	a1 05       	cpc	r26, r1
    1c08:	b1 05       	cpc	r27, r1
    1c0a:	21 f0       	breq	.+8      	; 0x1c14 <__floatunsisf+0x9e>
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	4a 29       	or	r20, r10
    1c16:	5b 29       	or	r21, r11
    1c18:	6c 29       	or	r22, r12
    1c1a:	7d 29       	or	r23, r13
    1c1c:	4d 83       	std	Y+5, r20	; 0x05
    1c1e:	5e 83       	std	Y+6, r21	; 0x06
    1c20:	6f 83       	std	Y+7, r22	; 0x07
    1c22:	78 87       	std	Y+8, r23	; 0x08
    1c24:	8e e1       	ldi	r24, 0x1E	; 30
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	8e 1b       	sub	r24, r30
    1c2a:	9f 0b       	sbc	r25, r31
    1c2c:	9c 83       	std	Y+4, r25	; 0x04
    1c2e:	8b 83       	std	Y+3, r24	; 0x03
    1c30:	12 c0       	rjmp	.+36     	; 0x1c56 <__floatunsisf+0xe0>
    1c32:	30 97       	sbiw	r30, 0x00	; 0
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <__floatunsisf+0xe0>
    1c36:	0e 2e       	mov	r0, r30
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <__floatunsisf+0xcc>
    1c3a:	ee 0c       	add	r14, r14
    1c3c:	ff 1c       	adc	r15, r15
    1c3e:	00 1f       	adc	r16, r16
    1c40:	11 1f       	adc	r17, r17
    1c42:	0a 94       	dec	r0
    1c44:	d2 f7       	brpl	.-12     	; 0x1c3a <__floatunsisf+0xc4>
    1c46:	ed 82       	std	Y+5, r14	; 0x05
    1c48:	fe 82       	std	Y+6, r15	; 0x06
    1c4a:	0f 83       	std	Y+7, r16	; 0x07
    1c4c:	18 87       	std	Y+8, r17	; 0x08
    1c4e:	ce 1a       	sub	r12, r30
    1c50:	df 0a       	sbc	r13, r31
    1c52:	dc 82       	std	Y+4, r13	; 0x04
    1c54:	cb 82       	std	Y+3, r12	; 0x03
    1c56:	1a 82       	std	Y+2, r1	; 0x02
    1c58:	ce 01       	movw	r24, r28
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__pack_f>
    1c60:	28 96       	adiw	r28, 0x08	; 8
    1c62:	ea e0       	ldi	r30, 0x0A	; 10
    1c64:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__epilogue_restores__+0x10>

00001c68 <__clzsi2>:
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	7b 01       	movw	r14, r22
    1c72:	8c 01       	movw	r16, r24
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	e8 16       	cp	r14, r24
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	f8 06       	cpc	r15, r24
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	08 07       	cpc	r16, r24
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	18 07       	cpc	r17, r24
    1c84:	88 f4       	brcc	.+34     	; 0x1ca8 <__clzsi2+0x40>
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	e8 16       	cp	r14, r24
    1c8a:	f1 04       	cpc	r15, r1
    1c8c:	01 05       	cpc	r16, r1
    1c8e:	11 05       	cpc	r17, r1
    1c90:	31 f0       	breq	.+12     	; 0x1c9e <__clzsi2+0x36>
    1c92:	28 f0       	brcs	.+10     	; 0x1c9e <__clzsi2+0x36>
    1c94:	88 e0       	ldi	r24, 0x08	; 8
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e0       	ldi	r26, 0x00	; 0
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	17 c0       	rjmp	.+46     	; 0x1ccc <__clzsi2+0x64>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e0       	ldi	r26, 0x00	; 0
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	12 c0       	rjmp	.+36     	; 0x1ccc <__clzsi2+0x64>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	e8 16       	cp	r14, r24
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	f8 06       	cpc	r15, r24
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	08 07       	cpc	r16, r24
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	18 07       	cpc	r17, r24
    1cb8:	28 f0       	brcs	.+10     	; 0x1cc4 <__clzsi2+0x5c>
    1cba:	88 e1       	ldi	r24, 0x18	; 24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 e0       	ldi	r26, 0x00	; 0
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	04 c0       	rjmp	.+8      	; 0x1ccc <__clzsi2+0x64>
    1cc4:	80 e1       	ldi	r24, 0x10	; 16
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	20 e2       	ldi	r18, 0x20	; 32
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	28 1b       	sub	r18, r24
    1cd6:	39 0b       	sbc	r19, r25
    1cd8:	4a 0b       	sbc	r20, r26
    1cda:	5b 0b       	sbc	r21, r27
    1cdc:	04 c0       	rjmp	.+8      	; 0x1ce6 <__clzsi2+0x7e>
    1cde:	16 95       	lsr	r17
    1ce0:	07 95       	ror	r16
    1ce2:	f7 94       	ror	r15
    1ce4:	e7 94       	ror	r14
    1ce6:	8a 95       	dec	r24
    1ce8:	d2 f7       	brpl	.-12     	; 0x1cde <__clzsi2+0x76>
    1cea:	f7 01       	movw	r30, r14
    1cec:	e7 5f       	subi	r30, 0xF7	; 247
    1cee:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf0:	80 81       	ld	r24, Z
    1cf2:	28 1b       	sub	r18, r24
    1cf4:	31 09       	sbc	r19, r1
    1cf6:	41 09       	sbc	r20, r1
    1cf8:	51 09       	sbc	r21, r1
    1cfa:	c9 01       	movw	r24, r18
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	08 95       	ret

00001d06 <__pack_f>:
    1d06:	df 92       	push	r13
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	fc 01       	movw	r30, r24
    1d12:	e4 80       	ldd	r14, Z+4	; 0x04
    1d14:	f5 80       	ldd	r15, Z+5	; 0x05
    1d16:	06 81       	ldd	r16, Z+6	; 0x06
    1d18:	17 81       	ldd	r17, Z+7	; 0x07
    1d1a:	d1 80       	ldd	r13, Z+1	; 0x01
    1d1c:	80 81       	ld	r24, Z
    1d1e:	82 30       	cpi	r24, 0x02	; 2
    1d20:	48 f4       	brcc	.+18     	; 0x1d34 <__pack_f+0x2e>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 e1       	ldi	r26, 0x10	; 16
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e8 2a       	or	r14, r24
    1d2c:	f9 2a       	or	r15, r25
    1d2e:	0a 2b       	or	r16, r26
    1d30:	1b 2b       	or	r17, r27
    1d32:	a5 c0       	rjmp	.+330    	; 0x1e7e <__pack_f+0x178>
    1d34:	84 30       	cpi	r24, 0x04	; 4
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <__pack_f+0x34>
    1d38:	9f c0       	rjmp	.+318    	; 0x1e78 <__pack_f+0x172>
    1d3a:	82 30       	cpi	r24, 0x02	; 2
    1d3c:	21 f4       	brne	.+8      	; 0x1d46 <__pack_f+0x40>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	05 c0       	rjmp	.+10     	; 0x1d50 <__pack_f+0x4a>
    1d46:	e1 14       	cp	r14, r1
    1d48:	f1 04       	cpc	r15, r1
    1d4a:	01 05       	cpc	r16, r1
    1d4c:	11 05       	cpc	r17, r1
    1d4e:	19 f4       	brne	.+6      	; 0x1d56 <__pack_f+0x50>
    1d50:	e0 e0       	ldi	r30, 0x00	; 0
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	96 c0       	rjmp	.+300    	; 0x1e82 <__pack_f+0x17c>
    1d56:	62 81       	ldd	r22, Z+2	; 0x02
    1d58:	73 81       	ldd	r23, Z+3	; 0x03
    1d5a:	9f ef       	ldi	r25, 0xFF	; 255
    1d5c:	62 38       	cpi	r22, 0x82	; 130
    1d5e:	79 07       	cpc	r23, r25
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <__pack_f+0x5e>
    1d62:	5b c0       	rjmp	.+182    	; 0x1e1a <__pack_f+0x114>
    1d64:	22 e8       	ldi	r18, 0x82	; 130
    1d66:	3f ef       	ldi	r19, 0xFF	; 255
    1d68:	26 1b       	sub	r18, r22
    1d6a:	37 0b       	sbc	r19, r23
    1d6c:	2a 31       	cpi	r18, 0x1A	; 26
    1d6e:	31 05       	cpc	r19, r1
    1d70:	2c f0       	brlt	.+10     	; 0x1d7c <__pack_f+0x76>
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	2a c0       	rjmp	.+84     	; 0x1dd0 <__pack_f+0xca>
    1d7c:	b8 01       	movw	r22, r16
    1d7e:	a7 01       	movw	r20, r14
    1d80:	02 2e       	mov	r0, r18
    1d82:	04 c0       	rjmp	.+8      	; 0x1d8c <__pack_f+0x86>
    1d84:	76 95       	lsr	r23
    1d86:	67 95       	ror	r22
    1d88:	57 95       	ror	r21
    1d8a:	47 95       	ror	r20
    1d8c:	0a 94       	dec	r0
    1d8e:	d2 f7       	brpl	.-12     	; 0x1d84 <__pack_f+0x7e>
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 e0       	ldi	r26, 0x00	; 0
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <__pack_f+0x9c>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	aa 1f       	adc	r26, r26
    1da0:	bb 1f       	adc	r27, r27
    1da2:	2a 95       	dec	r18
    1da4:	d2 f7       	brpl	.-12     	; 0x1d9a <__pack_f+0x94>
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	a1 09       	sbc	r26, r1
    1daa:	b1 09       	sbc	r27, r1
    1dac:	8e 21       	and	r24, r14
    1dae:	9f 21       	and	r25, r15
    1db0:	a0 23       	and	r26, r16
    1db2:	b1 23       	and	r27, r17
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	a1 05       	cpc	r26, r1
    1db8:	b1 05       	cpc	r27, r1
    1dba:	21 f0       	breq	.+8      	; 0x1dc4 <__pack_f+0xbe>
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 e0       	ldi	r26, 0x00	; 0
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	9a 01       	movw	r18, r20
    1dc6:	ab 01       	movw	r20, r22
    1dc8:	28 2b       	or	r18, r24
    1dca:	39 2b       	or	r19, r25
    1dcc:	4a 2b       	or	r20, r26
    1dce:	5b 2b       	or	r21, r27
    1dd0:	da 01       	movw	r26, r20
    1dd2:	c9 01       	movw	r24, r18
    1dd4:	8f 77       	andi	r24, 0x7F	; 127
    1dd6:	90 70       	andi	r25, 0x00	; 0
    1dd8:	a0 70       	andi	r26, 0x00	; 0
    1dda:	b0 70       	andi	r27, 0x00	; 0
    1ddc:	80 34       	cpi	r24, 0x40	; 64
    1dde:	91 05       	cpc	r25, r1
    1de0:	a1 05       	cpc	r26, r1
    1de2:	b1 05       	cpc	r27, r1
    1de4:	39 f4       	brne	.+14     	; 0x1df4 <__pack_f+0xee>
    1de6:	27 ff       	sbrs	r18, 7
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <__pack_f+0xf6>
    1dea:	20 5c       	subi	r18, 0xC0	; 192
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	4f 4f       	sbci	r20, 0xFF	; 255
    1df0:	5f 4f       	sbci	r21, 0xFF	; 255
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <__pack_f+0xf6>
    1df4:	21 5c       	subi	r18, 0xC1	; 193
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	4f 4f       	sbci	r20, 0xFF	; 255
    1dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfc:	e0 e0       	ldi	r30, 0x00	; 0
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	20 30       	cpi	r18, 0x00	; 0
    1e02:	a0 e0       	ldi	r26, 0x00	; 0
    1e04:	3a 07       	cpc	r19, r26
    1e06:	a0 e0       	ldi	r26, 0x00	; 0
    1e08:	4a 07       	cpc	r20, r26
    1e0a:	a0 e4       	ldi	r26, 0x40	; 64
    1e0c:	5a 07       	cpc	r21, r26
    1e0e:	10 f0       	brcs	.+4      	; 0x1e14 <__pack_f+0x10e>
    1e10:	e1 e0       	ldi	r30, 0x01	; 1
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	79 01       	movw	r14, r18
    1e16:	8a 01       	movw	r16, r20
    1e18:	27 c0       	rjmp	.+78     	; 0x1e68 <__pack_f+0x162>
    1e1a:	60 38       	cpi	r22, 0x80	; 128
    1e1c:	71 05       	cpc	r23, r1
    1e1e:	64 f5       	brge	.+88     	; 0x1e78 <__pack_f+0x172>
    1e20:	fb 01       	movw	r30, r22
    1e22:	e1 58       	subi	r30, 0x81	; 129
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	d8 01       	movw	r26, r16
    1e28:	c7 01       	movw	r24, r14
    1e2a:	8f 77       	andi	r24, 0x7F	; 127
    1e2c:	90 70       	andi	r25, 0x00	; 0
    1e2e:	a0 70       	andi	r26, 0x00	; 0
    1e30:	b0 70       	andi	r27, 0x00	; 0
    1e32:	80 34       	cpi	r24, 0x40	; 64
    1e34:	91 05       	cpc	r25, r1
    1e36:	a1 05       	cpc	r26, r1
    1e38:	b1 05       	cpc	r27, r1
    1e3a:	39 f4       	brne	.+14     	; 0x1e4a <__pack_f+0x144>
    1e3c:	e7 fe       	sbrs	r14, 7
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <__pack_f+0x154>
    1e40:	80 e4       	ldi	r24, 0x40	; 64
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 e0       	ldi	r26, 0x00	; 0
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <__pack_f+0x14c>
    1e4a:	8f e3       	ldi	r24, 0x3F	; 63
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e0       	ldi	r26, 0x00	; 0
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e8 0e       	add	r14, r24
    1e54:	f9 1e       	adc	r15, r25
    1e56:	0a 1f       	adc	r16, r26
    1e58:	1b 1f       	adc	r17, r27
    1e5a:	17 ff       	sbrs	r17, 7
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <__pack_f+0x162>
    1e5e:	16 95       	lsr	r17
    1e60:	07 95       	ror	r16
    1e62:	f7 94       	ror	r15
    1e64:	e7 94       	ror	r14
    1e66:	31 96       	adiw	r30, 0x01	; 1
    1e68:	87 e0       	ldi	r24, 0x07	; 7
    1e6a:	16 95       	lsr	r17
    1e6c:	07 95       	ror	r16
    1e6e:	f7 94       	ror	r15
    1e70:	e7 94       	ror	r14
    1e72:	8a 95       	dec	r24
    1e74:	d1 f7       	brne	.-12     	; 0x1e6a <__pack_f+0x164>
    1e76:	05 c0       	rjmp	.+10     	; 0x1e82 <__pack_f+0x17c>
    1e78:	ee 24       	eor	r14, r14
    1e7a:	ff 24       	eor	r15, r15
    1e7c:	87 01       	movw	r16, r14
    1e7e:	ef ef       	ldi	r30, 0xFF	; 255
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	6e 2f       	mov	r22, r30
    1e84:	67 95       	ror	r22
    1e86:	66 27       	eor	r22, r22
    1e88:	67 95       	ror	r22
    1e8a:	90 2f       	mov	r25, r16
    1e8c:	9f 77       	andi	r25, 0x7F	; 127
    1e8e:	d7 94       	ror	r13
    1e90:	dd 24       	eor	r13, r13
    1e92:	d7 94       	ror	r13
    1e94:	8e 2f       	mov	r24, r30
    1e96:	86 95       	lsr	r24
    1e98:	49 2f       	mov	r20, r25
    1e9a:	46 2b       	or	r20, r22
    1e9c:	58 2f       	mov	r21, r24
    1e9e:	5d 29       	or	r21, r13
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	ca 01       	movw	r24, r20
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	ff 90       	pop	r15
    1eaa:	ef 90       	pop	r14
    1eac:	df 90       	pop	r13
    1eae:	08 95       	ret

00001eb0 <__unpack_f>:
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	db 01       	movw	r26, r22
    1eb4:	40 81       	ld	r20, Z
    1eb6:	51 81       	ldd	r21, Z+1	; 0x01
    1eb8:	22 81       	ldd	r18, Z+2	; 0x02
    1eba:	62 2f       	mov	r22, r18
    1ebc:	6f 77       	andi	r22, 0x7F	; 127
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	22 1f       	adc	r18, r18
    1ec2:	22 27       	eor	r18, r18
    1ec4:	22 1f       	adc	r18, r18
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	89 2f       	mov	r24, r25
    1eca:	88 0f       	add	r24, r24
    1ecc:	82 2b       	or	r24, r18
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	99 27       	eor	r25, r25
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	11 96       	adiw	r26, 0x01	; 1
    1eda:	9c 93       	st	X, r25
    1edc:	11 97       	sbiw	r26, 0x01	; 1
    1ede:	21 15       	cp	r18, r1
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	a9 f5       	brne	.+106    	; 0x1f4e <__unpack_f+0x9e>
    1ee4:	41 15       	cp	r20, r1
    1ee6:	51 05       	cpc	r21, r1
    1ee8:	61 05       	cpc	r22, r1
    1eea:	71 05       	cpc	r23, r1
    1eec:	11 f4       	brne	.+4      	; 0x1ef2 <__unpack_f+0x42>
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	37 c0       	rjmp	.+110    	; 0x1f60 <__unpack_f+0xb0>
    1ef2:	82 e8       	ldi	r24, 0x82	; 130
    1ef4:	9f ef       	ldi	r25, 0xFF	; 255
    1ef6:	13 96       	adiw	r26, 0x03	; 3
    1ef8:	9c 93       	st	X, r25
    1efa:	8e 93       	st	-X, r24
    1efc:	12 97       	sbiw	r26, 0x02	; 2
    1efe:	9a 01       	movw	r18, r20
    1f00:	ab 01       	movw	r20, r22
    1f02:	67 e0       	ldi	r22, 0x07	; 7
    1f04:	22 0f       	add	r18, r18
    1f06:	33 1f       	adc	r19, r19
    1f08:	44 1f       	adc	r20, r20
    1f0a:	55 1f       	adc	r21, r21
    1f0c:	6a 95       	dec	r22
    1f0e:	d1 f7       	brne	.-12     	; 0x1f04 <__unpack_f+0x54>
    1f10:	83 e0       	ldi	r24, 0x03	; 3
    1f12:	8c 93       	st	X, r24
    1f14:	0d c0       	rjmp	.+26     	; 0x1f30 <__unpack_f+0x80>
    1f16:	22 0f       	add	r18, r18
    1f18:	33 1f       	adc	r19, r19
    1f1a:	44 1f       	adc	r20, r20
    1f1c:	55 1f       	adc	r21, r21
    1f1e:	12 96       	adiw	r26, 0x02	; 2
    1f20:	8d 91       	ld	r24, X+
    1f22:	9c 91       	ld	r25, X
    1f24:	13 97       	sbiw	r26, 0x03	; 3
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	13 96       	adiw	r26, 0x03	; 3
    1f2a:	9c 93       	st	X, r25
    1f2c:	8e 93       	st	-X, r24
    1f2e:	12 97       	sbiw	r26, 0x02	; 2
    1f30:	20 30       	cpi	r18, 0x00	; 0
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	38 07       	cpc	r19, r24
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	48 07       	cpc	r20, r24
    1f3a:	80 e4       	ldi	r24, 0x40	; 64
    1f3c:	58 07       	cpc	r21, r24
    1f3e:	58 f3       	brcs	.-42     	; 0x1f16 <__unpack_f+0x66>
    1f40:	14 96       	adiw	r26, 0x04	; 4
    1f42:	2d 93       	st	X+, r18
    1f44:	3d 93       	st	X+, r19
    1f46:	4d 93       	st	X+, r20
    1f48:	5c 93       	st	X, r21
    1f4a:	17 97       	sbiw	r26, 0x07	; 7
    1f4c:	08 95       	ret
    1f4e:	2f 3f       	cpi	r18, 0xFF	; 255
    1f50:	31 05       	cpc	r19, r1
    1f52:	79 f4       	brne	.+30     	; 0x1f72 <__unpack_f+0xc2>
    1f54:	41 15       	cp	r20, r1
    1f56:	51 05       	cpc	r21, r1
    1f58:	61 05       	cpc	r22, r1
    1f5a:	71 05       	cpc	r23, r1
    1f5c:	19 f4       	brne	.+6      	; 0x1f64 <__unpack_f+0xb4>
    1f5e:	84 e0       	ldi	r24, 0x04	; 4
    1f60:	8c 93       	st	X, r24
    1f62:	08 95       	ret
    1f64:	64 ff       	sbrs	r22, 4
    1f66:	03 c0       	rjmp	.+6      	; 0x1f6e <__unpack_f+0xbe>
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	8c 93       	st	X, r24
    1f6c:	12 c0       	rjmp	.+36     	; 0x1f92 <__unpack_f+0xe2>
    1f6e:	1c 92       	st	X, r1
    1f70:	10 c0       	rjmp	.+32     	; 0x1f92 <__unpack_f+0xe2>
    1f72:	2f 57       	subi	r18, 0x7F	; 127
    1f74:	30 40       	sbci	r19, 0x00	; 0
    1f76:	13 96       	adiw	r26, 0x03	; 3
    1f78:	3c 93       	st	X, r19
    1f7a:	2e 93       	st	-X, r18
    1f7c:	12 97       	sbiw	r26, 0x02	; 2
    1f7e:	83 e0       	ldi	r24, 0x03	; 3
    1f80:	8c 93       	st	X, r24
    1f82:	87 e0       	ldi	r24, 0x07	; 7
    1f84:	44 0f       	add	r20, r20
    1f86:	55 1f       	adc	r21, r21
    1f88:	66 1f       	adc	r22, r22
    1f8a:	77 1f       	adc	r23, r23
    1f8c:	8a 95       	dec	r24
    1f8e:	d1 f7       	brne	.-12     	; 0x1f84 <__unpack_f+0xd4>
    1f90:	70 64       	ori	r23, 0x40	; 64
    1f92:	14 96       	adiw	r26, 0x04	; 4
    1f94:	4d 93       	st	X+, r20
    1f96:	5d 93       	st	X+, r21
    1f98:	6d 93       	st	X+, r22
    1f9a:	7c 93       	st	X, r23
    1f9c:	17 97       	sbiw	r26, 0x07	; 7
    1f9e:	08 95       	ret

00001fa0 <__fpcmp_parts_f>:
    1fa0:	1f 93       	push	r17
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	fb 01       	movw	r30, r22
    1fa6:	9c 91       	ld	r25, X
    1fa8:	92 30       	cpi	r25, 0x02	; 2
    1faa:	08 f4       	brcc	.+2      	; 0x1fae <__fpcmp_parts_f+0xe>
    1fac:	47 c0       	rjmp	.+142    	; 0x203c <__fpcmp_parts_f+0x9c>
    1fae:	80 81       	ld	r24, Z
    1fb0:	82 30       	cpi	r24, 0x02	; 2
    1fb2:	08 f4       	brcc	.+2      	; 0x1fb6 <__fpcmp_parts_f+0x16>
    1fb4:	43 c0       	rjmp	.+134    	; 0x203c <__fpcmp_parts_f+0x9c>
    1fb6:	94 30       	cpi	r25, 0x04	; 4
    1fb8:	51 f4       	brne	.+20     	; 0x1fce <__fpcmp_parts_f+0x2e>
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	1c 91       	ld	r17, X
    1fbe:	84 30       	cpi	r24, 0x04	; 4
    1fc0:	99 f5       	brne	.+102    	; 0x2028 <__fpcmp_parts_f+0x88>
    1fc2:	81 81       	ldd	r24, Z+1	; 0x01
    1fc4:	68 2f       	mov	r22, r24
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	61 1b       	sub	r22, r17
    1fca:	71 09       	sbc	r23, r1
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <__fpcmp_parts_f+0xac>
    1fce:	84 30       	cpi	r24, 0x04	; 4
    1fd0:	21 f0       	breq	.+8      	; 0x1fda <__fpcmp_parts_f+0x3a>
    1fd2:	92 30       	cpi	r25, 0x02	; 2
    1fd4:	31 f4       	brne	.+12     	; 0x1fe2 <__fpcmp_parts_f+0x42>
    1fd6:	82 30       	cpi	r24, 0x02	; 2
    1fd8:	b9 f1       	breq	.+110    	; 0x2048 <__fpcmp_parts_f+0xa8>
    1fda:	81 81       	ldd	r24, Z+1	; 0x01
    1fdc:	88 23       	and	r24, r24
    1fde:	89 f1       	breq	.+98     	; 0x2042 <__fpcmp_parts_f+0xa2>
    1fe0:	2d c0       	rjmp	.+90     	; 0x203c <__fpcmp_parts_f+0x9c>
    1fe2:	11 96       	adiw	r26, 0x01	; 1
    1fe4:	1c 91       	ld	r17, X
    1fe6:	11 97       	sbiw	r26, 0x01	; 1
    1fe8:	82 30       	cpi	r24, 0x02	; 2
    1fea:	f1 f0       	breq	.+60     	; 0x2028 <__fpcmp_parts_f+0x88>
    1fec:	81 81       	ldd	r24, Z+1	; 0x01
    1fee:	18 17       	cp	r17, r24
    1ff0:	d9 f4       	brne	.+54     	; 0x2028 <__fpcmp_parts_f+0x88>
    1ff2:	12 96       	adiw	r26, 0x02	; 2
    1ff4:	2d 91       	ld	r18, X+
    1ff6:	3c 91       	ld	r19, X
    1ff8:	13 97       	sbiw	r26, 0x03	; 3
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	82 17       	cp	r24, r18
    2000:	93 07       	cpc	r25, r19
    2002:	94 f0       	brlt	.+36     	; 0x2028 <__fpcmp_parts_f+0x88>
    2004:	28 17       	cp	r18, r24
    2006:	39 07       	cpc	r19, r25
    2008:	bc f0       	brlt	.+46     	; 0x2038 <__fpcmp_parts_f+0x98>
    200a:	14 96       	adiw	r26, 0x04	; 4
    200c:	8d 91       	ld	r24, X+
    200e:	9d 91       	ld	r25, X+
    2010:	0d 90       	ld	r0, X+
    2012:	bc 91       	ld	r27, X
    2014:	a0 2d       	mov	r26, r0
    2016:	24 81       	ldd	r18, Z+4	; 0x04
    2018:	35 81       	ldd	r19, Z+5	; 0x05
    201a:	46 81       	ldd	r20, Z+6	; 0x06
    201c:	57 81       	ldd	r21, Z+7	; 0x07
    201e:	28 17       	cp	r18, r24
    2020:	39 07       	cpc	r19, r25
    2022:	4a 07       	cpc	r20, r26
    2024:	5b 07       	cpc	r21, r27
    2026:	18 f4       	brcc	.+6      	; 0x202e <__fpcmp_parts_f+0x8e>
    2028:	11 23       	and	r17, r17
    202a:	41 f0       	breq	.+16     	; 0x203c <__fpcmp_parts_f+0x9c>
    202c:	0a c0       	rjmp	.+20     	; 0x2042 <__fpcmp_parts_f+0xa2>
    202e:	82 17       	cp	r24, r18
    2030:	93 07       	cpc	r25, r19
    2032:	a4 07       	cpc	r26, r20
    2034:	b5 07       	cpc	r27, r21
    2036:	40 f4       	brcc	.+16     	; 0x2048 <__fpcmp_parts_f+0xa8>
    2038:	11 23       	and	r17, r17
    203a:	19 f0       	breq	.+6      	; 0x2042 <__fpcmp_parts_f+0xa2>
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	05 c0       	rjmp	.+10     	; 0x204c <__fpcmp_parts_f+0xac>
    2042:	6f ef       	ldi	r22, 0xFF	; 255
    2044:	7f ef       	ldi	r23, 0xFF	; 255
    2046:	02 c0       	rjmp	.+4      	; 0x204c <__fpcmp_parts_f+0xac>
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	cb 01       	movw	r24, r22
    204e:	1f 91       	pop	r17
    2050:	08 95       	ret

00002052 <__udivmodhi4>:
    2052:	aa 1b       	sub	r26, r26
    2054:	bb 1b       	sub	r27, r27
    2056:	51 e1       	ldi	r21, 0x11	; 17
    2058:	07 c0       	rjmp	.+14     	; 0x2068 <__udivmodhi4_ep>

0000205a <__udivmodhi4_loop>:
    205a:	aa 1f       	adc	r26, r26
    205c:	bb 1f       	adc	r27, r27
    205e:	a6 17       	cp	r26, r22
    2060:	b7 07       	cpc	r27, r23
    2062:	10 f0       	brcs	.+4      	; 0x2068 <__udivmodhi4_ep>
    2064:	a6 1b       	sub	r26, r22
    2066:	b7 0b       	sbc	r27, r23

00002068 <__udivmodhi4_ep>:
    2068:	88 1f       	adc	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	5a 95       	dec	r21
    206e:	a9 f7       	brne	.-22     	; 0x205a <__udivmodhi4_loop>
    2070:	80 95       	com	r24
    2072:	90 95       	com	r25
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	08 95       	ret

0000207a <__prologue_saves__>:
    207a:	2f 92       	push	r2
    207c:	3f 92       	push	r3
    207e:	4f 92       	push	r4
    2080:	5f 92       	push	r5
    2082:	6f 92       	push	r6
    2084:	7f 92       	push	r7
    2086:	8f 92       	push	r8
    2088:	9f 92       	push	r9
    208a:	af 92       	push	r10
    208c:	bf 92       	push	r11
    208e:	cf 92       	push	r12
    2090:	df 92       	push	r13
    2092:	ef 92       	push	r14
    2094:	ff 92       	push	r15
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	ca 1b       	sub	r28, r26
    20a4:	db 0b       	sbc	r29, r27
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	19 94       	eijmp

000020b2 <__epilogue_restores__>:
    20b2:	2a 88       	ldd	r2, Y+18	; 0x12
    20b4:	39 88       	ldd	r3, Y+17	; 0x11
    20b6:	48 88       	ldd	r4, Y+16	; 0x10
    20b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    20bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    20be:	8c 84       	ldd	r8, Y+12	; 0x0c
    20c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    20c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    20c4:	b9 84       	ldd	r11, Y+9	; 0x09
    20c6:	c8 84       	ldd	r12, Y+8	; 0x08
    20c8:	df 80       	ldd	r13, Y+7	; 0x07
    20ca:	ee 80       	ldd	r14, Y+6	; 0x06
    20cc:	fd 80       	ldd	r15, Y+5	; 0x05
    20ce:	0c 81       	ldd	r16, Y+4	; 0x04
    20d0:	1b 81       	ldd	r17, Y+3	; 0x03
    20d2:	aa 81       	ldd	r26, Y+2	; 0x02
    20d4:	b9 81       	ldd	r27, Y+1	; 0x01
    20d6:	ce 0f       	add	r28, r30
    20d8:	d1 1d       	adc	r29, r1
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	ed 01       	movw	r28, r26
    20e6:	08 95       	ret

000020e8 <_exit>:
    20e8:	f8 94       	cli

000020ea <__stop_program>:
    20ea:	ff cf       	rjmp	.-2      	; 0x20ea <__stop_program>
