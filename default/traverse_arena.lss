
traverse_arena.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800200  000022a2  00002336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080030a  0080030a  00002440  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000050e  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000321c  00000000  00000000  0000296e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000032d  00000000  00000000  00005b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025fc  00000000  00000000  00005eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f0  00000000  00000000  000084b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000559  00000000  00000000  000088a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001624  00000000  00000000  00008dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005d0  00000000  00000000  0000a421  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_5>
      18:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ea       	ldi	r30, 0xA2	; 162
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 30       	cpi	r26, 0x0A	; 10
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	aa e0       	ldi	r26, 0x0A	; 10
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 32       	cpi	r26, 0x25	; 37
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 85 0b 	call	0x170a	; 0x170a <main>
     122:	0c 94 4f 11 	jmp	0x229e	; 0x229e <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	fc 01       	movw	r30, r24
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	40 e3       	ldi	r20, 0x30	; 48
     13a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	38 e4       	ldi	r19, 0x48	; 72
     142:	f9 01       	movw	r30, r18
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	fc 01       	movw	r30, r24
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     154:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     156:	42 9a       	sbi	0x08, 2	; 8
     158:	f9 01       	movw	r30, r18
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15e:	42 98       	cbi	0x08, 2	; 8
     160:	fc 01       	movw	r30, r24
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	f9 01       	movw	r30, r18
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     174:	42 98       	cbi	0x08, 2	; 8
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     17a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     17c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     17e:	80 e2       	ldi	r24, 0x20	; 32
     180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     182:	42 9a       	sbi	0x08, 2	; 8
     184:	c9 01       	movw	r24, r18
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8

	
}
     18c:	08 95       	ret

0000018e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     194:	28 b1       	in	r18, 0x08	; 8
     196:	98 2f       	mov	r25, r24
     198:	90 7f       	andi	r25, 0xF0	; 240
     19a:	92 2b       	or	r25, r18
     19c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1a2:	42 9a       	sbi	0x08, 2	; 8
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	38 e4       	ldi	r19, 0x48	; 72
     1a8:	f9 01       	movw	r30, r18
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1ae:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1b6:	98 b1       	in	r25, 0x08	; 8
     1b8:	82 95       	swap	r24
     1ba:	80 7f       	andi	r24, 0xF0	; 240
     1bc:	98 2b       	or	r25, r24
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	c9 01       	movw	r24, r18
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1cc:	42 98       	cbi	0x08, 2	; 8
}
     1ce:	08 95       	ret

000001d0 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     1d0:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
     1d4:	86 e6       	ldi	r24, 0x66	; 102
     1d6:	9e e0       	ldi	r25, 0x0E	; 14
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x8>
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     1dc:	88 e2       	ldi	r24, 0x28	; 40
     1de:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x01);
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x06);
     1e8:	86 e0       	ldi	r24, 0x06	; 6
     1ea:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x0E);
     1ee:	8e e0       	ldi	r24, 0x0E	; 14
     1f0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x80);
     1f4:	80 e8       	ldi	r24, 0x80	; 128
     1f6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
		
}
     1fa:	08 95       	ret

000001fc <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     1fc:	98 b1       	in	r25, 0x08	; 8
     1fe:	9f 70       	andi	r25, 0x0F	; 15
     200:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     202:	28 b1       	in	r18, 0x08	; 8
     204:	98 2f       	mov	r25, r24
     206:	90 7f       	andi	r25, 0xF0	; 240
     208:	92 2b       	or	r25, r18
     20a:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     20c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     20e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     210:	42 9a       	sbi	0x08, 2	; 8
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	38 e4       	ldi	r19, 0x48	; 72
     216:	f9 01       	movw	r30, r18
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     21c:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     224:	98 b1       	in	r25, 0x08	; 8
     226:	82 95       	swap	r24
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	98 2b       	or	r25, r24
     22c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     22e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     230:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	c9 01       	movw	r24, r18
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     23a:	42 98       	cbi	0x08, 2	; 8
}
     23c:	08 95       	ret

0000023e <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     23e:	80 e8       	ldi	r24, 0x80	; 128
     240:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
}
     244:	08 95       	ret

00000246 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	ec 01       	movw	r28, r24
     24c:	03 c0       	rjmp	.+6      	; 0x254 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     24e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
		str++;
     252:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     254:	88 81       	ld	r24, Y
     256:	88 23       	and	r24, r24
     258:	d1 f7       	brne	.-12     	; 0x24e <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	69 f0       	breq	.+26     	; 0x27e <lcd_cursor+0x1e>
     264:	83 30       	cpi	r24, 0x03	; 3
     266:	18 f4       	brcc	.+6      	; 0x26e <lcd_cursor+0xe>
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	a9 f4       	brne	.+42     	; 0x296 <lcd_cursor+0x36>
     26c:	05 c0       	rjmp	.+10     	; 0x278 <lcd_cursor+0x18>
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	49 f0       	breq	.+18     	; 0x284 <lcd_cursor+0x24>
     272:	84 30       	cpi	r24, 0x04	; 4
     274:	81 f4       	brne	.+32     	; 0x296 <lcd_cursor+0x36>
     276:	0b c0       	rjmp	.+22     	; 0x28e <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     278:	86 2f       	mov	r24, r22
     27a:	81 58       	subi	r24, 0x81	; 129
     27c:	05 c0       	rjmp	.+10     	; 0x288 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     27e:	86 2f       	mov	r24, r22
     280:	81 54       	subi	r24, 0x41	; 65
     282:	02 c0       	rjmp	.+4      	; 0x288 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     284:	86 2f       	mov	r24, r22
     286:	8d 56       	subi	r24, 0x6D	; 109
     288:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     28c:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     28e:	86 2f       	mov	r24, r22
     290:	8d 52       	subi	r24, 0x2D	; 45
     292:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     296:	08 95       	ret

00000298 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	8a 01       	movw	r16, r20
     2a2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2a4:	88 23       	and	r24, r24
     2a6:	11 f0       	breq	.+4      	; 0x2ac <lcd_print+0x14>
     2a8:	66 23       	and	r22, r22
     2aa:	19 f4       	brne	.+6      	; 0x2b2 <lcd_print+0x1a>
	{
		lcd_home();
     2ac:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_home>
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2b2:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2b6:	c5 30       	cpi	r28, 0x05	; 5
     2b8:	d1 05       	cpc	r29, r1
     2ba:	71 f4       	brne	.+28     	; 0x2d8 <lcd_print+0x40>
	{
		million=value/10000+48;
     2bc:	c8 01       	movw	r24, r16
     2be:	60 e1       	ldi	r22, 0x10	; 16
     2c0:	77 e2       	ldi	r23, 0x27	; 39
     2c2:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
     2c6:	cb 01       	movw	r24, r22
     2c8:	c0 96       	adiw	r24, 0x30	; 48
     2ca:	90 93 19 03 	sts	0x0319, r25
     2ce:	80 93 18 03 	sts	0x0318, r24
		lcd_wr_char(million);
     2d2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     2d8:	c4 30       	cpi	r28, 0x04	; 4
     2da:	d1 05       	cpc	r29, r1
     2dc:	11 f0       	breq	.+4      	; 0x2e2 <lcd_print+0x4a>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	16 c0       	rjmp	.+44     	; 0x30e <lcd_print+0x76>
	{
		temp = value/1000;
     2e2:	c8 01       	movw	r24, r16
     2e4:	68 ee       	ldi	r22, 0xE8	; 232
     2e6:	73 e0       	ldi	r23, 0x03	; 3
     2e8:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
     2ec:	cb 01       	movw	r24, r22
     2ee:	60 93 1a 03 	sts	0x031A, r22
     2f2:	90 93 1b 03 	sts	0x031B, r25
		thousand = temp%10 + 48;
     2f6:	6a e0       	ldi	r22, 0x0A	; 10
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
     2fe:	c0 96       	adiw	r24, 0x30	; 48
     300:	90 93 24 03 	sts	0x0324, r25
     304:	80 93 23 03 	sts	0x0323, r24
		lcd_wr_char(thousand);
     308:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     30c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     30e:	c3 30       	cpi	r28, 0x03	; 3
     310:	d1 05       	cpc	r29, r1
     312:	21 f0       	breq	.+8      	; 0x31c <lcd_print+0x84>
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	11 f0       	breq	.+4      	; 0x31c <lcd_print+0x84>
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	16 c0       	rjmp	.+44     	; 0x348 <lcd_print+0xb0>
	{
		temp = value/100;
     31c:	c8 01       	movw	r24, r16
     31e:	64 e6       	ldi	r22, 0x64	; 100
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
     326:	cb 01       	movw	r24, r22
     328:	60 93 1a 03 	sts	0x031A, r22
     32c:	90 93 1b 03 	sts	0x031B, r25
		hundred = temp%10 + 48;
     330:	6a e0       	ldi	r22, 0x0A	; 10
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
     338:	c0 96       	adiw	r24, 0x30	; 48
     33a:	90 93 20 03 	sts	0x0320, r25
     33e:	80 93 1f 03 	sts	0x031F, r24
		lcd_wr_char(hundred);
     342:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     346:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     348:	c2 30       	cpi	r28, 0x02	; 2
     34a:	d1 05       	cpc	r29, r1
     34c:	21 f0       	breq	.+8      	; 0x356 <lcd_print+0xbe>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	11 f0       	breq	.+4      	; 0x356 <lcd_print+0xbe>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	16 c0       	rjmp	.+44     	; 0x382 <lcd_print+0xea>
	{
		temp = value/10;
     356:	c8 01       	movw	r24, r16
     358:	6a e0       	ldi	r22, 0x0A	; 10
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
     360:	cb 01       	movw	r24, r22
     362:	60 93 1a 03 	sts	0x031A, r22
     366:	90 93 1b 03 	sts	0x031B, r25
		tens = temp%10 + 48;
     36a:	6a e0       	ldi	r22, 0x0A	; 10
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
     372:	c0 96       	adiw	r24, 0x30	; 48
     374:	90 93 1e 03 	sts	0x031E, r25
     378:	80 93 1d 03 	sts	0x031D, r24
		lcd_wr_char(tens);
     37c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     380:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     382:	c1 30       	cpi	r28, 0x01	; 1
     384:	d1 05       	cpc	r29, r1
     386:	11 f0       	breq	.+4      	; 0x38c <lcd_print+0xf4>
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	61 f4       	brne	.+24     	; 0x3a4 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     38c:	c8 01       	movw	r24, r16
     38e:	6a e0       	ldi	r22, 0x0A	; 10
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
     396:	c0 96       	adiw	r24, 0x30	; 48
     398:	90 93 22 03 	sts	0x0322, r25
     39c:	80 93 21 03 	sts	0x0321, r24
		lcd_wr_char(unit);
     3a0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
	}
	if(digits>5)
     3a4:	26 97       	sbiw	r28, 0x06	; 6
     3a6:	1c f0       	brlt	.+6      	; 0x3ae <lcd_print+0x116>
	{
		lcd_wr_char('E');
     3a8:	85 e4       	ldi	r24, 0x45	; 69
     3aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
	}
	
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <USART_init>:

//XBee*********************************************

void USART_init(void)
{
    UBRR0 = BRC;
     3b8:	8f e5       	ldi	r24, 0x5F	; 95
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	90 93 c5 00 	sts	0x00C5, r25
     3c0:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C = ((0<<USBS0)|(1 << UCSZ01)|(1<<UCSZ00));
     3c4:	86 e0       	ldi	r24, 0x06	; 6
     3c6:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = ((1<<RXEN0)|(1<<TXEN0));
     3ca:	88 e1       	ldi	r24, 0x18	; 24
     3cc:	80 93 c1 00 	sts	0x00C1, r24
}
     3d0:	08 95       	ret

000003d2 <USART_send>:

void USART_send( unsigned char data)
{
     3d2:	98 2f       	mov	r25, r24
    //while the transmit buffer is not empty loop
    while(!(UCSR0A & (1<<UDRE0)));
     3d4:	80 91 c0 00 	lds	r24, 0x00C0
     3d8:	85 ff       	sbrs	r24, 5
     3da:	fc cf       	rjmp	.-8      	; 0x3d4 <USART_send+0x2>

    //when the buffer is empty write data to the transmitted
    UDR0 = data;
     3dc:	90 93 c6 00 	sts	0x00C6, r25
}
     3e0:	08 95       	ret

000003e2 <lcd_port_config>:
//*******************************xbee

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     3e2:	87 b1       	in	r24, 0x07	; 7
     3e4:	87 6f       	ori	r24, 0xF7	; 247
     3e6:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     3e8:	88 b1       	in	r24, 0x08	; 8
     3ea:	80 78       	andi	r24, 0x80	; 128
     3ec:	88 b9       	out	0x08, r24	; 8
}
     3ee:	08 95       	ret

000003f0 <buzzer_pin_config>:

//
//Function to initialize Buzzer
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;        //Setting PORTC 3 as output
     3f0:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;      //Setting PORTC 3 logic low to turnoff buzzer
     3f2:	43 98       	cbi	0x08, 3	; 8
}
     3f4:	08 95       	ret

000003f6 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     3f6:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     3f8:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     3fa:	88 b9       	out	0x08, r24	; 8
}
     3fc:	08 95       	ret

000003fe <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     3fe:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     400:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     402:	88 b9       	out	0x08, r24	; 8
}
     404:	08 95       	ret

00000406 <adc_pin_config>:
//

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00;
     406:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     408:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     40a:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     40e:	10 92 08 01 	sts	0x0108, r1
}
     412:	08 95       	ret

00000414 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     414:	81 b1       	in	r24, 0x01	; 1
     416:	8f 60       	ori	r24, 0x0F	; 15
     418:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     41a:	82 b1       	in	r24, 0x02	; 2
     41c:	80 7f       	andi	r24, 0xF0	; 240
     41e:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     420:	ea e0       	ldi	r30, 0x0A	; 10
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	80 81       	ld	r24, Z
     426:	88 61       	ori	r24, 0x18	; 24
     428:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     42a:	eb e0       	ldi	r30, 0x0B	; 11
     42c:	f1 e0       	ldi	r31, 0x01	; 1
     42e:	80 81       	ld	r24, Z
     430:	88 61       	ori	r24, 0x18	; 24
     432:	80 83       	st	Z, r24
}
     434:	08 95       	ret

00000436 <left_encoder_pin_config>:

//posenc
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     436:	6c 98       	cbi	0x0d, 4	; 13
    PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     438:	74 9a       	sbi	0x0e, 4	; 14
}
     43a:	08 95       	ret

0000043c <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     43c:	6d 98       	cbi	0x0d, 5	; 13
    PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     43e:	75 9a       	sbi	0x0e, 5	; 14
}
     440:	08 95       	ret

00000442 <port_init>:
//

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00;
     442:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     444:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     446:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     44a:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     44e:	81 b1       	in	r24, 0x01	; 1
     450:	8f 60       	ori	r24, 0x0F	; 15
     452:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     454:	82 b1       	in	r24, 0x02	; 2
     456:	80 7f       	andi	r24, 0xF0	; 240
     458:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     45a:	ea e0       	ldi	r30, 0x0A	; 10
     45c:	f1 e0       	ldi	r31, 0x01	; 1
     45e:	80 81       	ld	r24, Z
     460:	88 61       	ori	r24, 0x18	; 24
     462:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     464:	eb e0       	ldi	r30, 0x0B	; 11
     466:	f1 e0       	ldi	r31, 0x01	; 1
     468:	80 81       	ld	r24, Z
     46a:	88 61       	ori	r24, 0x18	; 24
     46c:	80 83       	st	Z, r24

//posenc
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     46e:	6c 98       	cbi	0x0d, 4	; 13
    PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     470:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     472:	6d 98       	cbi	0x0d, 5	; 13
    PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     474:	75 9a       	sbi	0x0e, 5	; 14

//
//Function to initialize Buzzer
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;        //Setting PORTC 3 as output
     476:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;      //Setting PORTC 3 logic low to turnoff buzzer
     478:	43 98       	cbi	0x08, 3	; 8
	adc_pin_config();
	motion_pin_config();
    left_encoder_pin_config(); //left encoder pin config
    right_encoder_pin_config(); //right encoder pin config
    buzzer_pin_config();
}
     47a:	08 95       	ret

0000047c <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    cli(); //Clears the global interrupt
     47c:	f8 94       	cli
    EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     47e:	ea e6       	ldi	r30, 0x6A	; 106
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	82 60       	ori	r24, 0x02	; 2
     486:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     488:	ec 9a       	sbi	0x1d, 4	; 29
    sei();   // Enables the global interrupt
     48a:	78 94       	sei
}
     48c:	08 95       	ret

0000048e <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    cli(); //Clears the global interrupt
     48e:	f8 94       	cli
    EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     490:	ea e6       	ldi	r30, 0x6A	; 106
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	88 60       	ori	r24, 0x08	; 8
     498:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     49a:	ed 9a       	sbi	0x1d, 5	; 29
    sei();   // Enables the global interrupt
     49c:	78 94       	sei
}
     49e:	08 95       	ret

000004a0 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     4a0:	1f 92       	push	r1
     4a2:	0f 92       	push	r0
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	0f 92       	push	r0
     4a8:	11 24       	eor	r1, r1
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	af 93       	push	r26
     4b0:	bf 93       	push	r27
    ShaftCountRight++;  //increment right shaft position count
     4b2:	80 91 12 03 	lds	r24, 0x0312
     4b6:	90 91 13 03 	lds	r25, 0x0313
     4ba:	a0 91 14 03 	lds	r26, 0x0314
     4be:	b0 91 15 03 	lds	r27, 0x0315
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	a1 1d       	adc	r26, r1
     4c6:	b1 1d       	adc	r27, r1
     4c8:	80 93 12 03 	sts	0x0312, r24
     4cc:	90 93 13 03 	sts	0x0313, r25
     4d0:	a0 93 14 03 	sts	0x0314, r26
     4d4:	b0 93 15 03 	sts	0x0315, r27
}
     4d8:	bf 91       	pop	r27
     4da:	af 91       	pop	r26
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	0f 90       	pop	r0
     4e6:	1f 90       	pop	r1
     4e8:	18 95       	reti

000004ea <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     4ea:	1f 92       	push	r1
     4ec:	0f 92       	push	r0
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	0f 92       	push	r0
     4f2:	11 24       	eor	r1, r1
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
    ShaftCountLeft++;  //increment left shaft position count
     4fc:	80 91 0e 03 	lds	r24, 0x030E
     500:	90 91 0f 03 	lds	r25, 0x030F
     504:	a0 91 10 03 	lds	r26, 0x0310
     508:	b0 91 11 03 	lds	r27, 0x0311
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	a1 1d       	adc	r26, r1
     510:	b1 1d       	adc	r27, r1
     512:	80 93 0e 03 	sts	0x030E, r24
     516:	90 93 0f 03 	sts	0x030F, r25
     51a:	a0 93 10 03 	sts	0x0310, r26
     51e:	b0 93 11 03 	sts	0x0311, r27
}
     522:	bf 91       	pop	r27
     524:	af 91       	pop	r26
     526:	9f 91       	pop	r25
     528:	8f 91       	pop	r24
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <drop>:
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     534:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     536:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     538:	88 b9       	out	0x08, r24	; 8
     53a:	88 e8       	ldi	r24, 0x88	; 136
     53c:	93 e1       	ldi	r25, 0x13	; 19
     53e:	20 e7       	ldi	r18, 0x70	; 112
     540:	31 e0       	ldi	r19, 0x01	; 1
     542:	f9 01       	movw	r30, r18
     544:	31 97       	sbiw	r30, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <drop+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     548:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     54a:	d9 f7       	brne	.-10     	; 0x542 <drop+0xe>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     54c:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     54e:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     550:	88 b9       	out	0x08, r24	; 8
     552:	88 e8       	ldi	r24, 0x88	; 136
     554:	93 e1       	ldi	r25, 0x13	; 19
     556:	20 e7       	ldi	r18, 0x70	; 112
     558:	31 e0       	ldi	r19, 0x01	; 1
     55a:	f9 01       	movw	r30, r18
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <drop+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     560:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     562:	d9 f7       	brne	.-10     	; 0x55a <drop+0x26>
void drop() {
    buzzer_on();
    _delay_ms(500);
    buzzer_off();
    _delay_ms(500);
}
     564:	08 95       	ret

00000566 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     566:	e1 e2       	ldi	r30, 0x21	; 33
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     56c:	9f ef       	ldi	r25, 0xFF	; 255
     56e:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     578:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     57c:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     580:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     584:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     588:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     58c:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     590:	89 ea       	ldi	r24, 0xA9	; 169
     592:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     596:	8b e0       	ldi	r24, 0x0B	; 11
     598:	80 83       	st	Z, r24
}
     59a:	08 95       	ret

0000059c <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     59c:	ea e7       	ldi	r30, 0x7A	; 122
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     5a2:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     5a6:	80 e2       	ldi	r24, 0x20	; 32
     5a8:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     5ac:	80 e8       	ldi	r24, 0x80	; 128
     5ae:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     5b0:	86 e8       	ldi	r24, 0x86	; 134
     5b2:	80 83       	st	Z, r24
}
     5b4:	08 95       	ret

000005b6 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
     5b6:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     5b8:	88 30       	cpi	r24, 0x08	; 8
     5ba:	18 f0       	brcs	.+6      	; 0x5c2 <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     5bc:	88 e0       	ldi	r24, 0x08	; 8
     5be:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;
	ADMUX= 0x20| Ch;
     5c2:	97 70       	andi	r25, 0x07	; 7
     5c4:	90 62       	ori	r25, 0x20	; 32
     5c6:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     5ca:	80 91 7a 00 	lds	r24, 0x007A
     5ce:	80 64       	ori	r24, 0x40	; 64
     5d0:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     5d4:	80 91 7a 00 	lds	r24, 0x007A
     5d8:	84 ff       	sbrs	r24, 4
     5da:	fc cf       	rjmp	.-8      	; 0x5d4 <ADC_Conversion+0x1e>
	a=ADCH;
     5dc:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     5e0:	90 91 7a 00 	lds	r25, 0x007A
     5e4:	90 61       	ori	r25, 0x10	; 16
     5e6:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     5ea:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     5ee:	08 95       	ret

000005f0 <velocity>:
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     5f0:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     5f4:	60 93 2a 01 	sts	0x012A, r22
}
     5f8:	08 95       	ret

000005fa <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	18 2f       	mov	r17, r24
     600:	06 2f       	mov	r16, r22
     602:	84 2f       	mov	r24, r20

    ADC_Value = ADC_Conversion(channel);
     604:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     608:	48 2f       	mov	r20, r24
     60a:	80 93 1c 03 	sts	0x031C, r24
    lcd_print(row, coloumn, ADC_Value, 3);
     60e:	81 2f       	mov	r24, r17
     610:	60 2f       	mov	r22, r16
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	23 e0       	ldi	r18, 0x03	; 3
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_print>
}
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	08 95       	ret

00000622 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     622:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     624:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     626:	8f 70       	andi	r24, 0x0F	; 15
     628:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     62a:	82 b9       	out	0x02, r24	; 2
}
     62c:	08 95       	ret

0000062e <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     62e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     630:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     632:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     634:	82 b9       	out	0x02, r24	; 2
}

void forward (void)
{
  motion_set (0x06);
}
     636:	08 95       	ret

00000638 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     638:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     63a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     63c:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     63e:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     640:	08 95       	ret

00000642 <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     642:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     644:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     646:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     648:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     64a:	08 95       	ret

0000064c <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     64c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     64e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     650:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     652:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    motion_set(0x04);
}
     654:	08 95       	ret

00000656 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     656:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     658:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     65a:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     65c:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    motion_set(0x02);
}
     65e:	08 95       	ret

00000660 <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     660:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     662:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     664:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     666:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    motion_set(0x01);
}
     668:	08 95       	ret

0000066a <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     66a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     66c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     66e:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     670:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    motion_set(0x08);
}
     672:	08 95       	ret

00000674 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     674:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     676:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     678:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
    motion_set(0x00);
}
     67a:	08 95       	ret

0000067c <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     67c:	ef 92       	push	r14
     67e:	ff 92       	push	r15
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
    float ReqdShaftCount = 0;
    unsigned long int ReqdShaftCountInt = 0;

    ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     684:	a0 e0       	ldi	r26, 0x00	; 0
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	bc 01       	movw	r22, r24
     68a:	cd 01       	movw	r24, r26
     68c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__floatunsisf>
     690:	28 e4       	ldi	r18, 0x48	; 72
     692:	31 ee       	ldi	r19, 0xE1	; 225
     694:	42 e8       	ldi	r20, 0x82	; 130
     696:	50 e4       	ldi	r21, 0x40	; 64
     698:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__divsf3>
     69c:	0e 94 90 0b 	call	0x1720	; 0x1720 <__fixunssfsi>
     6a0:	7b 01       	movw	r14, r22
     6a2:	00 e0       	ldi	r16, 0x00	; 0
     6a4:	10 e0       	ldi	r17, 0x00	; 0
    ShaftCountRight = 0;
     6a6:	10 92 12 03 	sts	0x0312, r1
     6aa:	10 92 13 03 	sts	0x0313, r1
     6ae:	10 92 14 03 	sts	0x0314, r1
     6b2:	10 92 15 03 	sts	0x0315, r1
    ShaftCountLeft = 0;
     6b6:	10 92 0e 03 	sts	0x030E, r1
     6ba:	10 92 0f 03 	sts	0x030F, r1
     6be:	10 92 10 03 	sts	0x0310, r1
     6c2:	10 92 11 03 	sts	0x0311, r1

    while (1)
    {
        if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     6c6:	80 91 12 03 	lds	r24, 0x0312
     6ca:	90 91 13 03 	lds	r25, 0x0313
     6ce:	a0 91 14 03 	lds	r26, 0x0314
     6d2:	b0 91 15 03 	lds	r27, 0x0315
     6d6:	20 91 0e 03 	lds	r18, 0x030E
     6da:	30 91 0f 03 	lds	r19, 0x030F
     6de:	40 91 10 03 	lds	r20, 0x0310
     6e2:	50 91 11 03 	lds	r21, 0x0311
     6e6:	8e 15       	cp	r24, r14
     6e8:	9f 05       	cpc	r25, r15
     6ea:	a0 07       	cpc	r26, r16
     6ec:	b1 07       	cpc	r27, r17
     6ee:	28 f4       	brcc	.+10     	; 0x6fa <angle_rotate+0x7e>
     6f0:	2e 15       	cp	r18, r14
     6f2:	3f 05       	cpc	r19, r15
     6f4:	40 07       	cpc	r20, r16
     6f6:	51 07       	cpc	r21, r17
     6f8:	30 f3       	brcs	.-52     	; 0x6c6 <angle_rotate+0x4a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6fa:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6fc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     6fe:	82 b9       	out	0x02, r24	; 2
    {
        if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
        break;
    }
    stop(); //Stop robot
}
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	08 95       	ret

0000070a <linear_distance_mm>:
{
    float ReqdShaftCount = 0;
    unsigned long int ReqdShaftCountInt = 0;

    ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     70a:	a0 e0       	ldi	r26, 0x00	; 0
     70c:	b0 e0       	ldi	r27, 0x00	; 0
     70e:	bc 01       	movw	r22, r24
     710:	cd 01       	movw	r24, r26
     712:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__floatunsisf>
     716:	25 ee       	ldi	r18, 0xE5	; 229
     718:	30 ed       	ldi	r19, 0xD0	; 208
     71a:	4a ea       	ldi	r20, 0xAA	; 170
     71c:	50 e4       	ldi	r21, 0x40	; 64
     71e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__divsf3>
     722:	0e 94 90 0b 	call	0x1720	; 0x1720 <__fixunssfsi>
     726:	9b 01       	movw	r18, r22
     728:	ac 01       	movw	r20, r24

    ShaftCountRight = 0;
     72a:	10 92 12 03 	sts	0x0312, r1
     72e:	10 92 13 03 	sts	0x0313, r1
     732:	10 92 14 03 	sts	0x0314, r1
     736:	10 92 15 03 	sts	0x0315, r1
    while(1)
    {
        if(ShaftCountRight > ReqdShaftCountInt)
     73a:	80 91 12 03 	lds	r24, 0x0312
     73e:	90 91 13 03 	lds	r25, 0x0313
     742:	a0 91 14 03 	lds	r26, 0x0314
     746:	b0 91 15 03 	lds	r27, 0x0315
     74a:	28 17       	cp	r18, r24
     74c:	39 07       	cpc	r19, r25
     74e:	4a 07       	cpc	r20, r26
     750:	5b 07       	cpc	r21, r27
     752:	98 f7       	brcc	.-26     	; 0x73a <linear_distance_mm+0x30>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     754:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     756:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     758:	82 b9       	out	0x02, r24	; 2
        {
            break;
        }
    }
    stop(); //Stop robot
}
     75a:	08 95       	ret

0000075c <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     75c:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     75e:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     760:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     762:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
    forward();
    linear_distance_mm(DistanceInMM);
     764:	0e 94 85 03 	call	0x70a	; 0x70a <linear_distance_mm>
}
     768:	08 95       	ret

0000076a <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     76a:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     76c:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     76e:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     770:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees)
{
    // 88 pulses for 360 degrees rotation 4.090 degrees per count
    left(); //Turn left
    angle_rotate(Degrees);
     772:	0e 94 3e 03 	call	0x67c	; 0x67c <angle_rotate>
}
     776:	08 95       	ret

00000778 <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     778:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     77a:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     77c:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     77e:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
    // 88 pulses for 360 degrees rotation 4.090 degrees per count
    right(); //Turn right
    angle_rotate(Degrees);
     780:	0e 94 3e 03 	call	0x67c	; 0x67c <angle_rotate>
}
     784:	08 95       	ret

00000786 <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     786:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     788:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     78a:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     78c:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_left(); //Turn soft left
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	0e 94 3e 03 	call	0x67c	; 0x67c <angle_rotate>
}
     796:	08 95       	ret

00000798 <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     798:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     79a:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     79c:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     79e:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_right();  //Turn soft right
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	0e 94 3e 03 	call	0x67c	; 0x67c <angle_rotate>
}
     7a8:	08 95       	ret

000007aa <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7aa:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7ac:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7ae:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     7b0:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_left_2(); //Turn reverse soft left
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	0e 94 3e 03 	call	0x67c	; 0x67c <angle_rotate>
}
     7ba:	08 95       	ret

000007bc <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7bc:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7be:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7c0:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     7c2:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_right_2();  //Turn reverse soft right
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	0e 94 3e 03 	call	0x67c	; 0x67c <angle_rotate>
}
     7cc:	08 95       	ret

000007ce <line_follow>:

void line_follow() {
        Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     7d4:	80 93 0b 03 	sts	0x030B, r24
        Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     7de:	80 93 0c 03 	sts	0x030C, r24
        Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     7e8:	80 93 0d 03 	sts	0x030D, r24

       // flag=0;

        print_sensor(1,1,3);    //Prints value of White Line Sensor1
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	43 e0       	ldi	r20, 0x03	; 3
     7f2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <print_sensor>
        print_sensor(1,5,2);    //Prints Value of White Line Sensor2
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	65 e0       	ldi	r22, 0x05	; 5
     7fa:	42 e0       	ldi	r20, 0x02	; 2
     7fc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <print_sensor>
        print_sensor(1,9,1);    //Prints Value of White Line Sensor3
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	69 e0       	ldi	r22, 0x09	; 9
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	0e 94 fd 02 	call	0x5fa	; 0x5fa <print_sensor>



        if(Center_white_line>=thr)
     80a:	30 91 0c 03 	lds	r19, 0x030C
     80e:	90 91 00 02 	lds	r25, 0x0200
     812:	39 17       	cp	r19, r25
     814:	60 f0       	brcs	.+24     	; 0x82e <line_follow+0x60>
        {
            flag=1;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     81c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     81e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     820:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     822:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     824:	8a ef       	ldi	r24, 0xFA	; 250
     826:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     82a:	80 93 2a 01 	sts	0x012A, r24
            flag=1;
            forward();
            velocity(250,250);
        }

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
     82e:	20 91 0b 03 	lds	r18, 0x030B
     832:	29 17       	cp	r18, r25
     834:	98 f4       	brcc	.+38     	; 0x85c <line_follow+0x8e>
     836:	80 91 0d 03 	lds	r24, 0x030D
     83a:	89 17       	cp	r24, r25
     83c:	78 f0       	brcs	.+30     	; 0x85c <line_follow+0x8e>
     83e:	39 17       	cp	r19, r25
     840:	68 f4       	brcc	.+26     	; 0x85c <line_follow+0x8e>
        {
            flag=1;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     848:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     84a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     84c:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     84e:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     850:	86 e9       	ldi	r24, 0x96	; 150
     852:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     856:	88 e7       	ldi	r24, 0x78	; 120
     858:	80 93 2a 01 	sts	0x012A, r24
            flag=1;
            forward();
            velocity(150,120);
        }

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
     85c:	80 91 0d 03 	lds	r24, 0x030D
     860:	89 17       	cp	r24, r25
     862:	90 f4       	brcc	.+36     	; 0x888 <line_follow+0xba>
     864:	29 17       	cp	r18, r25
     866:	80 f0       	brcs	.+32     	; 0x888 <line_follow+0xba>
     868:	39 17       	cp	r19, r25
     86a:	a8 f5       	brcc	.+106    	; 0x8d6 <line_follow+0x108>
        {
            flag=1;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     872:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     874:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     876:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     878:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     87a:	88 e7       	ldi	r24, 0x78	; 120
     87c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     880:	86 e9       	ldi	r24, 0x96	; 150
     882:	80 93 2a 01 	sts	0x012A, r24
     886:	08 95       	ret
            flag=1;
            forward();
            velocity(120,150);
        }

        if(Center_white_line<thr && Left_white_line<thr && Right_white_line<thr)
     888:	39 17       	cp	r19, r25
     88a:	28 f5       	brcc	.+74     	; 0x8d6 <line_follow+0x108>
     88c:	29 17       	cp	r18, r25
     88e:	18 f5       	brcc	.+70     	; 0x8d6 <line_follow+0x108>
     890:	89 17       	cp	r24, r25
     892:	08 f5       	brcc	.+66     	; 0x8d6 <line_follow+0x108>
        {
            //forward();
            if(flag<3){
     894:	90 91 0a 03 	lds	r25, 0x030A
     898:	93 30       	cpi	r25, 0x03	; 3
     89a:	40 f0       	brcs	.+16     	; 0x8ac <line_follow+0xde>
            right();
            velocity(100,100);
            flag++;
            }
            else if(flag<12){
     89c:	9c 30       	cpi	r25, 0x0C	; 12
     89e:	20 f4       	brcc	.+8      	; 0x8a8 <line_follow+0xda>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     8a0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     8a2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     8a4:	85 60       	ori	r24, 0x05	; 5
     8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <line_follow+0xe4>
            else if(flag<12){
            left();
            velocity(100,100);
            flag++;
            }
            else if(flag<15) {
     8a8:	9f 30       	cpi	r25, 0x0F	; 15
     8aa:	68 f4       	brcc	.+26     	; 0x8c6 <line_follow+0xf8>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     8ac:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     8ae:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     8b0:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     8b2:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8b4:	84 e6       	ldi	r24, 0x64	; 100
     8b6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     8ba:	80 93 2a 01 	sts	0x012A, r24
            flag++;
            }
            else if(flag<15) {
            right();
            velocity(100,100);
            flag++;
     8be:	9f 5f       	subi	r25, 0xFF	; 255
     8c0:	90 93 0a 03 	sts	0x030A, r25
     8c4:	08 95       	ret
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     8c6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     8c8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     8ca:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     8cc:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8ce:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
     8d2:	10 92 2a 01 	sts	0x012A, r1
     8d6:	08 95       	ret

000008d8 <line_follow_1>:
            velocity(0,0);
            }
        }
}

void line_follow_1(unsigned char wheel_speed) {
     8d8:	1f 93       	push	r17
     8da:	18 2f       	mov	r17, r24
        Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     8e2:	80 93 0b 03 	sts	0x030B, r24
        Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     8ec:	80 93 0c 03 	sts	0x030C, r24
        Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     8f6:	80 93 0d 03 	sts	0x030D, r24

       // flag=0;

        print_sensor(1,1,3);    //Prints value of White Line Sensor1
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	43 e0       	ldi	r20, 0x03	; 3
     900:	0e 94 fd 02 	call	0x5fa	; 0x5fa <print_sensor>
        print_sensor(1,5,2);    //Prints Value of White Line Sensor2
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	65 e0       	ldi	r22, 0x05	; 5
     908:	42 e0       	ldi	r20, 0x02	; 2
     90a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <print_sensor>
        print_sensor(1,9,1);    //Prints Value of White Line Sensor3
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	69 e0       	ldi	r22, 0x09	; 9
     912:	41 e0       	ldi	r20, 0x01	; 1
     914:	0e 94 fd 02 	call	0x5fa	; 0x5fa <print_sensor>



        if(Center_white_line>=thr)
     918:	30 91 0c 03 	lds	r19, 0x030C
     91c:	90 91 00 02 	lds	r25, 0x0200
     920:	39 17       	cp	r19, r25
     922:	58 f0       	brcs	.+22     	; 0x93a <line_follow_1+0x62>
        {
            flag=1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     92a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     92c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     92e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     930:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     932:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
     936:	10 93 2a 01 	sts	0x012A, r17
            flag=1;
            forward();
            velocity(wheel_speed,wheel_speed);
        }

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
     93a:	20 91 0b 03 	lds	r18, 0x030B
     93e:	29 17       	cp	r18, r25
     940:	98 f4       	brcc	.+38     	; 0x968 <line_follow_1+0x90>
     942:	80 91 0d 03 	lds	r24, 0x030D
     946:	89 17       	cp	r24, r25
     948:	78 f0       	brcs	.+30     	; 0x968 <line_follow_1+0x90>
     94a:	39 17       	cp	r19, r25
     94c:	68 f4       	brcc	.+26     	; 0x968 <line_follow_1+0x90>
        {
            flag=1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     954:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     956:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     958:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     95a:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     95c:	10 93 28 01 	sts	0x0128, r17

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
        {
            flag=1;
            forward();
            velocity(wheel_speed,wheel_speed-30);
     960:	1e 51       	subi	r17, 0x1E	; 30
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
     962:	10 93 2a 01 	sts	0x012A, r17
     966:	12 5e       	subi	r17, 0xE2	; 226
            flag=1;
            forward();
            velocity(wheel_speed,wheel_speed-30);
        }

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
     968:	80 91 0d 03 	lds	r24, 0x030D
     96c:	89 17       	cp	r24, r25
     96e:	90 f4       	brcc	.+36     	; 0x994 <line_follow_1+0xbc>
     970:	29 17       	cp	r18, r25
     972:	80 f0       	brcs	.+32     	; 0x994 <line_follow_1+0xbc>
     974:	39 17       	cp	r19, r25
     976:	a8 f5       	brcc	.+106    	; 0x9e2 <line_follow_1+0x10a>
        {
            flag=1;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     97e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     980:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     982:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     984:	82 b9       	out	0x02, r24	; 2

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
        {
            flag=1;
            forward();
            velocity(wheel_speed-30,wheel_speed);
     986:	1e 51       	subi	r17, 0x1E	; 30
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     988:	10 93 28 01 	sts	0x0128, r17
     98c:	12 5e       	subi	r17, 0xE2	; 226
	OCR5BL = (unsigned char)right_motor;
     98e:	10 93 2a 01 	sts	0x012A, r17
     992:	27 c0       	rjmp	.+78     	; 0x9e2 <line_follow_1+0x10a>
            flag=1;
            forward();
            velocity(wheel_speed-30,wheel_speed);
        }

        if(Center_white_line<thr && Left_white_line<thr && Right_white_line<thr)
     994:	39 17       	cp	r19, r25
     996:	28 f5       	brcc	.+74     	; 0x9e2 <line_follow_1+0x10a>
     998:	29 17       	cp	r18, r25
     99a:	18 f5       	brcc	.+70     	; 0x9e2 <line_follow_1+0x10a>
     99c:	89 17       	cp	r24, r25
     99e:	08 f5       	brcc	.+66     	; 0x9e2 <line_follow_1+0x10a>
        {
            //forward();
            if(flag<3){
     9a0:	90 91 0a 03 	lds	r25, 0x030A
     9a4:	93 30       	cpi	r25, 0x03	; 3
     9a6:	40 f0       	brcs	.+16     	; 0x9b8 <line_follow_1+0xe0>
            right();
            velocity(80,80);
            flag++;
            }
            else if(flag<12){
     9a8:	9c 30       	cpi	r25, 0x0C	; 12
     9aa:	20 f4       	brcc	.+8      	; 0x9b4 <line_follow_1+0xdc>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9ac:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ae:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9b0:	85 60       	ori	r24, 0x05	; 5
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <line_follow_1+0xe6>
            else if(flag<12){
            left();
            velocity(80,80);
            flag++;
            }
            else if(flag<15) {
     9b4:	9f 30       	cpi	r25, 0x0F	; 15
     9b6:	68 f4       	brcc	.+26     	; 0x9d2 <line_follow_1+0xfa>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9b8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ba:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9bc:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     9be:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9c0:	80 e5       	ldi	r24, 0x50	; 80
     9c2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     9c6:	80 93 2a 01 	sts	0x012A, r24
            flag++;
            }
            else if(flag<15) {
            right();
            velocity(80,80);
            flag++;
     9ca:	9f 5f       	subi	r25, 0xFF	; 255
     9cc:	90 93 0a 03 	sts	0x030A, r25
     9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <line_follow_1+0x10a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9d2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9d4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9d6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9d8:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9da:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
     9de:	10 92 2a 01 	sts	0x012A, r1
            else{
            forward();
            velocity(0,0);
            }
        }
}
     9e2:	1f 91       	pop	r17
     9e4:	08 95       	ret

000009e6 <servo1_pin_config>:


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     9e6:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     9e8:	2d 9a       	sbi	0x05, 5	; 5
}
     9ea:	08 95       	ret

000009ec <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     9ec:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     9ee:	2e 9a       	sbi	0x05, 6	; 5
}
     9f0:	08 95       	ret

000009f2 <port_init1>:


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     9f2:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     9f4:	2d 9a       	sbi	0x05, 5	; 5
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     9f6:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     9f8:	2e 9a       	sbi	0x05, 6	; 5
//Initialize the ports
void port_init1(void)
{
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
}
     9fa:	08 95       	ret

000009fc <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     9fc:	e1 e8       	ldi	r30, 0x81	; 129
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     a02:	8c ef       	ldi	r24, 0xFC	; 252
     a04:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     a1a:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     a1e:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     a22:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     a26:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;
     a2a:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     a2e:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     a32:	8b ea       	ldi	r24, 0xAB	; 171
     a34:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     a38:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     a3c:	8c e0       	ldi	r24, 0x0C	; 12
     a3e:	80 83       	st	Z, r24
}
     a40:	08 95       	ret

00000a42 <init_devices>:
    }
}

void init_devices (void)
{
 	cli(); //Clears the global interrupts
     a42:	f8 94       	cli
	port_init();
     a44:	0e 94 21 02 	call	0x442	; 0x442 <port_init>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
     a48:	ea e7       	ldi	r30, 0x7A	; 122
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     a4e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     a52:	80 e2       	ldi	r24, 0x20	; 32
     a54:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     a58:	80 e8       	ldi	r24, 0x80	; 128
     a5a:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     a5c:	86 e8       	ldi	r24, 0x86	; 134
     a5e:	80 83       	st	Z, r24
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     a60:	e1 e2       	ldi	r30, 0x21	; 33
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     a66:	9f ef       	ldi	r25, 0xFF	; 255
     a68:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     a72:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     a76:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     a7a:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     a7e:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     a82:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     a86:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     a8a:	89 ea       	ldi	r24, 0xA9	; 169
     a8c:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     a90:	8b e0       	ldi	r24, 0x0B	; 11
     a92:	80 83       	st	Z, r24
}


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    cli(); //Clears the global interrupt
     a94:	f8 94       	cli
    EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     a96:	ea e6       	ldi	r30, 0x6A	; 106
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	82 60       	ori	r24, 0x02	; 2
     a9e:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     aa0:	ec 9a       	sbi	0x1d, 4	; 29
    sei();   // Enables the global interrupt
     aa2:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    cli(); //Clears the global interrupt
     aa4:	f8 94       	cli
    EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     aa6:	ea e6       	ldi	r30, 0x6A	; 106
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	88 60       	ori	r24, 0x08	; 8
     aae:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     ab0:	ed 9a       	sbi	0x1d, 5	; 29
    sei();   // Enables the global interrupt
     ab2:	78 94       	sei


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     ab4:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     ab6:	2d 9a       	sbi	0x05, 5	; 5
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     ab8:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     aba:	2e 9a       	sbi	0x05, 6	; 5
	adc_init();
	timer5_init();
    left_position_encoder_interrupt_init();
    right_position_encoder_interrupt_init();
	port_init1();
    timer1_init();
     abc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timer1_init>

//XBee*********************************************

void USART_init(void)
{
    UBRR0 = BRC;
     ac0:	8f e5       	ldi	r24, 0x5F	; 95
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	90 93 c5 00 	sts	0x00C5, r25
     ac8:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C = ((0<<USBS0)|(1 << UCSZ01)|(1<<UCSZ00));
     acc:	86 e0       	ldi	r24, 0x06	; 6
     ace:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = ((1<<RXEN0)|(1<<TXEN0));
     ad2:	88 e1       	ldi	r24, 0x18	; 24
     ad4:	80 93 c1 00 	sts	0x00C1, r24
    left_position_encoder_interrupt_init();
    right_position_encoder_interrupt_init();
	port_init1();
    timer1_init();
    USART_init();
	sei();   //Enables the global interrupts
     ad8:	78 94       	sei
}
     ada:	08 95       	ret

00000adc <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     adc:	10 92 89 00 	sts	0x0089, r1
 OCR1AL = (unsigned char) PositionPanServo;
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	bc 01       	movw	r22, r24
     ae8:	cd 01       	movw	r24, r26
     aea:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__floatunsisf>
     aee:	2b e7       	ldi	r18, 0x7B	; 123
     af0:	34 e1       	ldi	r19, 0x14	; 20
     af2:	4e ee       	ldi	r20, 0xEE	; 238
     af4:	5f e3       	ldi	r21, 0x3F	; 63
     af6:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__divsf3>
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	4c e0       	ldi	r20, 0x0C	; 12
     b00:	52 e4       	ldi	r21, 0x42	; 66
     b02:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__addsf3>
     b06:	0e 94 90 0b 	call	0x1720	; 0x1720 <__fixunssfsi>
     b0a:	60 93 88 00 	sts	0x0088, r22
}
     b0e:	08 95       	ret

00000b10 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     b10:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	a0 e0       	ldi	r26, 0x00	; 0
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	bc 01       	movw	r22, r24
     b1c:	cd 01       	movw	r24, r26
     b1e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__floatunsisf>
     b22:	2b e7       	ldi	r18, 0x7B	; 123
     b24:	34 e1       	ldi	r19, 0x14	; 20
     b26:	4e ee       	ldi	r20, 0xEE	; 238
     b28:	5f e3       	ldi	r21, 0x3F	; 63
     b2a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__divsf3>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	4c e0       	ldi	r20, 0x0C	; 12
     b34:	52 e4       	ldi	r21, 0x42	; 66
     b36:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__addsf3>
     b3a:	0e 94 90 0b 	call	0x1720	; 0x1720 <__fixunssfsi>
     b3e:	60 93 8a 00 	sts	0x008A, r22
}
     b42:	08 95       	ret

00000b44 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03;
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	80 93 88 00 	sts	0x0088, r24
}
     b50:	08 95       	ret

00000b52 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	80 93 8a 00 	sts	0x008A, r24
}
     b5e:	08 95       	ret

00000b60 <pickup_1>:

    temp_fn();
	//traverse(1);
}

void pickup_1() {
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b66:	8a ef       	ldi	r24, 0xFA	; 250
     b68:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     b6c:	80 93 2a 01 	sts	0x012A, r24
	//traverse(1);
}

void pickup_1() {
	velocity(250,250);
    left_degrees(90);
     b70:	8a e5       	ldi	r24, 0x5A	; 90
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 b5 03 	call	0x76a	; 0x76a <left_degrees>
     b78:	88 ee       	ldi	r24, 0xE8	; 232
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	20 e7       	ldi	r18, 0x70	; 112
     b7e:	31 e0       	ldi	r19, 0x01	; 1
     b80:	f9 01       	movw	r30, r18
     b82:	31 97       	sbiw	r30, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <pickup_1+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b88:	d9 f7       	brne	.-10     	; 0xb80 <pickup_1+0x20>
    _delay_ms(100);

    //ServoCode

 unsigned char i = 0;
 init_devices();
     b8a:	0e 94 21 05 	call	0xa42	; 0xa42 <init_devices>
     b8e:	10 e0       	ldi	r17, 0x00	; 0
     b90:	c0 e7       	ldi	r28, 0x70	; 112
     b92:	d1 e0       	ldi	r29, 0x01	; 1

 for (i = 0; i <90; i++)
 {
  servo_1(i);
     b94:	81 2f       	mov	r24, r17
     b96:	0e 94 6e 05 	call	0xadc	; 0xadc <servo_1>
     b9a:	8c e2       	ldi	r24, 0x2C	; 44
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	fe 01       	movw	r30, r28
     ba0:	31 97       	sbiw	r30, 0x01	; 1
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <pickup_1+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba6:	d9 f7       	brne	.-10     	; 0xb9e <pickup_1+0x3e>
    //ServoCode

 unsigned char i = 0;
 init_devices();

 for (i = 0; i <90; i++)
     ba8:	1f 5f       	subi	r17, 0xFF	; 255
     baa:	1a 35       	cpi	r17, 0x5A	; 90
     bac:	99 f7       	brne	.-26     	; 0xb94 <pickup_1+0x34>
     bae:	80 e1       	ldi	r24, 0x10	; 16
     bb0:	97 e2       	ldi	r25, 0x27	; 39
     bb2:	20 e7       	ldi	r18, 0x70	; 112
     bb4:	31 e0       	ldi	r19, 0x01	; 1
     bb6:	f9 01       	movw	r30, r18
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <pickup_1+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bbc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bbe:	d9 f7       	brne	.-10     	; 0xbb6 <pickup_1+0x56>
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	c0 e7       	ldi	r28, 0x70	; 112
     bc4:	d1 e0       	ldi	r29, 0x01	; 1
  _delay_ms(30);
 }
_delay_ms(1000);
for (i = 0; i <90; i++)
 {
  servo_2(i);
     bc6:	81 2f       	mov	r24, r17
     bc8:	0e 94 88 05 	call	0xb10	; 0xb10 <servo_2>
     bcc:	8c e2       	ldi	r24, 0x2C	; 44
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	fe 01       	movw	r30, r28
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <pickup_1+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bd8:	d9 f7       	brne	.-10     	; 0xbd0 <pickup_1+0x70>
 {
  servo_1(i);
  _delay_ms(30);
 }
_delay_ms(1000);
for (i = 0; i <90; i++)
     bda:	1f 5f       	subi	r17, 0xFF	; 255
     bdc:	1a 35       	cpi	r17, 0x5A	; 90
     bde:	99 f7       	brne	.-26     	; 0xbc6 <pickup_1+0x66>
     be0:	80 ed       	ldi	r24, 0xD0	; 208
     be2:	97 e0       	ldi	r25, 0x07	; 7
     be4:	20 e7       	ldi	r18, 0x70	; 112
     be6:	31 e0       	ldi	r19, 0x01	; 1
     be8:	f9 01       	movw	r30, r18
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <pickup_1+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf0:	d9 f7       	brne	.-10     	; 0xbe8 <pickup_1+0x88>
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03;
     bf2:	93 e0       	ldi	r25, 0x03	; 3
     bf4:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF; //Servo 1 off
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	80 93 88 00 	sts	0x0088, r24
}

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     bfe:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF; //Servo 2 off
     c02:	80 93 8a 00 	sts	0x008A, r24
 servo_1_free();
 servo_2_free();

    //ServoCodeEnd

    right_degrees(90);
     c06:	8a e5       	ldi	r24, 0x5A	; 90
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 bc 03 	call	0x778	; 0x778 <right_degrees>
     c0e:	88 ee       	ldi	r24, 0xE8	; 232
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	20 e7       	ldi	r18, 0x70	; 112
     c14:	31 e0       	ldi	r19, 0x01	; 1
     c16:	f9 01       	movw	r30, r18
     c18:	31 97       	sbiw	r30, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <pickup_1+0xb8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1e:	d9 f7       	brne	.-10     	; 0xc16 <pickup_1+0xb6>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c20:	86 e9       	ldi	r24, 0x96	; 150
     c22:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c26:	80 93 2a 01 	sts	0x012A, r24
    //ServoCodeEnd

    right_degrees(90);
    _delay_ms(100);
	velocity(150,150);
}
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	08 95       	ret

00000c32 <traverse>:

	velocity(0,0);

}

void traverse(unsigned char pick_up) {
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	08 2f       	mov	r16, r24
    unsigned char rot,rot2,jn,temp,i;
    if(pick_up<7) {
     c42:	87 30       	cpi	r24, 0x07	; 7
     c44:	08 f0       	brcs	.+2      	; 0xc48 <traverse+0x16>
     c46:	dd c1       	rjmp	.+954    	; 0x1002 <traverse+0x3d0>
        rot = (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	80 fd       	sbrc	r24, 0
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <traverse+0x22>
     c4e:	e0 2e       	mov	r14, r16
     c50:	e6 94       	lsr	r14
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <traverse+0x2a>
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	95 95       	asr	r25
     c58:	87 95       	ror	r24
     c5a:	e8 2e       	mov	r14, r24
     c5c:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c5e:	42 e8       	ldi	r20, 0x82	; 130
     c60:	d4 2e       	mov	r13, r20
	OCR5BL = (unsigned char)right_motor;
     c62:	32 e3       	ldi	r19, 0x32	; 50
     c64:	f3 2e       	mov	r15, r19
     c66:	c0 e7       	ldi	r28, 0x70	; 112
     c68:	d1 e0       	ldi	r29, 0x01	; 1
     c6a:	4d c0       	rjmp	.+154    	; 0xd06 <traverse+0xd4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c6c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c6e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c70:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c72:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c74:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
     c78:	f0 92 2a 01 	sts	0x012A, r15
     c7c:	80 e1       	ldi	r24, 0x10	; 16
     c7e:	97 e2       	ldi	r25, 0x27	; 39
     c80:	fe 01       	movw	r30, r28
     c82:	31 97       	sbiw	r30, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <traverse+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c88:	d9 f7       	brne	.-10     	; 0xc80 <traverse+0x4e>
void traverse(unsigned char pick_up) {
    unsigned char rot,rot2,jn,temp,i;
    if(pick_up<7) {
        rot = (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
            while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     c90:	90 91 00 02 	lds	r25, 0x0200
     c94:	98 17       	cp	r25, r24
     c96:	50 f3       	brcs	.-44     	; 0xc6c <traverse+0x3a>
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     c9e:	90 91 00 02 	lds	r25, 0x0200
     ca2:	98 17       	cp	r25, r24
     ca4:	18 f3       	brcs	.-58     	; 0xc6c <traverse+0x3a>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     cac:	90 91 00 02 	lds	r25, 0x0200
     cb0:	98 17       	cp	r25, r24
     cb2:	e0 f2       	brcs	.-72     	; 0xc6c <traverse+0x3a>
     cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <traverse+0x94>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     cb6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cb8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     cba:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     cbc:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cbe:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
     cc2:	f0 92 2a 01 	sts	0x012A, r15
                velocity(130,50);
				_delay_ms(1000);
            }
            //stop();
            //_delay_ms(100);
            while(ADC_Conversion(1)<thr&&ADC_Conversion(2)<thr&&ADC_Conversion(3)<thr) {
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     ccc:	90 91 00 02 	lds	r25, 0x0200
     cd0:	89 17       	cp	r24, r25
     cd2:	70 f4       	brcc	.+28     	; 0xcf0 <traverse+0xbe>
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     cda:	90 91 00 02 	lds	r25, 0x0200
     cde:	89 17       	cp	r24, r25
     ce0:	38 f4       	brcc	.+14     	; 0xcf0 <traverse+0xbe>
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     ce8:	90 91 00 02 	lds	r25, 0x0200
     cec:	89 17       	cp	r24, r25
     cee:	18 f3       	brcs	.-58     	; 0xcb6 <traverse+0x84>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     cf0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cf2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     cf4:	82 b9       	out	0x02, r24	; 2
     cf6:	88 ee       	ldi	r24, 0xE8	; 232
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	fe 01       	movw	r30, r28
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <traverse+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d00:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d02:	d9 f7       	brne	.-10     	; 0xcfa <traverse+0xc8>

void traverse(unsigned char pick_up) {
    unsigned char rot,rot2,jn,temp,i;
    if(pick_up<7) {
        rot = (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
     d04:	1f 5f       	subi	r17, 0xFF	; 255
     d06:	1e 15       	cp	r17, r14
     d08:	08 f4       	brcc	.+2      	; 0xd0c <traverse+0xda>
     d0a:	bf cf       	rjmp	.-130    	; 0xc8a <traverse+0x58>
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <traverse+0xe0>
        stop();
        _delay_ms(50);
*/

        while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
            line_follow();
     d0e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
        }// end while
        stop();
        _delay_ms(50);
*/

        while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     d18:	90 91 00 02 	lds	r25, 0x0200
     d1c:	98 17       	cp	r25, r24
     d1e:	b8 f3       	brcs	.-18     	; 0xd0e <traverse+0xdc>
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     d26:	90 91 00 02 	lds	r25, 0x0200
     d2a:	98 17       	cp	r25, r24
     d2c:	80 f3       	brcs	.-32     	; 0xd0e <traverse+0xdc>
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     d34:	90 91 00 02 	lds	r25, 0x0200
     d38:	98 17       	cp	r25, r24
     d3a:	48 f3       	brcs	.-46     	; 0xd0e <traverse+0xdc>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d3c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d3e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     d40:	82 b9       	out	0x02, r24	; 2
     d42:	84 ef       	ldi	r24, 0xF4	; 244
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	20 e7       	ldi	r18, 0x70	; 112
     d48:	31 e0       	ldi	r19, 0x01	; 1
     d4a:	f9 01       	movw	r30, r18
     d4c:	31 97       	sbiw	r30, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <traverse+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d50:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d52:	d9 f7       	brne	.-10     	; 0xd4a <traverse+0x118>
     d54:	09 c0       	rjmp	.+18     	; 0xd68 <traverse+0x136>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d56:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d58:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     d5a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     d5c:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d5e:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
     d62:	10 93 2a 01 	sts	0x012A, r17
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <traverse+0x13c>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d68:	22 e8       	ldi	r18, 0x82	; 130
     d6a:	f2 2e       	mov	r15, r18
	OCR5BL = (unsigned char)right_motor;
     d6c:	12 e3       	ldi	r17, 0x32	; 50
        while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
            line_follow();
        }
        stop();
        _delay_ms(50);
        while(ADC_Conversion(1)<thr && ADC_Conversion(2)<thr && ADC_Conversion(3)<thr){
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     d74:	90 91 00 02 	lds	r25, 0x0200
     d78:	89 17       	cp	r24, r25
     d7a:	70 f4       	brcc	.+28     	; 0xd98 <traverse+0x166>
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     d82:	90 91 00 02 	lds	r25, 0x0200
     d86:	89 17       	cp	r24, r25
     d88:	38 f4       	brcc	.+14     	; 0xd98 <traverse+0x166>
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     d90:	90 91 00 02 	lds	r25, 0x0200
     d94:	89 17       	cp	r24, r25
     d96:	f8 f2       	brcs	.-66     	; 0xd56 <traverse+0x124>
            forward();
            velocity(130,50);
        }

        temp = 2-(pick_up%2); // pickup point
     d98:	01 70       	andi	r16, 0x01	; 1
     d9a:	12 e0       	ldi	r17, 0x02	; 2
     d9c:	10 1b       	sub	r17, r16
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d9e:	04 e6       	ldi	r16, 0x64	; 100
     da0:	c0 e7       	ldi	r28, 0x70	; 112
     da2:	d1 e0       	ldi	r29, 0x01	; 1
            velocity(130,50);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
     da4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
            if(ADC_Conversion(3)>thr&&ADC_Conversion(2)>thr){
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     dae:	90 91 00 02 	lds	r25, 0x0200
     db2:	98 17       	cp	r25, r24
     db4:	b8 f7       	brcc	.-18     	; 0xda4 <traverse+0x172>
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     dbc:	90 91 00 02 	lds	r25, 0x0200
     dc0:	98 17       	cp	r25, r24
     dc2:	80 f7       	brcc	.-32     	; 0xda4 <traverse+0x172>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     dc4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     dc6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     dc8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     dca:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     dcc:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
     dd0:	00 93 2a 01 	sts	0x012A, r16
     dd4:	84 ef       	ldi	r24, 0xF4	; 244
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	fe 01       	movw	r30, r28
     dda:	31 97       	sbiw	r30, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <traverse+0x1a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dde:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de0:	d9 f7       	brne	.-10     	; 0xdd8 <traverse+0x1a6>

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
            if(ADC_Conversion(3)>thr&&ADC_Conversion(2)>thr){
                temp--;
     de2:	11 50       	subi	r17, 0x01	; 1
            forward();
            velocity(130,50);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
     de4:	f9 f6       	brne	.-66     	; 0xda4 <traverse+0x172>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     de6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     de8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     dea:	82 b9       	out	0x02, r24	; 2
     dec:	84 ef       	ldi	r24, 0xF4	; 244
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	20 e7       	ldi	r18, 0x70	; 112
     df2:	31 e0       	ldi	r19, 0x01	; 1
     df4:	f9 01       	movw	r30, r18
     df6:	31 97       	sbiw	r30, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <traverse+0x1c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfc:	d9 f7       	brne	.-10     	; 0xdf4 <traverse+0x1c2>
        }//end while

        stop();
        _delay_ms(50);

            pickup_1();
     dfe:	0e 94 b0 05 	call	0xb60	; 0xb60 <pickup_1>
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <traverse+0x1d6>

        while(ADC_Conversion(1)<thr&&ADC_Conversion(2)>thr){
            line_follow();
     e04:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
        stop();
        _delay_ms(50);

            pickup_1();

        while(ADC_Conversion(1)<thr&&ADC_Conversion(2)>thr){
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     e0e:	90 91 00 02 	lds	r25, 0x0200
     e12:	89 17       	cp	r24, r25
     e14:	88 f4       	brcc	.+34     	; 0xe38 <traverse+0x206>
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     e1c:	90 91 00 02 	lds	r25, 0x0200
     e20:	98 17       	cp	r25, r24
     e22:	80 f3       	brcs	.-32     	; 0xe04 <traverse+0x1d2>
     e24:	09 c0       	rjmp	.+18     	; 0xe38 <traverse+0x206>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e26:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e28:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     e2a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     e2c:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e2e:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
     e32:	10 93 2a 01 	sts	0x012A, r17
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <traverse+0x20a>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e38:	02 e8       	ldi	r16, 0x82	; 130
	OCR5BL = (unsigned char)right_motor;
     e3a:	12 e3       	ldi	r17, 0x32	; 50
        while(ADC_Conversion(1)<thr&&ADC_Conversion(2)>thr){
            line_follow();
        }

        // may need some changes
        while(ADC_Conversion(3)>thr || ADC_Conversion(1)>thr || ADC_Conversion(2)<thr){
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     e42:	90 91 00 02 	lds	r25, 0x0200
     e46:	98 17       	cp	r25, r24
     e48:	70 f3       	brcs	.-36     	; 0xe26 <traverse+0x1f4>
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     e50:	90 91 00 02 	lds	r25, 0x0200
     e54:	98 17       	cp	r25, r24
     e56:	38 f3       	brcs	.-50     	; 0xe26 <traverse+0x1f4>
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     e5e:	90 91 00 02 	lds	r25, 0x0200
     e62:	89 17       	cp	r24, r25
     e64:	00 f3       	brcs	.-64     	; 0xe26 <traverse+0x1f4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e66:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e68:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     e6a:	82 b9       	out	0x02, r24	; 2
     e6c:	84 ef       	ldi	r24, 0xF4	; 244
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	20 e7       	ldi	r18, 0x70	; 112
     e72:	31 e0       	ldi	r19, 0x01	; 1
     e74:	f9 01       	movw	r30, r18
     e76:	31 97       	sbiw	r30, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <traverse+0x244>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7c:	d9 f7       	brne	.-10     	; 0xe74 <traverse+0x242>
     e7e:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e80:	04 e6       	ldi	r16, 0x64	; 100
     e82:	c0 e7       	ldi	r28, 0x70	; 112
     e84:	d1 e0       	ldi	r29, 0x01	; 1
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
            line_follow();
     e86:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     e90:	90 91 00 02 	lds	r25, 0x0200
     e94:	98 17       	cp	r25, r24
     e96:	b8 f7       	brcc	.-18     	; 0xe86 <traverse+0x254>
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     e9e:	90 91 00 02 	lds	r25, 0x0200
     ea2:	98 17       	cp	r25, r24
     ea4:	80 f7       	brcc	.-32     	; 0xe86 <traverse+0x254>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ea6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ea8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     eaa:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     eac:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     eae:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
     eb2:	00 93 2a 01 	sts	0x012A, r16
     eb6:	84 ef       	ldi	r24, 0xF4	; 244
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	fe 01       	movw	r30, r28
     ebc:	31 97       	sbiw	r30, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <traverse+0x28a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec2:	d9 f7       	brne	.-10     	; 0xeba <traverse+0x288>
        jn=2;

        while(jn) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
                jn--;
     ec4:	11 50       	subi	r17, 0x01	; 1
        }
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
     ec6:	f9 f6       	brne	.-66     	; 0xe86 <traverse+0x254>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ec8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     eca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     ecc:	82 b9       	out	0x02, r24	; 2
     ece:	84 ef       	ldi	r24, 0xF4	; 244
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	20 e7       	ldi	r18, 0x70	; 112
     ed4:	31 e0       	ldi	r19, 0x01	; 1
     ed6:	f9 01       	movw	r30, r18
     ed8:	31 97       	sbiw	r30, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <traverse+0x2a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     edc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ede:	d9 f7       	brne	.-10     	; 0xed6 <traverse+0x2a4>
        }//end while

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
     ee0:	03 e0       	ldi	r16, 0x03	; 3
     ee2:	0e 19       	sub	r16, r14
     ee4:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ee6:	92 e8       	ldi	r25, 0x82	; 130
     ee8:	e9 2e       	mov	r14, r25
	OCR5BL = (unsigned char)right_motor;
     eea:	82 e3       	ldi	r24, 0x32	; 50
     eec:	f8 2e       	mov	r15, r24
     eee:	c0 e7       	ldi	r28, 0x70	; 112
     ef0:	d1 e0       	ldi	r29, 0x01	; 1
     ef2:	50 c0       	rjmp	.+160    	; 0xf94 <traverse+0x362>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ef4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ef6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ef8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     efa:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     efc:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
     f00:	f0 92 2a 01 	sts	0x012A, r15
        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
            while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     f0a:	90 91 00 02 	lds	r25, 0x0200
     f0e:	98 17       	cp	r25, r24
     f10:	88 f3       	brcs	.-30     	; 0xef4 <traverse+0x2c2>
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     f18:	90 91 00 02 	lds	r25, 0x0200
     f1c:	98 17       	cp	r25, r24
     f1e:	50 f3       	brcs	.-44     	; 0xef4 <traverse+0x2c2>
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     f26:	90 91 00 02 	lds	r25, 0x0200
     f2a:	98 17       	cp	r25, r24
     f2c:	18 f3       	brcs	.-58     	; 0xef4 <traverse+0x2c2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f2e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f30:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     f32:	82 b9       	out	0x02, r24	; 2
     f34:	88 ee       	ldi	r24, 0xE8	; 232
     f36:	93 e0       	ldi	r25, 0x03	; 3
     f38:	fe 01       	movw	r30, r28
     f3a:	31 97       	sbiw	r30, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <traverse+0x308>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f40:	d9 f7       	brne	.-10     	; 0xf38 <traverse+0x306>
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <traverse+0x322>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f44:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f46:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     f48:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     f4a:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f4c:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
     f50:	f0 92 2a 01 	sts	0x012A, r15
                forward();
                velocity(130,50);
            }
            stop();
            _delay_ms(100);
            while(ADC_Conversion(1)<thr&&ADC_Conversion(2)<thr&&ADC_Conversion(3)<thr) {
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     f5a:	90 91 00 02 	lds	r25, 0x0200
     f5e:	89 17       	cp	r24, r25
     f60:	70 f4       	brcc	.+28     	; 0xf7e <traverse+0x34c>
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     f68:	90 91 00 02 	lds	r25, 0x0200
     f6c:	89 17       	cp	r24, r25
     f6e:	38 f4       	brcc	.+14     	; 0xf7e <traverse+0x34c>
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     f76:	90 91 00 02 	lds	r25, 0x0200
     f7a:	89 17       	cp	r24, r25
     f7c:	18 f3       	brcs	.-58     	; 0xf44 <traverse+0x312>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f7e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f80:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     f82:	82 b9       	out	0x02, r24	; 2
     f84:	88 ee       	ldi	r24, 0xE8	; 232
     f86:	93 e0       	ldi	r25, 0x03	; 3
     f88:	fe 01       	movw	r30, r28
     f8a:	31 97       	sbiw	r30, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <traverse+0x358>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f90:	d9 f7       	brne	.-10     	; 0xf88 <traverse+0x356>

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
     f92:	1f 5f       	subi	r17, 0xFF	; 255
     f94:	10 17       	cp	r17, r16
     f96:	08 f4       	brcc	.+2      	; 0xf9a <traverse+0x368>
     f98:	b5 cf       	rjmp	.-150    	; 0xf04 <traverse+0x2d2>
     f9a:	11 e0       	ldi	r17, 0x01	; 1
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
            line_follow();
     f9c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr && ADC_Conversion(3)>thr) {
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     fa6:	90 91 00 02 	lds	r25, 0x0200
     faa:	98 17       	cp	r25, r24
     fac:	b8 f7       	brcc	.-18     	; 0xf9c <traverse+0x36a>
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     fb4:	90 91 00 02 	lds	r25, 0x0200
     fb8:	98 17       	cp	r25, r24
     fba:	80 f7       	brcc	.-32     	; 0xf9c <traverse+0x36a>
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
     fc2:	90 91 00 02 	lds	r25, 0x0200
     fc6:	98 17       	cp	r25, r24
     fc8:	08 f4       	brcc	.+2      	; 0xfcc <traverse+0x39a>
                jn--;
     fca:	11 50       	subi	r17, 0x01	; 1
            stop();
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
     fcc:	11 23       	and	r17, r17
     fce:	31 f7       	brne	.-52     	; 0xf9c <traverse+0x36a>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     fd0:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     fd2:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     fd4:	88 b9       	out	0x08, r24	; 8
     fd6:	88 e8       	ldi	r24, 0x88	; 136
     fd8:	93 e1       	ldi	r25, 0x13	; 19
     fda:	20 e7       	ldi	r18, 0x70	; 112
     fdc:	31 e0       	ldi	r19, 0x01	; 1
     fde:	f9 01       	movw	r30, r18
     fe0:	31 97       	sbiw	r30, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <traverse+0x3ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe6:	d9 f7       	brne	.-10     	; 0xfde <traverse+0x3ac>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     fe8:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     fea:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     fec:	88 b9       	out	0x08, r24	; 8
     fee:	88 e8       	ldi	r24, 0x88	; 136
     ff0:	93 e1       	ldi	r25, 0x13	; 19
     ff2:	20 e7       	ldi	r18, 0x70	; 112
     ff4:	31 e0       	ldi	r19, 0x01	; 1
     ff6:	f9 01       	movw	r30, r18
     ff8:	31 97       	sbiw	r30, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <traverse+0x3c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	d9 f7       	brne	.-10     	; 0xff6 <traverse+0x3c4>
    1000:	11 c2       	rjmp	.+1058   	; 0x1424 <traverse+0x7f2>
        drop();

    } // end if

    else {
        rot = 7 - (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
    1002:	d8 2e       	mov	r13, r24
    1004:	d6 94       	lsr	r13
    1006:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1008:	b2 e3       	ldi	r27, 0x32	; 50
    100a:	eb 2e       	mov	r14, r27
	OCR5BL = (unsigned char)right_motor;
    100c:	a2 e8       	ldi	r26, 0x82	; 130
    100e:	fa 2e       	mov	r15, r26
    1010:	c0 e7       	ldi	r28, 0x70	; 112
    1012:	d1 e0       	ldi	r29, 0x01	; 1
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <traverse+0x3f4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1016:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1018:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    101a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    101c:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    101e:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    1022:	f0 92 2a 01 	sts	0x012A, r15
    } // end if

    else {
        rot = 7 - (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
            while(ADC_Conversion(1)>thr || ADC_Conversion(2)>thr || ADC_Conversion(3)>thr) {
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    102c:	90 91 00 02 	lds	r25, 0x0200
    1030:	98 17       	cp	r25, r24
    1032:	88 f3       	brcs	.-30     	; 0x1016 <traverse+0x3e4>
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    103a:	90 91 00 02 	lds	r25, 0x0200
    103e:	98 17       	cp	r25, r24
    1040:	50 f3       	brcs	.-44     	; 0x1016 <traverse+0x3e4>
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1048:	90 91 00 02 	lds	r25, 0x0200
    104c:	98 17       	cp	r25, r24
    104e:	18 f3       	brcs	.-58     	; 0x1016 <traverse+0x3e4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1050:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1052:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1054:	82 b9       	out	0x02, r24	; 2
    1056:	88 ee       	ldi	r24, 0xE8	; 232
    1058:	93 e0       	ldi	r25, 0x03	; 3
    105a:	fe 01       	movw	r30, r28
    105c:	31 97       	sbiw	r30, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <traverse+0x42a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1060:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1062:	d9 f7       	brne	.-10     	; 0x105a <traverse+0x428>
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <traverse+0x444>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1066:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1068:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    106a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    106c:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    106e:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    1072:	f0 92 2a 01 	sts	0x012A, r15
                forward();
                velocity(50,130);
            }
            stop();
            _delay_ms(100);
            while(ADC_Conversion(1)<thr && ADC_Conversion(2)<thr && ADC_Conversion(3)<thr) {
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    107c:	90 91 00 02 	lds	r25, 0x0200
    1080:	89 17       	cp	r24, r25
    1082:	70 f4       	brcc	.+28     	; 0x10a0 <traverse+0x46e>
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    108a:	90 91 00 02 	lds	r25, 0x0200
    108e:	89 17       	cp	r24, r25
    1090:	38 f4       	brcc	.+14     	; 0x10a0 <traverse+0x46e>
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1098:	90 91 00 02 	lds	r25, 0x0200
    109c:	89 17       	cp	r24, r25
    109e:	18 f3       	brcs	.-58     	; 0x1066 <traverse+0x434>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    10a0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    10a2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    10a4:	82 b9       	out	0x02, r24	; 2
    10a6:	88 ee       	ldi	r24, 0xE8	; 232
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	fe 01       	movw	r30, r28
    10ac:	31 97       	sbiw	r30, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <traverse+0x47a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b2:	d9 f7       	brne	.-10     	; 0x10aa <traverse+0x478>

    } // end if

    else {
        rot = 7 - (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
    10b4:	1f 5f       	subi	r17, 0xFF	; 255
    10b6:	1d 15       	cp	r17, r13
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <traverse+0x48a>
    10ba:	b5 cf       	rjmp	.-150    	; 0x1026 <traverse+0x3f4>
    10bc:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    10be:	f4 e6       	ldi	r31, 0x64	; 100
    10c0:	ff 2e       	mov	r15, r31
    10c2:	c0 e7       	ldi	r28, 0x70	; 112
    10c4:	d1 e0       	ldi	r29, 0x01	; 1
            _delay_ms(100);
        }//end for

        jn=2;
        while(jn) {
            line_follow();
    10c6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    10d0:	90 91 00 02 	lds	r25, 0x0200
    10d4:	98 17       	cp	r25, r24
    10d6:	b8 f7       	brcc	.-18     	; 0x10c6 <traverse+0x494>
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    10de:	90 91 00 02 	lds	r25, 0x0200
    10e2:	98 17       	cp	r25, r24
    10e4:	80 f7       	brcc	.-32     	; 0x10c6 <traverse+0x494>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    10e6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    10e8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    10ea:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    10ec:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    10ee:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    10f2:	f0 92 2a 01 	sts	0x012A, r15
    10f6:	84 ef       	ldi	r24, 0xF4	; 244
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	fe 01       	movw	r30, r28
    10fc:	31 97       	sbiw	r30, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <traverse+0x4ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1102:	d9 f7       	brne	.-10     	; 0x10fa <traverse+0x4c8>

        jn=2;
        while(jn) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
                jn--;
    1104:	11 50       	subi	r17, 0x01	; 1
            stop();
            _delay_ms(100);
        }//end for

        jn=2;
        while(jn) {
    1106:	f9 f6       	brne	.-66     	; 0x10c6 <traverse+0x494>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1108:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    110a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    110c:	82 b9       	out	0x02, r24	; 2
    110e:	84 ef       	ldi	r24, 0xF4	; 244
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	20 e7       	ldi	r18, 0x70	; 112
    1114:	31 e0       	ldi	r19, 0x01	; 1
    1116:	f9 01       	movw	r30, r18
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <traverse+0x4e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111e:	d9 f7       	brne	.-10     	; 0x1116 <traverse+0x4e4>
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <traverse+0x502>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1122:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1124:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1126:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1128:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    112a:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    112e:	10 93 2a 01 	sts	0x012A, r17
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <traverse+0x504>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1134:	14 e6       	ldi	r17, 0x64	; 100
            }
        }// end while
        stop();
        _delay_ms(50);

        while(ADC_Conversion(1)>thr || ADC_Conversion(2)>thr || ADC_Conversion(3)>thr) {
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    113c:	90 91 00 02 	lds	r25, 0x0200
    1140:	98 17       	cp	r25, r24
    1142:	78 f3       	brcs	.-34     	; 0x1122 <traverse+0x4f0>
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    114a:	90 91 00 02 	lds	r25, 0x0200
    114e:	98 17       	cp	r25, r24
    1150:	40 f3       	brcs	.-48     	; 0x1122 <traverse+0x4f0>
    1152:	83 e0       	ldi	r24, 0x03	; 3
    1154:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1158:	90 91 00 02 	lds	r25, 0x0200
    115c:	98 17       	cp	r25, r24
    115e:	08 f3       	brcs	.-62     	; 0x1122 <traverse+0x4f0>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1160:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1162:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1164:	82 b9       	out	0x02, r24	; 2
    1166:	84 ef       	ldi	r24, 0xF4	; 244
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	20 e7       	ldi	r18, 0x70	; 112
    116c:	31 e0       	ldi	r19, 0x01	; 1
    116e:	f9 01       	movw	r30, r18
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	f1 f7       	brne	.-4      	; 0x1170 <traverse+0x53e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1174:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1176:	d9 f7       	brne	.-10     	; 0x116e <traverse+0x53c>
    1178:	09 c0       	rjmp	.+18     	; 0x118c <traverse+0x55a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    117a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    117c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    117e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1180:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1182:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    1186:	10 93 2a 01 	sts	0x012A, r17
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <traverse+0x560>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	fe 2e       	mov	r15, r30
	OCR5BL = (unsigned char)right_motor;
    1190:	12 e8       	ldi	r17, 0x82	; 130
            forward();
            velocity(100,100);
        }
        stop();
        _delay_ms(50);
        while(ADC_Conversion(1)<thr && ADC_Conversion(2)<thr && ADC_Conversion(3)<thr){
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1198:	90 91 00 02 	lds	r25, 0x0200
    119c:	89 17       	cp	r24, r25
    119e:	70 f4       	brcc	.+28     	; 0x11bc <traverse+0x58a>
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    11a6:	90 91 00 02 	lds	r25, 0x0200
    11aa:	89 17       	cp	r24, r25
    11ac:	38 f4       	brcc	.+14     	; 0x11bc <traverse+0x58a>
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    11b4:	90 91 00 02 	lds	r25, 0x0200
    11b8:	89 17       	cp	r24, r25
    11ba:	f8 f2       	brcs	.-66     	; 0x117a <traverse+0x548>
            forward();
            velocity(50,130);
        }

        temp = 2-(pick_up%2); // pickup point
    11bc:	01 70       	andi	r16, 0x01	; 1
    11be:	12 e0       	ldi	r17, 0x02	; 2
    11c0:	10 1b       	sub	r17, r16
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    11c2:	04 e6       	ldi	r16, 0x64	; 100
    11c4:	c0 e7       	ldi	r28, 0x70	; 112
    11c6:	d1 e0       	ldi	r29, 0x01	; 1
            velocity(50,130);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
    11c8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr){
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    11d2:	90 91 00 02 	lds	r25, 0x0200
    11d6:	98 17       	cp	r25, r24
    11d8:	b8 f7       	brcc	.-18     	; 0x11c8 <traverse+0x596>
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    11e0:	90 91 00 02 	lds	r25, 0x0200
    11e4:	98 17       	cp	r25, r24
    11e6:	80 f7       	brcc	.-32     	; 0x11c8 <traverse+0x596>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11e8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11ea:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    11ec:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    11ee:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    11f0:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    11f4:	00 93 2a 01 	sts	0x012A, r16
    11f8:	84 ef       	ldi	r24, 0xF4	; 244
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	fe 01       	movw	r30, r28
    11fe:	31 97       	sbiw	r30, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <traverse+0x5cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1202:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1204:	d9 f7       	brne	.-10     	; 0x11fc <traverse+0x5ca>

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr){
                temp--;
    1206:	11 50       	subi	r17, 0x01	; 1
            forward();
            velocity(50,130);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
    1208:	f9 f6       	brne	.-66     	; 0x11c8 <traverse+0x596>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    120a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    120c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    120e:	82 b9       	out	0x02, r24	; 2
    1210:	84 ef       	ldi	r24, 0xF4	; 244
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	20 e7       	ldi	r18, 0x70	; 112
    1216:	31 e0       	ldi	r19, 0x01	; 1
    1218:	f9 01       	movw	r30, r18
    121a:	31 97       	sbiw	r30, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <traverse+0x5e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1220:	d9 f7       	brne	.-10     	; 0x1218 <traverse+0x5e6>
        }//end while

        stop();
        _delay_ms(50);
        //
            pickup_1();
    1222:	0e 94 b0 05 	call	0xb60	; 0xb60 <pickup_1>
    1226:	02 c0       	rjmp	.+4      	; 0x122c <traverse+0x5fa>
        //
        while(ADC_Conversion(3)<thr && ADC_Conversion(2)>thr){
            line_follow();
    1228:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
        stop();
        _delay_ms(50);
        //
            pickup_1();
        //
        while(ADC_Conversion(3)<thr && ADC_Conversion(2)>thr){
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1232:	90 91 00 02 	lds	r25, 0x0200
    1236:	89 17       	cp	r24, r25
    1238:	88 f4       	brcc	.+34     	; 0x125c <traverse+0x62a>
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1240:	90 91 00 02 	lds	r25, 0x0200
    1244:	98 17       	cp	r25, r24
    1246:	80 f3       	brcs	.-32     	; 0x1228 <traverse+0x5f6>
    1248:	09 c0       	rjmp	.+18     	; 0x125c <traverse+0x62a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    124a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    124c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    124e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1250:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1252:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    1256:	10 93 2a 01 	sts	0x012A, r17
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <traverse+0x62e>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    125c:	02 e3       	ldi	r16, 0x32	; 50
	OCR5BL = (unsigned char)right_motor;
    125e:	12 e8       	ldi	r17, 0x82	; 130
        while(ADC_Conversion(3)<thr && ADC_Conversion(2)>thr){
            line_follow();
        }

        // may need some changes
        while(ADC_Conversion(3)>thr || ADC_Conversion(1)>thr || ADC_Conversion(2)<thr){
    1260:	83 e0       	ldi	r24, 0x03	; 3
    1262:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1266:	90 91 00 02 	lds	r25, 0x0200
    126a:	98 17       	cp	r25, r24
    126c:	70 f3       	brcs	.-36     	; 0x124a <traverse+0x618>
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1274:	90 91 00 02 	lds	r25, 0x0200
    1278:	98 17       	cp	r25, r24
    127a:	38 f3       	brcs	.-50     	; 0x124a <traverse+0x618>
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1282:	90 91 00 02 	lds	r25, 0x0200
    1286:	89 17       	cp	r24, r25
    1288:	00 f3       	brcs	.-64     	; 0x124a <traverse+0x618>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    128a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    128c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    128e:	82 b9       	out	0x02, r24	; 2
    1290:	84 ef       	ldi	r24, 0xF4	; 244
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	20 e7       	ldi	r18, 0x70	; 112
    1296:	31 e0       	ldi	r19, 0x01	; 1
    1298:	f9 01       	movw	r30, r18
    129a:	31 97       	sbiw	r30, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <traverse+0x668>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a0:	d9 f7       	brne	.-10     	; 0x1298 <traverse+0x666>
    12a2:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12a4:	04 e6       	ldi	r16, 0x64	; 100
    12a6:	c0 e7       	ldi	r28, 0x70	; 112
    12a8:	d1 e0       	ldi	r29, 0x01	; 1
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
            line_follow();
    12aa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    12b4:	90 91 00 02 	lds	r25, 0x0200
    12b8:	98 17       	cp	r25, r24
    12ba:	b8 f7       	brcc	.-18     	; 0x12aa <traverse+0x678>
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    12c2:	90 91 00 02 	lds	r25, 0x0200
    12c6:	98 17       	cp	r25, r24
    12c8:	80 f7       	brcc	.-32     	; 0x12aa <traverse+0x678>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12ca:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12cc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    12ce:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    12d0:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12d2:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    12d6:	00 93 2a 01 	sts	0x012A, r16
    12da:	84 ef       	ldi	r24, 0xF4	; 244
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	fe 01       	movw	r30, r28
    12e0:	31 97       	sbiw	r30, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <traverse+0x6ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	d9 f7       	brne	.-10     	; 0x12de <traverse+0x6ac>
        jn=2;

        while(jn) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
                jn--;
    12e8:	11 50       	subi	r17, 0x01	; 1
        }
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
    12ea:	f9 f6       	brne	.-66     	; 0x12aa <traverse+0x678>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12ec:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12ee:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    12f0:	82 b9       	out	0x02, r24	; 2
    12f2:	84 ef       	ldi	r24, 0xF4	; 244
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	20 e7       	ldi	r18, 0x70	; 112
    12f8:	31 e0       	ldi	r19, 0x01	; 1
    12fa:	f9 01       	movw	r30, r18
    12fc:	31 97       	sbiw	r30, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <traverse+0x6ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1300:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	d9 f7       	brne	.-10     	; 0x12fa <traverse+0x6c8>
        }//end while

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
    1304:	03 e0       	ldi	r16, 0x03	; 3
    1306:	0d 19       	sub	r16, r13
    1308:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    130a:	72 e3       	ldi	r23, 0x32	; 50
    130c:	e7 2e       	mov	r14, r23
	OCR5BL = (unsigned char)right_motor;
    130e:	62 e8       	ldi	r22, 0x82	; 130
    1310:	f6 2e       	mov	r15, r22
    1312:	c0 e7       	ldi	r28, 0x70	; 112
    1314:	d1 e0       	ldi	r29, 0x01	; 1
    1316:	50 c0       	rjmp	.+160    	; 0x13b8 <traverse+0x786>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1318:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    131a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    131c:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    131e:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1320:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    1324:	f0 92 2a 01 	sts	0x012A, r15
        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
            while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    132e:	90 91 00 02 	lds	r25, 0x0200
    1332:	98 17       	cp	r25, r24
    1334:	88 f3       	brcs	.-30     	; 0x1318 <traverse+0x6e6>
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    133c:	90 91 00 02 	lds	r25, 0x0200
    1340:	98 17       	cp	r25, r24
    1342:	50 f3       	brcs	.-44     	; 0x1318 <traverse+0x6e6>
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    134a:	90 91 00 02 	lds	r25, 0x0200
    134e:	98 17       	cp	r25, r24
    1350:	18 f3       	brcs	.-58     	; 0x1318 <traverse+0x6e6>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1352:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1354:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1356:	82 b9       	out	0x02, r24	; 2
    1358:	88 ee       	ldi	r24, 0xE8	; 232
    135a:	93 e0       	ldi	r25, 0x03	; 3
    135c:	fe 01       	movw	r30, r28
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <traverse+0x72c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1362:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1364:	d9 f7       	brne	.-10     	; 0x135c <traverse+0x72a>
    1366:	08 c0       	rjmp	.+16     	; 0x1378 <traverse+0x746>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1368:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    136a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    136c:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    136e:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1370:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    1374:	f0 92 2a 01 	sts	0x012A, r15
                forward();
                velocity(50,130);
            }
            stop();
            _delay_ms(100);
            while(ADC_Conversion(1)<thr&&ADC_Conversion(2)<thr&&ADC_Conversion(3)<thr) {
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    137e:	90 91 00 02 	lds	r25, 0x0200
    1382:	89 17       	cp	r24, r25
    1384:	70 f4       	brcc	.+28     	; 0x13a2 <traverse+0x770>
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    138c:	90 91 00 02 	lds	r25, 0x0200
    1390:	89 17       	cp	r24, r25
    1392:	38 f4       	brcc	.+14     	; 0x13a2 <traverse+0x770>
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    139a:	90 91 00 02 	lds	r25, 0x0200
    139e:	89 17       	cp	r24, r25
    13a0:	18 f3       	brcs	.-58     	; 0x1368 <traverse+0x736>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    13a2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    13a4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    13a6:	82 b9       	out	0x02, r24	; 2
    13a8:	88 ee       	ldi	r24, 0xE8	; 232
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	fe 01       	movw	r30, r28
    13ae:	31 97       	sbiw	r30, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <traverse+0x77c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b4:	d9 f7       	brne	.-10     	; 0x13ac <traverse+0x77a>

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
    13b6:	1f 5f       	subi	r17, 0xFF	; 255
    13b8:	10 17       	cp	r17, r16
    13ba:	08 f4       	brcc	.+2      	; 0x13be <traverse+0x78c>
    13bc:	b5 cf       	rjmp	.-150    	; 0x1328 <traverse+0x6f6>
    13be:	11 e0       	ldi	r17, 0x01	; 1
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
            line_follow();
    13c0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr && ADC_Conversion(3)>thr) {
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    13ca:	90 91 00 02 	lds	r25, 0x0200
    13ce:	98 17       	cp	r25, r24
    13d0:	b8 f7       	brcc	.-18     	; 0x13c0 <traverse+0x78e>
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    13d8:	90 91 00 02 	lds	r25, 0x0200
    13dc:	98 17       	cp	r25, r24
    13de:	80 f7       	brcc	.-32     	; 0x13c0 <traverse+0x78e>
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    13e6:	90 91 00 02 	lds	r25, 0x0200
    13ea:	98 17       	cp	r25, r24
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <traverse+0x7be>
                jn--;
    13ee:	11 50       	subi	r17, 0x01	; 1
            stop();
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
    13f0:	11 23       	and	r17, r17
    13f2:	31 f7       	brne	.-52     	; 0x13c0 <traverse+0x78e>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    13f4:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    13f6:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    13f8:	88 b9       	out	0x08, r24	; 8
    13fa:	88 e8       	ldi	r24, 0x88	; 136
    13fc:	93 e1       	ldi	r25, 0x13	; 19
    13fe:	20 e7       	ldi	r18, 0x70	; 112
    1400:	31 e0       	ldi	r19, 0x01	; 1
    1402:	f9 01       	movw	r30, r18
    1404:	31 97       	sbiw	r30, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <traverse+0x7d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1408:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	d9 f7       	brne	.-10     	; 0x1402 <traverse+0x7d0>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    140c:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    140e:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1410:	88 b9       	out	0x08, r24	; 8
    1412:	88 e8       	ldi	r24, 0x88	; 136
    1414:	93 e1       	ldi	r25, 0x13	; 19
    1416:	20 e7       	ldi	r18, 0x70	; 112
    1418:	31 e0       	ldi	r19, 0x01	; 1
    141a:	f9 01       	movw	r30, r18
    141c:	31 97       	sbiw	r30, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <traverse+0x7ea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1420:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	d9 f7       	brne	.-10     	; 0x141a <traverse+0x7e8>

        //
        drop();
        //
    }
}
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	08 95       	ret

00001434 <temp_fn>:
            }
        }
}


void temp_fn() {
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29

    right_degrees(45);
    143e:	8d e2       	ldi	r24, 0x2D	; 45
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 bc 03 	call	0x778	; 0x778 <right_degrees>

    while(1) {
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    144c:	90 91 00 02 	lds	r25, 0x0200
    1450:	98 17       	cp	r25, r24
    1452:	88 f0       	brcs	.+34     	; 0x1476 <temp_fn+0x42>
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    145a:	90 91 00 02 	lds	r25, 0x0200
    145e:	98 17       	cp	r25, r24
    1460:	50 f0       	brcs	.+20     	; 0x1476 <temp_fn+0x42>
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1468:	90 91 00 02 	lds	r25, 0x0200
    146c:	98 17       	cp	r25, r24
    146e:	58 f7       	brcc	.-42     	; 0x1446 <temp_fn+0x12>
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <temp_fn+0x42>
            break;
    }

    while(flag<15) {
    line_follow();
    1472:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
    while(1) {
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
            break;
    }

    while(flag<15) {
    1476:	80 91 0a 03 	lds	r24, 0x030A
    147a:	8f 30       	cpi	r24, 0x0F	; 15
    147c:	d0 f3       	brcs	.-12     	; 0x1472 <temp_fn+0x3e>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    147e:	14 e6       	ldi	r17, 0x64	; 100
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1480:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1482:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1484:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1486:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1488:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    148c:	10 93 2a 01 	sts	0x012A, r17
	}

	while(1) {
	right();
	velocity(100,100);
	if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1496:	90 91 00 02 	lds	r25, 0x0200
    149a:	98 17       	cp	r25, r24
    149c:	38 f4       	brcc	.+14     	; 0x14ac <temp_fn+0x78>
    149e:	13 e0       	ldi	r17, 0x03	; 3
    14a0:	01 e0       	ldi	r16, 0x01	; 1
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14a2:	74 e6       	ldi	r23, 0x64	; 100
    14a4:	f7 2e       	mov	r15, r23
    14a6:	c0 e7       	ldi	r28, 0x70	; 112
    14a8:	d1 e0       	ldi	r29, 0x01	; 1
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <temp_fn+0x96>
	}

	while(1) {
	right();
	velocity(100,100);
	if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    14b2:	90 91 00 02 	lds	r25, 0x0200
    14b6:	98 17       	cp	r25, r24
    14b8:	90 f3       	brcs	.-28     	; 0x149e <temp_fn+0x6a>
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    14c0:	90 91 00 02 	lds	r25, 0x0200
    14c4:	98 17       	cp	r25, r24
    14c6:	e0 f6       	brcc	.-72     	; 0x1480 <temp_fn+0x4c>
    14c8:	ea cf       	rjmp	.-44     	; 0x149e <temp_fn+0x6a>

    // A
    unsigned char count = 3;
    uint8_t turn=1;
    while(count) {
        line_follow_1(150);
    14ca:	86 e9       	ldi	r24, 0x96	; 150
    14cc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <line_follow_1>

        if(count==1&&turn==1){
    14d0:	11 30       	cpi	r17, 0x01	; 1
    14d2:	29 f4       	brne	.+10     	; 0x14de <temp_fn+0xaa>
    14d4:	01 30       	cpi	r16, 0x01	; 1
    14d6:	11 f4       	brne	.+4      	; 0x14dc <temp_fn+0xa8>
            pickup_1();
    14d8:	0e 94 b0 05 	call	0xb60	; 0xb60 <pickup_1>
    14dc:	00 e0       	ldi	r16, 0x00	; 0
            turn=0;
        }

        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    14e4:	90 91 00 02 	lds	r25, 0x0200
    14e8:	98 17       	cp	r25, r24
    14ea:	38 f0       	brcs	.+14     	; 0x14fa <temp_fn+0xc6>
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    14f2:	90 91 00 02 	lds	r25, 0x0200
    14f6:	98 17       	cp	r25, r24
    14f8:	b8 f4       	brcc	.+46     	; 0x1528 <temp_fn+0xf4>
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1500:	90 91 00 02 	lds	r25, 0x0200
    1504:	98 17       	cp	r25, r24
    1506:	80 f4       	brcc	.+32     	; 0x1528 <temp_fn+0xf4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1508:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    150a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    150c:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    150e:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1510:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    1514:	f0 92 2a 01 	sts	0x012A, r15
    1518:	80 e1       	ldi	r24, 0x10	; 16
    151a:	97 e2       	ldi	r25, 0x27	; 39
    151c:	fe 01       	movw	r30, r28
    151e:	31 97       	sbiw	r30, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <temp_fn+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1522:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	d9 f7       	brne	.-10     	; 0x151c <temp_fn+0xe8>
            pickup_1();
            turn=0;
        }

        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
            count--;
    1526:	11 50       	subi	r17, 0x01	; 1
	}

    // A
    unsigned char count = 3;
    uint8_t turn=1;
    while(count) {
    1528:	11 23       	and	r17, r17
    152a:	79 f6       	brne	.-98     	; 0x14ca <temp_fn+0x96>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    152c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    152e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1530:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1532:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1534:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    1538:	10 92 2a 01 	sts	0x012A, r1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    153c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    153e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1540:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1542:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1544:	84 e6       	ldi	r24, 0x64	; 100
    1546:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    154a:	80 93 2a 01 	sts	0x012A, r24
    154e:	80 e2       	ldi	r24, 0x20	; 32
    1550:	9e e4       	ldi	r25, 0x4E	; 78
    1552:	20 e7       	ldi	r18, 0x70	; 112
    1554:	31 e0       	ldi	r19, 0x01	; 1
    1556:	f9 01       	movw	r30, r18
    1558:	31 97       	sbiw	r30, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <temp_fn+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	d9 f7       	brne	.-10     	; 0x1556 <temp_fn+0x122>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1560:	16 e9       	ldi	r17, 0x96	; 150
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1562:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1564:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1566:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1568:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    156a:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    156e:	10 93 2a 01 	sts	0x012A, r17
	_delay_ms(2000);

    while(1) {
        right();
        velocity(150,150);
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1578:	90 91 00 02 	lds	r25, 0x0200
    157c:	98 17       	cp	r25, r24
    157e:	28 f4       	brcc	.+10     	; 0x158a <temp_fn+0x156>
    1580:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1582:	04 e6       	ldi	r16, 0x64	; 100
    1584:	c0 e7       	ldi	r28, 0x70	; 112
    1586:	d1 e0       	ldi	r29, 0x01	; 1
    1588:	0f c0       	rjmp	.+30     	; 0x15a8 <temp_fn+0x174>
	_delay_ms(2000);

    while(1) {
        right();
        velocity(150,150);
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1590:	90 91 00 02 	lds	r25, 0x0200
    1594:	98 17       	cp	r25, r24
    1596:	a0 f3       	brcs	.-24     	; 0x1580 <temp_fn+0x14c>
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    159e:	90 91 00 02 	lds	r25, 0x0200
    15a2:	98 17       	cp	r25, r24
    15a4:	f0 f6       	brcc	.-68     	; 0x1562 <temp_fn+0x12e>
    15a6:	ec cf       	rjmp	.-40     	; 0x1580 <temp_fn+0x14c>
    }

    count = 2;

    while(count) {
        line_follow();
    15a8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    15b2:	90 91 00 02 	lds	r25, 0x0200
    15b6:	98 17       	cp	r25, r24
    15b8:	38 f0       	brcs	.+14     	; 0x15c8 <temp_fn+0x194>
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    15c0:	90 91 00 02 	lds	r25, 0x0200
    15c4:	98 17       	cp	r25, r24
    15c6:	b8 f4       	brcc	.+46     	; 0x15f6 <temp_fn+0x1c2>
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    15ce:	90 91 00 02 	lds	r25, 0x0200
    15d2:	98 17       	cp	r25, r24
    15d4:	80 f4       	brcc	.+32     	; 0x15f6 <temp_fn+0x1c2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    15d6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    15d8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    15da:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    15dc:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15de:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    15e2:	00 93 2a 01 	sts	0x012A, r16
    15e6:	80 e1       	ldi	r24, 0x10	; 16
    15e8:	97 e2       	ldi	r25, 0x27	; 39
    15ea:	fe 01       	movw	r30, r28
    15ec:	31 97       	sbiw	r30, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <temp_fn+0x1b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	d9 f7       	brne	.-10     	; 0x15ea <temp_fn+0x1b6>
    count = 2;

    while(count) {
        line_follow();
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
            count--;
    15f4:	11 50       	subi	r17, 0x01	; 1
            break;
    }

    count = 2;

    while(count) {
    15f6:	11 23       	and	r17, r17
    15f8:	b9 f6       	brne	.-82     	; 0x15a8 <temp_fn+0x174>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15fa:	64 e6       	ldi	r22, 0x64	; 100
    15fc:	f6 2e       	mov	r15, r22
    15fe:	c0 e7       	ldi	r28, 0x70	; 112
    1600:	d1 e0       	ldi	r29, 0x01	; 1
    1602:	06 e9       	ldi	r16, 0x96	; 150
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1604:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1606:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1608:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    160a:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    160c:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    1610:	f0 92 2a 01 	sts	0x012A, r15
    1614:	80 e1       	ldi	r24, 0x10	; 16
    1616:	97 e2       	ldi	r25, 0x27	; 39
    1618:	fe 01       	movw	r30, r28
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <temp_fn+0x1e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1620:	d9 f7       	brne	.-10     	; 0x1618 <temp_fn+0x1e4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1622:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1624:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1626:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1628:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    162a:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    162e:	00 93 2a 01 	sts	0x012A, r16
        _delay_ms(1000);

        while(1) {
            right();
            velocity(150,150);
            if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1638:	90 91 00 02 	lds	r25, 0x0200
    163c:	98 17       	cp	r25, r24
    163e:	70 f0       	brcs	.+28     	; 0x165c <temp_fn+0x228>
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1646:	90 91 00 02 	lds	r25, 0x0200
    164a:	98 17       	cp	r25, r24
    164c:	38 f0       	brcs	.+14     	; 0x165c <temp_fn+0x228>
    164e:	83 e0       	ldi	r24, 0x03	; 3
    1650:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    1654:	90 91 00 02 	lds	r25, 0x0200
    1658:	98 17       	cp	r25, r24
    165a:	18 f7       	brcc	.-58     	; 0x1622 <temp_fn+0x1ee>
            _delay_ms(1000);
        }
    }

    unsigned char i=0;
    for(i=0;i<2;i++) {
    165c:	1f 5f       	subi	r17, 0xFF	; 255
    165e:	12 30       	cpi	r17, 0x02	; 2
    1660:	89 f6       	brne	.-94     	; 0x1604 <temp_fn+0x1d0>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1662:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1664:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1666:	88 b9       	out	0x08, r24	; 8
    1668:	88 ee       	ldi	r24, 0xE8	; 232
    166a:	93 e0       	ldi	r25, 0x03	; 3
    166c:	20 e7       	ldi	r18, 0x70	; 112
    166e:	31 e0       	ldi	r19, 0x01	; 1
    1670:	f9 01       	movw	r30, r18
    1672:	31 97       	sbiw	r30, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <temp_fn+0x23e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1678:	d9 f7       	brne	.-10     	; 0x1670 <temp_fn+0x23c>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    167a:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    167c:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    167e:	88 b9       	out	0x08, r24	; 8
    1680:	88 ee       	ldi	r24, 0xE8	; 232
    1682:	93 e0       	ldi	r25, 0x03	; 3
    1684:	20 e7       	ldi	r18, 0x70	; 112
    1686:	31 e0       	ldi	r19, 0x01	; 1
    1688:	f9 01       	movw	r30, r18
    168a:	31 97       	sbiw	r30, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <temp_fn+0x256>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1690:	d9 f7       	brne	.-10     	; 0x1688 <temp_fn+0x254>
    1692:	11 e0       	ldi	r17, 0x01	; 1
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1694:	04 e6       	ldi	r16, 0x64	; 100
    1696:	c0 e7       	ldi	r28, 0x70	; 112
    1698:	d1 e0       	ldi	r29, 0x01	; 1
	//velocity(0,0);

    // S
    count = 1;
     while(count) {
        line_follow();
    169a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    16a4:	90 91 00 02 	lds	r25, 0x0200
    16a8:	98 17       	cp	r25, r24
    16aa:	38 f0       	brcs	.+14     	; 0x16ba <temp_fn+0x286>
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    16b2:	90 91 00 02 	lds	r25, 0x0200
    16b6:	98 17       	cp	r25, r24
    16b8:	b8 f4       	brcc	.+46     	; 0x16e8 <temp_fn+0x2b4>
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_Conversion>
    16c0:	90 91 00 02 	lds	r25, 0x0200
    16c4:	98 17       	cp	r25, r24
    16c6:	80 f4       	brcc	.+32     	; 0x16e8 <temp_fn+0x2b4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    16c8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    16ca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    16cc:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    16ce:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    16d0:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    16d4:	00 93 2a 01 	sts	0x012A, r16
    16d8:	80 e1       	ldi	r24, 0x10	; 16
    16da:	97 e2       	ldi	r25, 0x27	; 39
    16dc:	fe 01       	movw	r30, r28
    16de:	31 97       	sbiw	r30, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <temp_fn+0x2aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	d9 f7       	brne	.-10     	; 0x16dc <temp_fn+0x2a8>
    // S
    count = 1;
     while(count) {
        line_follow();
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
            count--;
    16e6:	11 50       	subi	r17, 0x01	; 1
    _delay_ms(100);
	//velocity(0,0);

    // S
    count = 1;
     while(count) {
    16e8:	11 23       	and	r17, r17
    16ea:	b9 f6       	brne	.-82     	; 0x169a <temp_fn+0x266>
    16ec:	1a e0       	ldi	r17, 0x0A	; 10
        }
    }

    count=10;
    while(count){
        line_follow();
    16ee:	0e 94 e7 03 	call	0x7ce	; 0x7ce <line_follow>
        count--;
    16f2:	11 50       	subi	r17, 0x01	; 1
            _delay_ms(1000);
        }
    }

    count=10;
    while(count){
    16f4:	e1 f7       	brne	.-8      	; 0x16ee <temp_fn+0x2ba>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    16f6:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    16fa:	10 92 2a 01 	sts	0x012A, r1
        count--;
    }

	velocity(0,0);

}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	08 95       	ret

0000170a <main>:


//Main Function
int main()
{
	init_devices();
    170a:	0e 94 21 05 	call	0xa42	; 0xa42 <init_devices>
	lcd_set_4bit();
    170e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    1712:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>

    temp_fn();
    1716:	0e 94 1a 0a 	call	0x1434	; 0x1434 <temp_fn>
	//traverse(1);
}
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	08 95       	ret

00001720 <__fixunssfsi>:
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	7b 01       	movw	r14, r22
    172a:	8c 01       	movw	r16, r24
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	5f e4       	ldi	r21, 0x4F	; 79
    1734:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__gesf2>
    1738:	88 23       	and	r24, r24
    173a:	8c f0       	brlt	.+34     	; 0x175e <__fixunssfsi+0x3e>
    173c:	c8 01       	movw	r24, r16
    173e:	b7 01       	movw	r22, r14
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	5f e4       	ldi	r21, 0x4F	; 79
    1748:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__subsf3>
    174c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixsfsi>
    1750:	9b 01       	movw	r18, r22
    1752:	ac 01       	movw	r20, r24
    1754:	20 50       	subi	r18, 0x00	; 0
    1756:	30 40       	sbci	r19, 0x00	; 0
    1758:	40 40       	sbci	r20, 0x00	; 0
    175a:	50 48       	sbci	r21, 0x80	; 128
    175c:	06 c0       	rjmp	.+12     	; 0x176a <__fixunssfsi+0x4a>
    175e:	c8 01       	movw	r24, r16
    1760:	b7 01       	movw	r22, r14
    1762:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixsfsi>
    1766:	9b 01       	movw	r18, r22
    1768:	ac 01       	movw	r20, r24
    176a:	b9 01       	movw	r22, r18
    176c:	ca 01       	movw	r24, r20
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	08 95       	ret

00001778 <_fpadd_parts>:
    1778:	a0 e0       	ldi	r26, 0x00	; 0
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e2 ec       	ldi	r30, 0xC2	; 194
    177e:	fb e0       	ldi	r31, 0x0B	; 11
    1780:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__prologue_saves__>
    1784:	dc 01       	movw	r26, r24
    1786:	2b 01       	movw	r4, r22
    1788:	fa 01       	movw	r30, r20
    178a:	9c 91       	ld	r25, X
    178c:	92 30       	cpi	r25, 0x02	; 2
    178e:	08 f4       	brcc	.+2      	; 0x1792 <_fpadd_parts+0x1a>
    1790:	39 c1       	rjmp	.+626    	; 0x1a04 <_fpadd_parts+0x28c>
    1792:	eb 01       	movw	r28, r22
    1794:	88 81       	ld	r24, Y
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	08 f4       	brcc	.+2      	; 0x179c <_fpadd_parts+0x24>
    179a:	33 c1       	rjmp	.+614    	; 0x1a02 <_fpadd_parts+0x28a>
    179c:	94 30       	cpi	r25, 0x04	; 4
    179e:	69 f4       	brne	.+26     	; 0x17ba <_fpadd_parts+0x42>
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <_fpadd_parts+0x2e>
    17a4:	2f c1       	rjmp	.+606    	; 0x1a04 <_fpadd_parts+0x28c>
    17a6:	11 96       	adiw	r26, 0x01	; 1
    17a8:	9c 91       	ld	r25, X
    17aa:	11 97       	sbiw	r26, 0x01	; 1
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	98 17       	cp	r25, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <_fpadd_parts+0x3c>
    17b2:	28 c1       	rjmp	.+592    	; 0x1a04 <_fpadd_parts+0x28c>
    17b4:	a1 e0       	ldi	r26, 0x01	; 1
    17b6:	b2 e0       	ldi	r27, 0x02	; 2
    17b8:	25 c1       	rjmp	.+586    	; 0x1a04 <_fpadd_parts+0x28c>
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <_fpadd_parts+0x48>
    17be:	21 c1       	rjmp	.+578    	; 0x1a02 <_fpadd_parts+0x28a>
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	a9 f4       	brne	.+42     	; 0x17ee <_fpadd_parts+0x76>
    17c4:	92 30       	cpi	r25, 0x02	; 2
    17c6:	09 f0       	breq	.+2      	; 0x17ca <_fpadd_parts+0x52>
    17c8:	1d c1       	rjmp	.+570    	; 0x1a04 <_fpadd_parts+0x28c>
    17ca:	9a 01       	movw	r18, r20
    17cc:	ad 01       	movw	r20, r26
    17ce:	88 e0       	ldi	r24, 0x08	; 8
    17d0:	ea 01       	movw	r28, r20
    17d2:	09 90       	ld	r0, Y+
    17d4:	ae 01       	movw	r20, r28
    17d6:	e9 01       	movw	r28, r18
    17d8:	09 92       	st	Y+, r0
    17da:	9e 01       	movw	r18, r28
    17dc:	81 50       	subi	r24, 0x01	; 1
    17de:	c1 f7       	brne	.-16     	; 0x17d0 <_fpadd_parts+0x58>
    17e0:	e2 01       	movw	r28, r4
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	11 96       	adiw	r26, 0x01	; 1
    17e6:	9c 91       	ld	r25, X
    17e8:	89 23       	and	r24, r25
    17ea:	81 83       	std	Z+1, r24	; 0x01
    17ec:	08 c1       	rjmp	.+528    	; 0x19fe <_fpadd_parts+0x286>
    17ee:	92 30       	cpi	r25, 0x02	; 2
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <_fpadd_parts+0x7c>
    17f2:	07 c1       	rjmp	.+526    	; 0x1a02 <_fpadd_parts+0x28a>
    17f4:	12 96       	adiw	r26, 0x02	; 2
    17f6:	2d 90       	ld	r2, X+
    17f8:	3c 90       	ld	r3, X
    17fa:	13 97       	sbiw	r26, 0x03	; 3
    17fc:	eb 01       	movw	r28, r22
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	9b 81       	ldd	r25, Y+3	; 0x03
    1802:	14 96       	adiw	r26, 0x04	; 4
    1804:	ad 90       	ld	r10, X+
    1806:	bd 90       	ld	r11, X+
    1808:	cd 90       	ld	r12, X+
    180a:	dc 90       	ld	r13, X
    180c:	17 97       	sbiw	r26, 0x07	; 7
    180e:	ec 80       	ldd	r14, Y+4	; 0x04
    1810:	fd 80       	ldd	r15, Y+5	; 0x05
    1812:	0e 81       	ldd	r16, Y+6	; 0x06
    1814:	1f 81       	ldd	r17, Y+7	; 0x07
    1816:	91 01       	movw	r18, r2
    1818:	28 1b       	sub	r18, r24
    181a:	39 0b       	sbc	r19, r25
    181c:	b9 01       	movw	r22, r18
    181e:	37 ff       	sbrs	r19, 7
    1820:	04 c0       	rjmp	.+8      	; 0x182a <_fpadd_parts+0xb2>
    1822:	66 27       	eor	r22, r22
    1824:	77 27       	eor	r23, r23
    1826:	62 1b       	sub	r22, r18
    1828:	73 0b       	sbc	r23, r19
    182a:	60 32       	cpi	r22, 0x20	; 32
    182c:	71 05       	cpc	r23, r1
    182e:	0c f0       	brlt	.+2      	; 0x1832 <_fpadd_parts+0xba>
    1830:	61 c0       	rjmp	.+194    	; 0x18f4 <_fpadd_parts+0x17c>
    1832:	12 16       	cp	r1, r18
    1834:	13 06       	cpc	r1, r19
    1836:	6c f5       	brge	.+90     	; 0x1892 <_fpadd_parts+0x11a>
    1838:	37 01       	movw	r6, r14
    183a:	48 01       	movw	r8, r16
    183c:	06 2e       	mov	r0, r22
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <_fpadd_parts+0xd0>
    1840:	96 94       	lsr	r9
    1842:	87 94       	ror	r8
    1844:	77 94       	ror	r7
    1846:	67 94       	ror	r6
    1848:	0a 94       	dec	r0
    184a:	d2 f7       	brpl	.-12     	; 0x1840 <_fpadd_parts+0xc8>
    184c:	21 e0       	ldi	r18, 0x01	; 1
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	04 c0       	rjmp	.+8      	; 0x185e <_fpadd_parts+0xe6>
    1856:	22 0f       	add	r18, r18
    1858:	33 1f       	adc	r19, r19
    185a:	44 1f       	adc	r20, r20
    185c:	55 1f       	adc	r21, r21
    185e:	6a 95       	dec	r22
    1860:	d2 f7       	brpl	.-12     	; 0x1856 <_fpadd_parts+0xde>
    1862:	21 50       	subi	r18, 0x01	; 1
    1864:	30 40       	sbci	r19, 0x00	; 0
    1866:	40 40       	sbci	r20, 0x00	; 0
    1868:	50 40       	sbci	r21, 0x00	; 0
    186a:	2e 21       	and	r18, r14
    186c:	3f 21       	and	r19, r15
    186e:	40 23       	and	r20, r16
    1870:	51 23       	and	r21, r17
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	41 05       	cpc	r20, r1
    1878:	51 05       	cpc	r21, r1
    187a:	21 f0       	breq	.+8      	; 0x1884 <_fpadd_parts+0x10c>
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	79 01       	movw	r14, r18
    1886:	8a 01       	movw	r16, r20
    1888:	e6 28       	or	r14, r6
    188a:	f7 28       	or	r15, r7
    188c:	08 29       	or	r16, r8
    188e:	19 29       	or	r17, r9
    1890:	3c c0       	rjmp	.+120    	; 0x190a <_fpadd_parts+0x192>
    1892:	23 2b       	or	r18, r19
    1894:	d1 f1       	breq	.+116    	; 0x190a <_fpadd_parts+0x192>
    1896:	26 0e       	add	r2, r22
    1898:	37 1e       	adc	r3, r23
    189a:	35 01       	movw	r6, r10
    189c:	46 01       	movw	r8, r12
    189e:	06 2e       	mov	r0, r22
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <_fpadd_parts+0x132>
    18a2:	96 94       	lsr	r9
    18a4:	87 94       	ror	r8
    18a6:	77 94       	ror	r7
    18a8:	67 94       	ror	r6
    18aa:	0a 94       	dec	r0
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <_fpadd_parts+0x12a>
    18ae:	21 e0       	ldi	r18, 0x01	; 1
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <_fpadd_parts+0x148>
    18b8:	22 0f       	add	r18, r18
    18ba:	33 1f       	adc	r19, r19
    18bc:	44 1f       	adc	r20, r20
    18be:	55 1f       	adc	r21, r21
    18c0:	6a 95       	dec	r22
    18c2:	d2 f7       	brpl	.-12     	; 0x18b8 <_fpadd_parts+0x140>
    18c4:	21 50       	subi	r18, 0x01	; 1
    18c6:	30 40       	sbci	r19, 0x00	; 0
    18c8:	40 40       	sbci	r20, 0x00	; 0
    18ca:	50 40       	sbci	r21, 0x00	; 0
    18cc:	2a 21       	and	r18, r10
    18ce:	3b 21       	and	r19, r11
    18d0:	4c 21       	and	r20, r12
    18d2:	5d 21       	and	r21, r13
    18d4:	21 15       	cp	r18, r1
    18d6:	31 05       	cpc	r19, r1
    18d8:	41 05       	cpc	r20, r1
    18da:	51 05       	cpc	r21, r1
    18dc:	21 f0       	breq	.+8      	; 0x18e6 <_fpadd_parts+0x16e>
    18de:	21 e0       	ldi	r18, 0x01	; 1
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	59 01       	movw	r10, r18
    18e8:	6a 01       	movw	r12, r20
    18ea:	a6 28       	or	r10, r6
    18ec:	b7 28       	or	r11, r7
    18ee:	c8 28       	or	r12, r8
    18f0:	d9 28       	or	r13, r9
    18f2:	0b c0       	rjmp	.+22     	; 0x190a <_fpadd_parts+0x192>
    18f4:	82 15       	cp	r24, r2
    18f6:	93 05       	cpc	r25, r3
    18f8:	2c f0       	brlt	.+10     	; 0x1904 <_fpadd_parts+0x18c>
    18fa:	1c 01       	movw	r2, r24
    18fc:	aa 24       	eor	r10, r10
    18fe:	bb 24       	eor	r11, r11
    1900:	65 01       	movw	r12, r10
    1902:	03 c0       	rjmp	.+6      	; 0x190a <_fpadd_parts+0x192>
    1904:	ee 24       	eor	r14, r14
    1906:	ff 24       	eor	r15, r15
    1908:	87 01       	movw	r16, r14
    190a:	11 96       	adiw	r26, 0x01	; 1
    190c:	9c 91       	ld	r25, X
    190e:	d2 01       	movw	r26, r4
    1910:	11 96       	adiw	r26, 0x01	; 1
    1912:	8c 91       	ld	r24, X
    1914:	98 17       	cp	r25, r24
    1916:	09 f4       	brne	.+2      	; 0x191a <_fpadd_parts+0x1a2>
    1918:	45 c0       	rjmp	.+138    	; 0x19a4 <_fpadd_parts+0x22c>
    191a:	99 23       	and	r25, r25
    191c:	39 f0       	breq	.+14     	; 0x192c <_fpadd_parts+0x1b4>
    191e:	a8 01       	movw	r20, r16
    1920:	97 01       	movw	r18, r14
    1922:	2a 19       	sub	r18, r10
    1924:	3b 09       	sbc	r19, r11
    1926:	4c 09       	sbc	r20, r12
    1928:	5d 09       	sbc	r21, r13
    192a:	06 c0       	rjmp	.+12     	; 0x1938 <_fpadd_parts+0x1c0>
    192c:	a6 01       	movw	r20, r12
    192e:	95 01       	movw	r18, r10
    1930:	2e 19       	sub	r18, r14
    1932:	3f 09       	sbc	r19, r15
    1934:	40 0b       	sbc	r20, r16
    1936:	51 0b       	sbc	r21, r17
    1938:	57 fd       	sbrc	r21, 7
    193a:	08 c0       	rjmp	.+16     	; 0x194c <_fpadd_parts+0x1d4>
    193c:	11 82       	std	Z+1, r1	; 0x01
    193e:	33 82       	std	Z+3, r3	; 0x03
    1940:	22 82       	std	Z+2, r2	; 0x02
    1942:	24 83       	std	Z+4, r18	; 0x04
    1944:	35 83       	std	Z+5, r19	; 0x05
    1946:	46 83       	std	Z+6, r20	; 0x06
    1948:	57 83       	std	Z+7, r21	; 0x07
    194a:	1d c0       	rjmp	.+58     	; 0x1986 <_fpadd_parts+0x20e>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	81 83       	std	Z+1, r24	; 0x01
    1950:	33 82       	std	Z+3, r3	; 0x03
    1952:	22 82       	std	Z+2, r2	; 0x02
    1954:	88 27       	eor	r24, r24
    1956:	99 27       	eor	r25, r25
    1958:	dc 01       	movw	r26, r24
    195a:	82 1b       	sub	r24, r18
    195c:	93 0b       	sbc	r25, r19
    195e:	a4 0b       	sbc	r26, r20
    1960:	b5 0b       	sbc	r27, r21
    1962:	84 83       	std	Z+4, r24	; 0x04
    1964:	95 83       	std	Z+5, r25	; 0x05
    1966:	a6 83       	std	Z+6, r26	; 0x06
    1968:	b7 83       	std	Z+7, r27	; 0x07
    196a:	0d c0       	rjmp	.+26     	; 0x1986 <_fpadd_parts+0x20e>
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	44 1f       	adc	r20, r20
    1972:	55 1f       	adc	r21, r21
    1974:	24 83       	std	Z+4, r18	; 0x04
    1976:	35 83       	std	Z+5, r19	; 0x05
    1978:	46 83       	std	Z+6, r20	; 0x06
    197a:	57 83       	std	Z+7, r21	; 0x07
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	93 83       	std	Z+3, r25	; 0x03
    1984:	82 83       	std	Z+2, r24	; 0x02
    1986:	24 81       	ldd	r18, Z+4	; 0x04
    1988:	35 81       	ldd	r19, Z+5	; 0x05
    198a:	46 81       	ldd	r20, Z+6	; 0x06
    198c:	57 81       	ldd	r21, Z+7	; 0x07
    198e:	da 01       	movw	r26, r20
    1990:	c9 01       	movw	r24, r18
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	a1 09       	sbc	r26, r1
    1996:	b1 09       	sbc	r27, r1
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	af 4f       	sbci	r26, 0xFF	; 255
    199e:	bf 43       	sbci	r27, 0x3F	; 63
    19a0:	28 f3       	brcs	.-54     	; 0x196c <_fpadd_parts+0x1f4>
    19a2:	0b c0       	rjmp	.+22     	; 0x19ba <_fpadd_parts+0x242>
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	33 82       	std	Z+3, r3	; 0x03
    19a8:	22 82       	std	Z+2, r2	; 0x02
    19aa:	ea 0c       	add	r14, r10
    19ac:	fb 1c       	adc	r15, r11
    19ae:	0c 1d       	adc	r16, r12
    19b0:	1d 1d       	adc	r17, r13
    19b2:	e4 82       	std	Z+4, r14	; 0x04
    19b4:	f5 82       	std	Z+5, r15	; 0x05
    19b6:	06 83       	std	Z+6, r16	; 0x06
    19b8:	17 83       	std	Z+7, r17	; 0x07
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	80 83       	st	Z, r24
    19be:	24 81       	ldd	r18, Z+4	; 0x04
    19c0:	35 81       	ldd	r19, Z+5	; 0x05
    19c2:	46 81       	ldd	r20, Z+6	; 0x06
    19c4:	57 81       	ldd	r21, Z+7	; 0x07
    19c6:	57 ff       	sbrs	r21, 7
    19c8:	1a c0       	rjmp	.+52     	; 0x19fe <_fpadd_parts+0x286>
    19ca:	c9 01       	movw	r24, r18
    19cc:	aa 27       	eor	r26, r26
    19ce:	97 fd       	sbrc	r25, 7
    19d0:	a0 95       	com	r26
    19d2:	ba 2f       	mov	r27, r26
    19d4:	81 70       	andi	r24, 0x01	; 1
    19d6:	90 70       	andi	r25, 0x00	; 0
    19d8:	a0 70       	andi	r26, 0x00	; 0
    19da:	b0 70       	andi	r27, 0x00	; 0
    19dc:	56 95       	lsr	r21
    19de:	47 95       	ror	r20
    19e0:	37 95       	ror	r19
    19e2:	27 95       	ror	r18
    19e4:	82 2b       	or	r24, r18
    19e6:	93 2b       	or	r25, r19
    19e8:	a4 2b       	or	r26, r20
    19ea:	b5 2b       	or	r27, r21
    19ec:	84 83       	std	Z+4, r24	; 0x04
    19ee:	95 83       	std	Z+5, r25	; 0x05
    19f0:	a6 83       	std	Z+6, r26	; 0x06
    19f2:	b7 83       	std	Z+7, r27	; 0x07
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	93 83       	std	Z+3, r25	; 0x03
    19fc:	82 83       	std	Z+2, r24	; 0x02
    19fe:	df 01       	movw	r26, r30
    1a00:	01 c0       	rjmp	.+2      	; 0x1a04 <_fpadd_parts+0x28c>
    1a02:	d2 01       	movw	r26, r4
    1a04:	cd 01       	movw	r24, r26
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	e2 e1       	ldi	r30, 0x12	; 18
    1a0c:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__epilogue_restores__>

00001a10 <__subsf3>:
    1a10:	a0 e2       	ldi	r26, 0x20	; 32
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	ee e0       	ldi	r30, 0x0E	; 14
    1a16:	fd e0       	ldi	r31, 0x0D	; 13
    1a18:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x18>
    1a1c:	69 83       	std	Y+1, r22	; 0x01
    1a1e:	7a 83       	std	Y+2, r23	; 0x02
    1a20:	8b 83       	std	Y+3, r24	; 0x03
    1a22:	9c 83       	std	Y+4, r25	; 0x04
    1a24:	2d 83       	std	Y+5, r18	; 0x05
    1a26:	3e 83       	std	Y+6, r19	; 0x06
    1a28:	4f 83       	std	Y+7, r20	; 0x07
    1a2a:	58 87       	std	Y+8, r21	; 0x08
    1a2c:	e9 e0       	ldi	r30, 0x09	; 9
    1a2e:	ee 2e       	mov	r14, r30
    1a30:	f1 2c       	mov	r15, r1
    1a32:	ec 0e       	add	r14, r28
    1a34:	fd 1e       	adc	r15, r29
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	b7 01       	movw	r22, r14
    1a3c:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1a40:	8e 01       	movw	r16, r28
    1a42:	0f 5e       	subi	r16, 0xEF	; 239
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	ce 01       	movw	r24, r28
    1a48:	05 96       	adiw	r24, 0x05	; 5
    1a4a:	b8 01       	movw	r22, r16
    1a4c:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1a50:	8a 89       	ldd	r24, Y+18	; 0x12
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	89 27       	eor	r24, r25
    1a56:	8a 8b       	std	Y+18, r24	; 0x12
    1a58:	c7 01       	movw	r24, r14
    1a5a:	b8 01       	movw	r22, r16
    1a5c:	ae 01       	movw	r20, r28
    1a5e:	47 5e       	subi	r20, 0xE7	; 231
    1a60:	5f 4f       	sbci	r21, 0xFF	; 255
    1a62:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_fpadd_parts>
    1a66:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__pack_f>
    1a6a:	a0 96       	adiw	r28, 0x20	; 32
    1a6c:	e6 e0       	ldi	r30, 0x06	; 6
    1a6e:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x18>

00001a72 <__addsf3>:
    1a72:	a0 e2       	ldi	r26, 0x20	; 32
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	ef e3       	ldi	r30, 0x3F	; 63
    1a78:	fd e0       	ldi	r31, 0x0D	; 13
    1a7a:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x18>
    1a7e:	69 83       	std	Y+1, r22	; 0x01
    1a80:	7a 83       	std	Y+2, r23	; 0x02
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	2d 83       	std	Y+5, r18	; 0x05
    1a88:	3e 83       	std	Y+6, r19	; 0x06
    1a8a:	4f 83       	std	Y+7, r20	; 0x07
    1a8c:	58 87       	std	Y+8, r21	; 0x08
    1a8e:	f9 e0       	ldi	r31, 0x09	; 9
    1a90:	ef 2e       	mov	r14, r31
    1a92:	f1 2c       	mov	r15, r1
    1a94:	ec 0e       	add	r14, r28
    1a96:	fd 1e       	adc	r15, r29
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	b7 01       	movw	r22, r14
    1a9e:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	0f 5e       	subi	r16, 0xEF	; 239
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	05 96       	adiw	r24, 0x05	; 5
    1aac:	b8 01       	movw	r22, r16
    1aae:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1ab2:	c7 01       	movw	r24, r14
    1ab4:	b8 01       	movw	r22, r16
    1ab6:	ae 01       	movw	r20, r28
    1ab8:	47 5e       	subi	r20, 0xE7	; 231
    1aba:	5f 4f       	sbci	r21, 0xFF	; 255
    1abc:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_fpadd_parts>
    1ac0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__pack_f>
    1ac4:	a0 96       	adiw	r28, 0x20	; 32
    1ac6:	e6 e0       	ldi	r30, 0x06	; 6
    1ac8:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x18>

00001acc <__divsf3>:
    1acc:	a8 e1       	ldi	r26, 0x18	; 24
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ec e6       	ldi	r30, 0x6C	; 108
    1ad2:	fd e0       	ldi	r31, 0x0D	; 13
    1ad4:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x10>
    1ad8:	69 83       	std	Y+1, r22	; 0x01
    1ada:	7a 83       	std	Y+2, r23	; 0x02
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	2d 83       	std	Y+5, r18	; 0x05
    1ae2:	3e 83       	std	Y+6, r19	; 0x06
    1ae4:	4f 83       	std	Y+7, r20	; 0x07
    1ae6:	58 87       	std	Y+8, r21	; 0x08
    1ae8:	b9 e0       	ldi	r27, 0x09	; 9
    1aea:	eb 2e       	mov	r14, r27
    1aec:	f1 2c       	mov	r15, r1
    1aee:	ec 0e       	add	r14, r28
    1af0:	fd 1e       	adc	r15, r29
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	b7 01       	movw	r22, r14
    1af8:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1afc:	8e 01       	movw	r16, r28
    1afe:	0f 5e       	subi	r16, 0xEF	; 239
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	ce 01       	movw	r24, r28
    1b04:	05 96       	adiw	r24, 0x05	; 5
    1b06:	b8 01       	movw	r22, r16
    1b08:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1b0c:	29 85       	ldd	r18, Y+9	; 0x09
    1b0e:	22 30       	cpi	r18, 0x02	; 2
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <__divsf3+0x48>
    1b12:	7e c0       	rjmp	.+252    	; 0x1c10 <__divsf3+0x144>
    1b14:	39 89       	ldd	r19, Y+17	; 0x11
    1b16:	32 30       	cpi	r19, 0x02	; 2
    1b18:	10 f4       	brcc	.+4      	; 0x1b1e <__divsf3+0x52>
    1b1a:	b8 01       	movw	r22, r16
    1b1c:	7c c0       	rjmp	.+248    	; 0x1c16 <__divsf3+0x14a>
    1b1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b20:	9a 89       	ldd	r25, Y+18	; 0x12
    1b22:	89 27       	eor	r24, r25
    1b24:	8a 87       	std	Y+10, r24	; 0x0a
    1b26:	24 30       	cpi	r18, 0x04	; 4
    1b28:	11 f0       	breq	.+4      	; 0x1b2e <__divsf3+0x62>
    1b2a:	22 30       	cpi	r18, 0x02	; 2
    1b2c:	31 f4       	brne	.+12     	; 0x1b3a <__divsf3+0x6e>
    1b2e:	23 17       	cp	r18, r19
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <__divsf3+0x68>
    1b32:	6e c0       	rjmp	.+220    	; 0x1c10 <__divsf3+0x144>
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	72 e0       	ldi	r23, 0x02	; 2
    1b38:	6e c0       	rjmp	.+220    	; 0x1c16 <__divsf3+0x14a>
    1b3a:	34 30       	cpi	r19, 0x04	; 4
    1b3c:	39 f4       	brne	.+14     	; 0x1b4c <__divsf3+0x80>
    1b3e:	1d 86       	std	Y+13, r1	; 0x0d
    1b40:	1e 86       	std	Y+14, r1	; 0x0e
    1b42:	1f 86       	std	Y+15, r1	; 0x0f
    1b44:	18 8a       	std	Y+16, r1	; 0x10
    1b46:	1c 86       	std	Y+12, r1	; 0x0c
    1b48:	1b 86       	std	Y+11, r1	; 0x0b
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <__divsf3+0x88>
    1b4c:	32 30       	cpi	r19, 0x02	; 2
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <__divsf3+0x8c>
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	89 87       	std	Y+9, r24	; 0x09
    1b54:	b7 01       	movw	r22, r14
    1b56:	5f c0       	rjmp	.+190    	; 0x1c16 <__divsf3+0x14a>
    1b58:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b5a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b60:	28 1b       	sub	r18, r24
    1b62:	39 0b       	sbc	r19, r25
    1b64:	3c 87       	std	Y+12, r19	; 0x0c
    1b66:	2b 87       	std	Y+11, r18	; 0x0b
    1b68:	ed 84       	ldd	r14, Y+13	; 0x0d
    1b6a:	fe 84       	ldd	r15, Y+14	; 0x0e
    1b6c:	0f 85       	ldd	r16, Y+15	; 0x0f
    1b6e:	18 89       	ldd	r17, Y+16	; 0x10
    1b70:	ad 88       	ldd	r10, Y+21	; 0x15
    1b72:	be 88       	ldd	r11, Y+22	; 0x16
    1b74:	cf 88       	ldd	r12, Y+23	; 0x17
    1b76:	d8 8c       	ldd	r13, Y+24	; 0x18
    1b78:	ea 14       	cp	r14, r10
    1b7a:	fb 04       	cpc	r15, r11
    1b7c:	0c 05       	cpc	r16, r12
    1b7e:	1d 05       	cpc	r17, r13
    1b80:	40 f4       	brcc	.+16     	; 0x1b92 <__divsf3+0xc6>
    1b82:	ee 0c       	add	r14, r14
    1b84:	ff 1c       	adc	r15, r15
    1b86:	00 1f       	adc	r16, r16
    1b88:	11 1f       	adc	r17, r17
    1b8a:	21 50       	subi	r18, 0x01	; 1
    1b8c:	30 40       	sbci	r19, 0x00	; 0
    1b8e:	3c 87       	std	Y+12, r19	; 0x0c
    1b90:	2b 87       	std	Y+11, r18	; 0x0b
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ba0:	b0 e4       	ldi	r27, 0x40	; 64
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	ea 14       	cp	r14, r10
    1ba8:	fb 04       	cpc	r15, r11
    1baa:	0c 05       	cpc	r16, r12
    1bac:	1d 05       	cpc	r17, r13
    1bae:	40 f0       	brcs	.+16     	; 0x1bc0 <__divsf3+0xf4>
    1bb0:	28 2b       	or	r18, r24
    1bb2:	39 2b       	or	r19, r25
    1bb4:	4a 2b       	or	r20, r26
    1bb6:	5b 2b       	or	r21, r27
    1bb8:	ea 18       	sub	r14, r10
    1bba:	fb 08       	sbc	r15, r11
    1bbc:	0c 09       	sbc	r16, r12
    1bbe:	1d 09       	sbc	r17, r13
    1bc0:	b6 95       	lsr	r27
    1bc2:	a7 95       	ror	r26
    1bc4:	97 95       	ror	r25
    1bc6:	87 95       	ror	r24
    1bc8:	ee 0c       	add	r14, r14
    1bca:	ff 1c       	adc	r15, r15
    1bcc:	00 1f       	adc	r16, r16
    1bce:	11 1f       	adc	r17, r17
    1bd0:	6f 5f       	subi	r22, 0xFF	; 255
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd4:	6f 31       	cpi	r22, 0x1F	; 31
    1bd6:	71 05       	cpc	r23, r1
    1bd8:	31 f7       	brne	.-52     	; 0x1ba6 <__divsf3+0xda>
    1bda:	da 01       	movw	r26, r20
    1bdc:	c9 01       	movw	r24, r18
    1bde:	8f 77       	andi	r24, 0x7F	; 127
    1be0:	90 70       	andi	r25, 0x00	; 0
    1be2:	a0 70       	andi	r26, 0x00	; 0
    1be4:	b0 70       	andi	r27, 0x00	; 0
    1be6:	80 34       	cpi	r24, 0x40	; 64
    1be8:	91 05       	cpc	r25, r1
    1bea:	a1 05       	cpc	r26, r1
    1bec:	b1 05       	cpc	r27, r1
    1bee:	61 f4       	brne	.+24     	; 0x1c08 <__divsf3+0x13c>
    1bf0:	27 fd       	sbrc	r18, 7
    1bf2:	0a c0       	rjmp	.+20     	; 0x1c08 <__divsf3+0x13c>
    1bf4:	e1 14       	cp	r14, r1
    1bf6:	f1 04       	cpc	r15, r1
    1bf8:	01 05       	cpc	r16, r1
    1bfa:	11 05       	cpc	r17, r1
    1bfc:	29 f0       	breq	.+10     	; 0x1c08 <__divsf3+0x13c>
    1bfe:	20 5c       	subi	r18, 0xC0	; 192
    1c00:	3f 4f       	sbci	r19, 0xFF	; 255
    1c02:	4f 4f       	sbci	r20, 0xFF	; 255
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	20 78       	andi	r18, 0x80	; 128
    1c08:	2d 87       	std	Y+13, r18	; 0x0d
    1c0a:	3e 87       	std	Y+14, r19	; 0x0e
    1c0c:	4f 87       	std	Y+15, r20	; 0x0f
    1c0e:	58 8b       	std	Y+16, r21	; 0x10
    1c10:	be 01       	movw	r22, r28
    1c12:	67 5f       	subi	r22, 0xF7	; 247
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	cb 01       	movw	r24, r22
    1c18:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__pack_f>
    1c1c:	68 96       	adiw	r28, 0x18	; 24
    1c1e:	ea e0       	ldi	r30, 0x0A	; 10
    1c20:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x10>

00001c24 <__gesf2>:
    1c24:	a8 e1       	ldi	r26, 0x18	; 24
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e1       	ldi	r30, 0x18	; 24
    1c2a:	fe e0       	ldi	r31, 0x0E	; 14
    1c2c:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x18>
    1c30:	69 83       	std	Y+1, r22	; 0x01
    1c32:	7a 83       	std	Y+2, r23	; 0x02
    1c34:	8b 83       	std	Y+3, r24	; 0x03
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	2d 83       	std	Y+5, r18	; 0x05
    1c3a:	3e 83       	std	Y+6, r19	; 0x06
    1c3c:	4f 83       	std	Y+7, r20	; 0x07
    1c3e:	58 87       	std	Y+8, r21	; 0x08
    1c40:	89 e0       	ldi	r24, 0x09	; 9
    1c42:	e8 2e       	mov	r14, r24
    1c44:	f1 2c       	mov	r15, r1
    1c46:	ec 0e       	add	r14, r28
    1c48:	fd 1e       	adc	r15, r29
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	b7 01       	movw	r22, r14
    1c50:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1c54:	8e 01       	movw	r16, r28
    1c56:	0f 5e       	subi	r16, 0xEF	; 239
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	05 96       	adiw	r24, 0x05	; 5
    1c5e:	b8 01       	movw	r22, r16
    1c60:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	40 f0       	brcs	.+16     	; 0x1c7a <__gesf2+0x56>
    1c6a:	89 89       	ldd	r24, Y+17	; 0x11
    1c6c:	82 30       	cpi	r24, 0x02	; 2
    1c6e:	28 f0       	brcs	.+10     	; 0x1c7a <__gesf2+0x56>
    1c70:	c7 01       	movw	r24, r14
    1c72:	b8 01       	movw	r22, r16
    1c74:	0e 94 ab 10 	call	0x2156	; 0x2156 <__fpcmp_parts_f>
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <__gesf2+0x58>
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	68 96       	adiw	r28, 0x18	; 24
    1c7e:	e6 e0       	ldi	r30, 0x06	; 6
    1c80:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x18>

00001c84 <__fixsfsi>:
    1c84:	ac e0       	ldi	r26, 0x0C	; 12
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e8 e4       	ldi	r30, 0x48	; 72
    1c8a:	fe e0       	ldi	r31, 0x0E	; 14
    1c8c:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__prologue_saves__+0x20>
    1c90:	69 83       	std	Y+1, r22	; 0x01
    1c92:	7a 83       	std	Y+2, r23	; 0x02
    1c94:	8b 83       	std	Y+3, r24	; 0x03
    1c96:	9c 83       	std	Y+4, r25	; 0x04
    1c98:	ce 01       	movw	r24, r28
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	be 01       	movw	r22, r28
    1c9e:	6b 5f       	subi	r22, 0xFB	; 251
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	61 f1       	breq	.+88     	; 0x1d04 <__fixsfsi+0x80>
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	50 f1       	brcs	.+84     	; 0x1d04 <__fixsfsi+0x80>
    1cb0:	84 30       	cpi	r24, 0x04	; 4
    1cb2:	21 f4       	brne	.+8      	; 0x1cbc <__fixsfsi+0x38>
    1cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb6:	88 23       	and	r24, r24
    1cb8:	51 f1       	breq	.+84     	; 0x1d0e <__fixsfsi+0x8a>
    1cba:	2e c0       	rjmp	.+92     	; 0x1d18 <__fixsfsi+0x94>
    1cbc:	2f 81       	ldd	r18, Y+7	; 0x07
    1cbe:	38 85       	ldd	r19, Y+8	; 0x08
    1cc0:	37 fd       	sbrc	r19, 7
    1cc2:	20 c0       	rjmp	.+64     	; 0x1d04 <__fixsfsi+0x80>
    1cc4:	6e 81       	ldd	r22, Y+6	; 0x06
    1cc6:	2f 31       	cpi	r18, 0x1F	; 31
    1cc8:	31 05       	cpc	r19, r1
    1cca:	1c f0       	brlt	.+6      	; 0x1cd2 <__fixsfsi+0x4e>
    1ccc:	66 23       	and	r22, r22
    1cce:	f9 f0       	breq	.+62     	; 0x1d0e <__fixsfsi+0x8a>
    1cd0:	23 c0       	rjmp	.+70     	; 0x1d18 <__fixsfsi+0x94>
    1cd2:	8e e1       	ldi	r24, 0x1E	; 30
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	82 1b       	sub	r24, r18
    1cd8:	93 0b       	sbc	r25, r19
    1cda:	29 85       	ldd	r18, Y+9	; 0x09
    1cdc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cde:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ce0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <__fixsfsi+0x68>
    1ce4:	56 95       	lsr	r21
    1ce6:	47 95       	ror	r20
    1ce8:	37 95       	ror	r19
    1cea:	27 95       	ror	r18
    1cec:	8a 95       	dec	r24
    1cee:	d2 f7       	brpl	.-12     	; 0x1ce4 <__fixsfsi+0x60>
    1cf0:	66 23       	and	r22, r22
    1cf2:	b1 f0       	breq	.+44     	; 0x1d20 <__fixsfsi+0x9c>
    1cf4:	50 95       	com	r21
    1cf6:	40 95       	com	r20
    1cf8:	30 95       	com	r19
    1cfa:	21 95       	neg	r18
    1cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfe:	4f 4f       	sbci	r20, 0xFF	; 255
    1d00:	5f 4f       	sbci	r21, 0xFF	; 255
    1d02:	0e c0       	rjmp	.+28     	; 0x1d20 <__fixsfsi+0x9c>
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	09 c0       	rjmp	.+18     	; 0x1d20 <__fixsfsi+0x9c>
    1d0e:	2f ef       	ldi	r18, 0xFF	; 255
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f ef       	ldi	r20, 0xFF	; 255
    1d14:	5f e7       	ldi	r21, 0x7F	; 127
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <__fixsfsi+0x9c>
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e8       	ldi	r21, 0x80	; 128
    1d20:	b9 01       	movw	r22, r18
    1d22:	ca 01       	movw	r24, r20
    1d24:	2c 96       	adiw	r28, 0x0c	; 12
    1d26:	e2 e0       	ldi	r30, 0x02	; 2
    1d28:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__epilogue_restores__+0x20>

00001d2c <__floatunsisf>:
    1d2c:	a8 e0       	ldi	r26, 0x08	; 8
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	ec e9       	ldi	r30, 0x9C	; 156
    1d32:	fe e0       	ldi	r31, 0x0E	; 14
    1d34:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x10>
    1d38:	7b 01       	movw	r14, r22
    1d3a:	8c 01       	movw	r16, r24
    1d3c:	61 15       	cp	r22, r1
    1d3e:	71 05       	cpc	r23, r1
    1d40:	81 05       	cpc	r24, r1
    1d42:	91 05       	cpc	r25, r1
    1d44:	19 f4       	brne	.+6      	; 0x1d4c <__floatunsisf+0x20>
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	60 c0       	rjmp	.+192    	; 0x1e0c <__floatunsisf+0xe0>
    1d4c:	83 e0       	ldi	r24, 0x03	; 3
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	8e e1       	ldi	r24, 0x1E	; 30
    1d52:	c8 2e       	mov	r12, r24
    1d54:	d1 2c       	mov	r13, r1
    1d56:	dc 82       	std	Y+4, r13	; 0x04
    1d58:	cb 82       	std	Y+3, r12	; 0x03
    1d5a:	ed 82       	std	Y+5, r14	; 0x05
    1d5c:	fe 82       	std	Y+6, r15	; 0x06
    1d5e:	0f 83       	std	Y+7, r16	; 0x07
    1d60:	18 87       	std	Y+8, r17	; 0x08
    1d62:	c8 01       	movw	r24, r16
    1d64:	b7 01       	movw	r22, r14
    1d66:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__clzsi2>
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	31 97       	sbiw	r30, 0x01	; 1
    1d6e:	f7 ff       	sbrs	r31, 7
    1d70:	3b c0       	rjmp	.+118    	; 0x1de8 <__floatunsisf+0xbc>
    1d72:	22 27       	eor	r18, r18
    1d74:	33 27       	eor	r19, r19
    1d76:	2e 1b       	sub	r18, r30
    1d78:	3f 0b       	sbc	r19, r31
    1d7a:	57 01       	movw	r10, r14
    1d7c:	68 01       	movw	r12, r16
    1d7e:	02 2e       	mov	r0, r18
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <__floatunsisf+0x5e>
    1d82:	d6 94       	lsr	r13
    1d84:	c7 94       	ror	r12
    1d86:	b7 94       	ror	r11
    1d88:	a7 94       	ror	r10
    1d8a:	0a 94       	dec	r0
    1d8c:	d2 f7       	brpl	.-12     	; 0x1d82 <__floatunsisf+0x56>
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a0 e0       	ldi	r26, 0x00	; 0
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <__floatunsisf+0x7c>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	aa 1f       	adc	r26, r26
    1da6:	bb 1f       	adc	r27, r27
    1da8:	2a 95       	dec	r18
    1daa:	d2 f7       	brpl	.-12     	; 0x1da0 <__floatunsisf+0x74>
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	a1 09       	sbc	r26, r1
    1db0:	b1 09       	sbc	r27, r1
    1db2:	8e 21       	and	r24, r14
    1db4:	9f 21       	and	r25, r15
    1db6:	a0 23       	and	r26, r16
    1db8:	b1 23       	and	r27, r17
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	a1 05       	cpc	r26, r1
    1dbe:	b1 05       	cpc	r27, r1
    1dc0:	21 f0       	breq	.+8      	; 0x1dca <__floatunsisf+0x9e>
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	4a 29       	or	r20, r10
    1dcc:	5b 29       	or	r21, r11
    1dce:	6c 29       	or	r22, r12
    1dd0:	7d 29       	or	r23, r13
    1dd2:	4d 83       	std	Y+5, r20	; 0x05
    1dd4:	5e 83       	std	Y+6, r21	; 0x06
    1dd6:	6f 83       	std	Y+7, r22	; 0x07
    1dd8:	78 87       	std	Y+8, r23	; 0x08
    1dda:	8e e1       	ldi	r24, 0x1E	; 30
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	8e 1b       	sub	r24, r30
    1de0:	9f 0b       	sbc	r25, r31
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	8b 83       	std	Y+3, r24	; 0x03
    1de6:	12 c0       	rjmp	.+36     	; 0x1e0c <__floatunsisf+0xe0>
    1de8:	30 97       	sbiw	r30, 0x00	; 0
    1dea:	81 f0       	breq	.+32     	; 0x1e0c <__floatunsisf+0xe0>
    1dec:	0e 2e       	mov	r0, r30
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <__floatunsisf+0xcc>
    1df0:	ee 0c       	add	r14, r14
    1df2:	ff 1c       	adc	r15, r15
    1df4:	00 1f       	adc	r16, r16
    1df6:	11 1f       	adc	r17, r17
    1df8:	0a 94       	dec	r0
    1dfa:	d2 f7       	brpl	.-12     	; 0x1df0 <__floatunsisf+0xc4>
    1dfc:	ed 82       	std	Y+5, r14	; 0x05
    1dfe:	fe 82       	std	Y+6, r15	; 0x06
    1e00:	0f 83       	std	Y+7, r16	; 0x07
    1e02:	18 87       	std	Y+8, r17	; 0x08
    1e04:	ce 1a       	sub	r12, r30
    1e06:	df 0a       	sbc	r13, r31
    1e08:	dc 82       	std	Y+4, r13	; 0x04
    1e0a:	cb 82       	std	Y+3, r12	; 0x03
    1e0c:	1a 82       	std	Y+2, r1	; 0x02
    1e0e:	ce 01       	movw	r24, r28
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__pack_f>
    1e16:	28 96       	adiw	r28, 0x08	; 8
    1e18:	ea e0       	ldi	r30, 0x0A	; 10
    1e1a:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x10>

00001e1e <__clzsi2>:
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	7b 01       	movw	r14, r22
    1e28:	8c 01       	movw	r16, r24
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	e8 16       	cp	r14, r24
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	f8 06       	cpc	r15, r24
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	08 07       	cpc	r16, r24
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	18 07       	cpc	r17, r24
    1e3a:	88 f4       	brcc	.+34     	; 0x1e5e <__clzsi2+0x40>
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	e8 16       	cp	r14, r24
    1e40:	f1 04       	cpc	r15, r1
    1e42:	01 05       	cpc	r16, r1
    1e44:	11 05       	cpc	r17, r1
    1e46:	31 f0       	breq	.+12     	; 0x1e54 <__clzsi2+0x36>
    1e48:	28 f0       	brcs	.+10     	; 0x1e54 <__clzsi2+0x36>
    1e4a:	88 e0       	ldi	r24, 0x08	; 8
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e0       	ldi	r26, 0x00	; 0
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	17 c0       	rjmp	.+46     	; 0x1e82 <__clzsi2+0x64>
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e0       	ldi	r26, 0x00	; 0
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	12 c0       	rjmp	.+36     	; 0x1e82 <__clzsi2+0x64>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	e8 16       	cp	r14, r24
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	f8 06       	cpc	r15, r24
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	08 07       	cpc	r16, r24
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	18 07       	cpc	r17, r24
    1e6e:	28 f0       	brcs	.+10     	; 0x1e7a <__clzsi2+0x5c>
    1e70:	88 e1       	ldi	r24, 0x18	; 24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e0       	ldi	r26, 0x00	; 0
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <__clzsi2+0x64>
    1e7a:	80 e1       	ldi	r24, 0x10	; 16
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e0       	ldi	r26, 0x00	; 0
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	20 e2       	ldi	r18, 0x20	; 32
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	28 1b       	sub	r18, r24
    1e8c:	39 0b       	sbc	r19, r25
    1e8e:	4a 0b       	sbc	r20, r26
    1e90:	5b 0b       	sbc	r21, r27
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <__clzsi2+0x7e>
    1e94:	16 95       	lsr	r17
    1e96:	07 95       	ror	r16
    1e98:	f7 94       	ror	r15
    1e9a:	e7 94       	ror	r14
    1e9c:	8a 95       	dec	r24
    1e9e:	d2 f7       	brpl	.-12     	; 0x1e94 <__clzsi2+0x76>
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	e7 5f       	subi	r30, 0xF7	; 247
    1ea4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea6:	80 81       	ld	r24, Z
    1ea8:	28 1b       	sub	r18, r24
    1eaa:	31 09       	sbc	r19, r1
    1eac:	41 09       	sbc	r20, r1
    1eae:	51 09       	sbc	r21, r1
    1eb0:	c9 01       	movw	r24, r18
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	08 95       	ret

00001ebc <__pack_f>:
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	e4 80       	ldd	r14, Z+4	; 0x04
    1eca:	f5 80       	ldd	r15, Z+5	; 0x05
    1ecc:	06 81       	ldd	r16, Z+6	; 0x06
    1ece:	17 81       	ldd	r17, Z+7	; 0x07
    1ed0:	d1 80       	ldd	r13, Z+1	; 0x01
    1ed2:	80 81       	ld	r24, Z
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	48 f4       	brcc	.+18     	; 0x1eea <__pack_f+0x2e>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e1       	ldi	r26, 0x10	; 16
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e8 2a       	or	r14, r24
    1ee2:	f9 2a       	or	r15, r25
    1ee4:	0a 2b       	or	r16, r26
    1ee6:	1b 2b       	or	r17, r27
    1ee8:	a5 c0       	rjmp	.+330    	; 0x2034 <__pack_f+0x178>
    1eea:	84 30       	cpi	r24, 0x04	; 4
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__pack_f+0x34>
    1eee:	9f c0       	rjmp	.+318    	; 0x202e <__pack_f+0x172>
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <__pack_f+0x40>
    1ef4:	ee 24       	eor	r14, r14
    1ef6:	ff 24       	eor	r15, r15
    1ef8:	87 01       	movw	r16, r14
    1efa:	05 c0       	rjmp	.+10     	; 0x1f06 <__pack_f+0x4a>
    1efc:	e1 14       	cp	r14, r1
    1efe:	f1 04       	cpc	r15, r1
    1f00:	01 05       	cpc	r16, r1
    1f02:	11 05       	cpc	r17, r1
    1f04:	19 f4       	brne	.+6      	; 0x1f0c <__pack_f+0x50>
    1f06:	e0 e0       	ldi	r30, 0x00	; 0
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	96 c0       	rjmp	.+300    	; 0x2038 <__pack_f+0x17c>
    1f0c:	62 81       	ldd	r22, Z+2	; 0x02
    1f0e:	73 81       	ldd	r23, Z+3	; 0x03
    1f10:	9f ef       	ldi	r25, 0xFF	; 255
    1f12:	62 38       	cpi	r22, 0x82	; 130
    1f14:	79 07       	cpc	r23, r25
    1f16:	0c f0       	brlt	.+2      	; 0x1f1a <__pack_f+0x5e>
    1f18:	5b c0       	rjmp	.+182    	; 0x1fd0 <__pack_f+0x114>
    1f1a:	22 e8       	ldi	r18, 0x82	; 130
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	26 1b       	sub	r18, r22
    1f20:	37 0b       	sbc	r19, r23
    1f22:	2a 31       	cpi	r18, 0x1A	; 26
    1f24:	31 05       	cpc	r19, r1
    1f26:	2c f0       	brlt	.+10     	; 0x1f32 <__pack_f+0x76>
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	2a c0       	rjmp	.+84     	; 0x1f86 <__pack_f+0xca>
    1f32:	b8 01       	movw	r22, r16
    1f34:	a7 01       	movw	r20, r14
    1f36:	02 2e       	mov	r0, r18
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <__pack_f+0x86>
    1f3a:	76 95       	lsr	r23
    1f3c:	67 95       	ror	r22
    1f3e:	57 95       	ror	r21
    1f40:	47 95       	ror	r20
    1f42:	0a 94       	dec	r0
    1f44:	d2 f7       	brpl	.-12     	; 0x1f3a <__pack_f+0x7e>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e0       	ldi	r26, 0x00	; 0
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	04 c0       	rjmp	.+8      	; 0x1f58 <__pack_f+0x9c>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	aa 1f       	adc	r26, r26
    1f56:	bb 1f       	adc	r27, r27
    1f58:	2a 95       	dec	r18
    1f5a:	d2 f7       	brpl	.-12     	; 0x1f50 <__pack_f+0x94>
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	a1 09       	sbc	r26, r1
    1f60:	b1 09       	sbc	r27, r1
    1f62:	8e 21       	and	r24, r14
    1f64:	9f 21       	and	r25, r15
    1f66:	a0 23       	and	r26, r16
    1f68:	b1 23       	and	r27, r17
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	a1 05       	cpc	r26, r1
    1f6e:	b1 05       	cpc	r27, r1
    1f70:	21 f0       	breq	.+8      	; 0x1f7a <__pack_f+0xbe>
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	a0 e0       	ldi	r26, 0x00	; 0
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	9a 01       	movw	r18, r20
    1f7c:	ab 01       	movw	r20, r22
    1f7e:	28 2b       	or	r18, r24
    1f80:	39 2b       	or	r19, r25
    1f82:	4a 2b       	or	r20, r26
    1f84:	5b 2b       	or	r21, r27
    1f86:	da 01       	movw	r26, r20
    1f88:	c9 01       	movw	r24, r18
    1f8a:	8f 77       	andi	r24, 0x7F	; 127
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	a0 70       	andi	r26, 0x00	; 0
    1f90:	b0 70       	andi	r27, 0x00	; 0
    1f92:	80 34       	cpi	r24, 0x40	; 64
    1f94:	91 05       	cpc	r25, r1
    1f96:	a1 05       	cpc	r26, r1
    1f98:	b1 05       	cpc	r27, r1
    1f9a:	39 f4       	brne	.+14     	; 0x1faa <__pack_f+0xee>
    1f9c:	27 ff       	sbrs	r18, 7
    1f9e:	09 c0       	rjmp	.+18     	; 0x1fb2 <__pack_f+0xf6>
    1fa0:	20 5c       	subi	r18, 0xC0	; 192
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	4f 4f       	sbci	r20, 0xFF	; 255
    1fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa8:	04 c0       	rjmp	.+8      	; 0x1fb2 <__pack_f+0xf6>
    1faa:	21 5c       	subi	r18, 0xC1	; 193
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	4f 4f       	sbci	r20, 0xFF	; 255
    1fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	20 30       	cpi	r18, 0x00	; 0
    1fb8:	a0 e0       	ldi	r26, 0x00	; 0
    1fba:	3a 07       	cpc	r19, r26
    1fbc:	a0 e0       	ldi	r26, 0x00	; 0
    1fbe:	4a 07       	cpc	r20, r26
    1fc0:	a0 e4       	ldi	r26, 0x40	; 64
    1fc2:	5a 07       	cpc	r21, r26
    1fc4:	10 f0       	brcs	.+4      	; 0x1fca <__pack_f+0x10e>
    1fc6:	e1 e0       	ldi	r30, 0x01	; 1
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	79 01       	movw	r14, r18
    1fcc:	8a 01       	movw	r16, r20
    1fce:	27 c0       	rjmp	.+78     	; 0x201e <__pack_f+0x162>
    1fd0:	60 38       	cpi	r22, 0x80	; 128
    1fd2:	71 05       	cpc	r23, r1
    1fd4:	64 f5       	brge	.+88     	; 0x202e <__pack_f+0x172>
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	e1 58       	subi	r30, 0x81	; 129
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	d8 01       	movw	r26, r16
    1fde:	c7 01       	movw	r24, r14
    1fe0:	8f 77       	andi	r24, 0x7F	; 127
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	a0 70       	andi	r26, 0x00	; 0
    1fe6:	b0 70       	andi	r27, 0x00	; 0
    1fe8:	80 34       	cpi	r24, 0x40	; 64
    1fea:	91 05       	cpc	r25, r1
    1fec:	a1 05       	cpc	r26, r1
    1fee:	b1 05       	cpc	r27, r1
    1ff0:	39 f4       	brne	.+14     	; 0x2000 <__pack_f+0x144>
    1ff2:	e7 fe       	sbrs	r14, 7
    1ff4:	0d c0       	rjmp	.+26     	; 0x2010 <__pack_f+0x154>
    1ff6:	80 e4       	ldi	r24, 0x40	; 64
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a0 e0       	ldi	r26, 0x00	; 0
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <__pack_f+0x14c>
    2000:	8f e3       	ldi	r24, 0x3F	; 63
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 e0       	ldi	r26, 0x00	; 0
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e8 0e       	add	r14, r24
    200a:	f9 1e       	adc	r15, r25
    200c:	0a 1f       	adc	r16, r26
    200e:	1b 1f       	adc	r17, r27
    2010:	17 ff       	sbrs	r17, 7
    2012:	05 c0       	rjmp	.+10     	; 0x201e <__pack_f+0x162>
    2014:	16 95       	lsr	r17
    2016:	07 95       	ror	r16
    2018:	f7 94       	ror	r15
    201a:	e7 94       	ror	r14
    201c:	31 96       	adiw	r30, 0x01	; 1
    201e:	87 e0       	ldi	r24, 0x07	; 7
    2020:	16 95       	lsr	r17
    2022:	07 95       	ror	r16
    2024:	f7 94       	ror	r15
    2026:	e7 94       	ror	r14
    2028:	8a 95       	dec	r24
    202a:	d1 f7       	brne	.-12     	; 0x2020 <__pack_f+0x164>
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <__pack_f+0x17c>
    202e:	ee 24       	eor	r14, r14
    2030:	ff 24       	eor	r15, r15
    2032:	87 01       	movw	r16, r14
    2034:	ef ef       	ldi	r30, 0xFF	; 255
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	6e 2f       	mov	r22, r30
    203a:	67 95       	ror	r22
    203c:	66 27       	eor	r22, r22
    203e:	67 95       	ror	r22
    2040:	90 2f       	mov	r25, r16
    2042:	9f 77       	andi	r25, 0x7F	; 127
    2044:	d7 94       	ror	r13
    2046:	dd 24       	eor	r13, r13
    2048:	d7 94       	ror	r13
    204a:	8e 2f       	mov	r24, r30
    204c:	86 95       	lsr	r24
    204e:	49 2f       	mov	r20, r25
    2050:	46 2b       	or	r20, r22
    2052:	58 2f       	mov	r21, r24
    2054:	5d 29       	or	r21, r13
    2056:	b7 01       	movw	r22, r14
    2058:	ca 01       	movw	r24, r20
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	08 95       	ret

00002066 <__unpack_f>:
    2066:	fc 01       	movw	r30, r24
    2068:	db 01       	movw	r26, r22
    206a:	40 81       	ld	r20, Z
    206c:	51 81       	ldd	r21, Z+1	; 0x01
    206e:	22 81       	ldd	r18, Z+2	; 0x02
    2070:	62 2f       	mov	r22, r18
    2072:	6f 77       	andi	r22, 0x7F	; 127
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	22 1f       	adc	r18, r18
    2078:	22 27       	eor	r18, r18
    207a:	22 1f       	adc	r18, r18
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	89 2f       	mov	r24, r25
    2080:	88 0f       	add	r24, r24
    2082:	82 2b       	or	r24, r18
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	99 1f       	adc	r25, r25
    208a:	99 27       	eor	r25, r25
    208c:	99 1f       	adc	r25, r25
    208e:	11 96       	adiw	r26, 0x01	; 1
    2090:	9c 93       	st	X, r25
    2092:	11 97       	sbiw	r26, 0x01	; 1
    2094:	21 15       	cp	r18, r1
    2096:	31 05       	cpc	r19, r1
    2098:	a9 f5       	brne	.+106    	; 0x2104 <__unpack_f+0x9e>
    209a:	41 15       	cp	r20, r1
    209c:	51 05       	cpc	r21, r1
    209e:	61 05       	cpc	r22, r1
    20a0:	71 05       	cpc	r23, r1
    20a2:	11 f4       	brne	.+4      	; 0x20a8 <__unpack_f+0x42>
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	37 c0       	rjmp	.+110    	; 0x2116 <__unpack_f+0xb0>
    20a8:	82 e8       	ldi	r24, 0x82	; 130
    20aa:	9f ef       	ldi	r25, 0xFF	; 255
    20ac:	13 96       	adiw	r26, 0x03	; 3
    20ae:	9c 93       	st	X, r25
    20b0:	8e 93       	st	-X, r24
    20b2:	12 97       	sbiw	r26, 0x02	; 2
    20b4:	9a 01       	movw	r18, r20
    20b6:	ab 01       	movw	r20, r22
    20b8:	67 e0       	ldi	r22, 0x07	; 7
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	44 1f       	adc	r20, r20
    20c0:	55 1f       	adc	r21, r21
    20c2:	6a 95       	dec	r22
    20c4:	d1 f7       	brne	.-12     	; 0x20ba <__unpack_f+0x54>
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	8c 93       	st	X, r24
    20ca:	0d c0       	rjmp	.+26     	; 0x20e6 <__unpack_f+0x80>
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	44 1f       	adc	r20, r20
    20d2:	55 1f       	adc	r21, r21
    20d4:	12 96       	adiw	r26, 0x02	; 2
    20d6:	8d 91       	ld	r24, X+
    20d8:	9c 91       	ld	r25, X
    20da:	13 97       	sbiw	r26, 0x03	; 3
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	13 96       	adiw	r26, 0x03	; 3
    20e0:	9c 93       	st	X, r25
    20e2:	8e 93       	st	-X, r24
    20e4:	12 97       	sbiw	r26, 0x02	; 2
    20e6:	20 30       	cpi	r18, 0x00	; 0
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	38 07       	cpc	r19, r24
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	48 07       	cpc	r20, r24
    20f0:	80 e4       	ldi	r24, 0x40	; 64
    20f2:	58 07       	cpc	r21, r24
    20f4:	58 f3       	brcs	.-42     	; 0x20cc <__unpack_f+0x66>
    20f6:	14 96       	adiw	r26, 0x04	; 4
    20f8:	2d 93       	st	X+, r18
    20fa:	3d 93       	st	X+, r19
    20fc:	4d 93       	st	X+, r20
    20fe:	5c 93       	st	X, r21
    2100:	17 97       	sbiw	r26, 0x07	; 7
    2102:	08 95       	ret
    2104:	2f 3f       	cpi	r18, 0xFF	; 255
    2106:	31 05       	cpc	r19, r1
    2108:	79 f4       	brne	.+30     	; 0x2128 <__unpack_f+0xc2>
    210a:	41 15       	cp	r20, r1
    210c:	51 05       	cpc	r21, r1
    210e:	61 05       	cpc	r22, r1
    2110:	71 05       	cpc	r23, r1
    2112:	19 f4       	brne	.+6      	; 0x211a <__unpack_f+0xb4>
    2114:	84 e0       	ldi	r24, 0x04	; 4
    2116:	8c 93       	st	X, r24
    2118:	08 95       	ret
    211a:	64 ff       	sbrs	r22, 4
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <__unpack_f+0xbe>
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	8c 93       	st	X, r24
    2122:	12 c0       	rjmp	.+36     	; 0x2148 <__unpack_f+0xe2>
    2124:	1c 92       	st	X, r1
    2126:	10 c0       	rjmp	.+32     	; 0x2148 <__unpack_f+0xe2>
    2128:	2f 57       	subi	r18, 0x7F	; 127
    212a:	30 40       	sbci	r19, 0x00	; 0
    212c:	13 96       	adiw	r26, 0x03	; 3
    212e:	3c 93       	st	X, r19
    2130:	2e 93       	st	-X, r18
    2132:	12 97       	sbiw	r26, 0x02	; 2
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	8c 93       	st	X, r24
    2138:	87 e0       	ldi	r24, 0x07	; 7
    213a:	44 0f       	add	r20, r20
    213c:	55 1f       	adc	r21, r21
    213e:	66 1f       	adc	r22, r22
    2140:	77 1f       	adc	r23, r23
    2142:	8a 95       	dec	r24
    2144:	d1 f7       	brne	.-12     	; 0x213a <__unpack_f+0xd4>
    2146:	70 64       	ori	r23, 0x40	; 64
    2148:	14 96       	adiw	r26, 0x04	; 4
    214a:	4d 93       	st	X+, r20
    214c:	5d 93       	st	X+, r21
    214e:	6d 93       	st	X+, r22
    2150:	7c 93       	st	X, r23
    2152:	17 97       	sbiw	r26, 0x07	; 7
    2154:	08 95       	ret

00002156 <__fpcmp_parts_f>:
    2156:	1f 93       	push	r17
    2158:	dc 01       	movw	r26, r24
    215a:	fb 01       	movw	r30, r22
    215c:	9c 91       	ld	r25, X
    215e:	92 30       	cpi	r25, 0x02	; 2
    2160:	08 f4       	brcc	.+2      	; 0x2164 <__fpcmp_parts_f+0xe>
    2162:	47 c0       	rjmp	.+142    	; 0x21f2 <__fpcmp_parts_f+0x9c>
    2164:	80 81       	ld	r24, Z
    2166:	82 30       	cpi	r24, 0x02	; 2
    2168:	08 f4       	brcc	.+2      	; 0x216c <__fpcmp_parts_f+0x16>
    216a:	43 c0       	rjmp	.+134    	; 0x21f2 <__fpcmp_parts_f+0x9c>
    216c:	94 30       	cpi	r25, 0x04	; 4
    216e:	51 f4       	brne	.+20     	; 0x2184 <__fpcmp_parts_f+0x2e>
    2170:	11 96       	adiw	r26, 0x01	; 1
    2172:	1c 91       	ld	r17, X
    2174:	84 30       	cpi	r24, 0x04	; 4
    2176:	99 f5       	brne	.+102    	; 0x21de <__fpcmp_parts_f+0x88>
    2178:	81 81       	ldd	r24, Z+1	; 0x01
    217a:	68 2f       	mov	r22, r24
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	61 1b       	sub	r22, r17
    2180:	71 09       	sbc	r23, r1
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <__stack+0x3>
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	21 f0       	breq	.+8      	; 0x2190 <__fpcmp_parts_f+0x3a>
    2188:	92 30       	cpi	r25, 0x02	; 2
    218a:	31 f4       	brne	.+12     	; 0x2198 <__fpcmp_parts_f+0x42>
    218c:	82 30       	cpi	r24, 0x02	; 2
    218e:	b9 f1       	breq	.+110    	; 0x21fe <__fpcmp_parts_f+0xa8>
    2190:	81 81       	ldd	r24, Z+1	; 0x01
    2192:	88 23       	and	r24, r24
    2194:	89 f1       	breq	.+98     	; 0x21f8 <__fpcmp_parts_f+0xa2>
    2196:	2d c0       	rjmp	.+90     	; 0x21f2 <__fpcmp_parts_f+0x9c>
    2198:	11 96       	adiw	r26, 0x01	; 1
    219a:	1c 91       	ld	r17, X
    219c:	11 97       	sbiw	r26, 0x01	; 1
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	f1 f0       	breq	.+60     	; 0x21de <__fpcmp_parts_f+0x88>
    21a2:	81 81       	ldd	r24, Z+1	; 0x01
    21a4:	18 17       	cp	r17, r24
    21a6:	d9 f4       	brne	.+54     	; 0x21de <__fpcmp_parts_f+0x88>
    21a8:	12 96       	adiw	r26, 0x02	; 2
    21aa:	2d 91       	ld	r18, X+
    21ac:	3c 91       	ld	r19, X
    21ae:	13 97       	sbiw	r26, 0x03	; 3
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	82 17       	cp	r24, r18
    21b6:	93 07       	cpc	r25, r19
    21b8:	94 f0       	brlt	.+36     	; 0x21de <__fpcmp_parts_f+0x88>
    21ba:	28 17       	cp	r18, r24
    21bc:	39 07       	cpc	r19, r25
    21be:	bc f0       	brlt	.+46     	; 0x21ee <__fpcmp_parts_f+0x98>
    21c0:	14 96       	adiw	r26, 0x04	; 4
    21c2:	8d 91       	ld	r24, X+
    21c4:	9d 91       	ld	r25, X+
    21c6:	0d 90       	ld	r0, X+
    21c8:	bc 91       	ld	r27, X
    21ca:	a0 2d       	mov	r26, r0
    21cc:	24 81       	ldd	r18, Z+4	; 0x04
    21ce:	35 81       	ldd	r19, Z+5	; 0x05
    21d0:	46 81       	ldd	r20, Z+6	; 0x06
    21d2:	57 81       	ldd	r21, Z+7	; 0x07
    21d4:	28 17       	cp	r18, r24
    21d6:	39 07       	cpc	r19, r25
    21d8:	4a 07       	cpc	r20, r26
    21da:	5b 07       	cpc	r21, r27
    21dc:	18 f4       	brcc	.+6      	; 0x21e4 <__fpcmp_parts_f+0x8e>
    21de:	11 23       	and	r17, r17
    21e0:	41 f0       	breq	.+16     	; 0x21f2 <__fpcmp_parts_f+0x9c>
    21e2:	0a c0       	rjmp	.+20     	; 0x21f8 <__fpcmp_parts_f+0xa2>
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	a4 07       	cpc	r26, r20
    21ea:	b5 07       	cpc	r27, r21
    21ec:	40 f4       	brcc	.+16     	; 0x21fe <__fpcmp_parts_f+0xa8>
    21ee:	11 23       	and	r17, r17
    21f0:	19 f0       	breq	.+6      	; 0x21f8 <__fpcmp_parts_f+0xa2>
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	05 c0       	rjmp	.+10     	; 0x2202 <__stack+0x3>
    21f8:	6f ef       	ldi	r22, 0xFF	; 255
    21fa:	7f ef       	ldi	r23, 0xFF	; 255
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <__stack+0x3>
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	cb 01       	movw	r24, r22
    2204:	1f 91       	pop	r17
    2206:	08 95       	ret

00002208 <__udivmodhi4>:
    2208:	aa 1b       	sub	r26, r26
    220a:	bb 1b       	sub	r27, r27
    220c:	51 e1       	ldi	r21, 0x11	; 17
    220e:	07 c0       	rjmp	.+14     	; 0x221e <__udivmodhi4_ep>

00002210 <__udivmodhi4_loop>:
    2210:	aa 1f       	adc	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	a6 17       	cp	r26, r22
    2216:	b7 07       	cpc	r27, r23
    2218:	10 f0       	brcs	.+4      	; 0x221e <__udivmodhi4_ep>
    221a:	a6 1b       	sub	r26, r22
    221c:	b7 0b       	sbc	r27, r23

0000221e <__udivmodhi4_ep>:
    221e:	88 1f       	adc	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	5a 95       	dec	r21
    2224:	a9 f7       	brne	.-22     	; 0x2210 <__udivmodhi4_loop>
    2226:	80 95       	com	r24
    2228:	90 95       	com	r25
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	08 95       	ret

00002230 <__prologue_saves__>:
    2230:	2f 92       	push	r2
    2232:	3f 92       	push	r3
    2234:	4f 92       	push	r4
    2236:	5f 92       	push	r5
    2238:	6f 92       	push	r6
    223a:	7f 92       	push	r7
    223c:	8f 92       	push	r8
    223e:	9f 92       	push	r9
    2240:	af 92       	push	r10
    2242:	bf 92       	push	r11
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	ca 1b       	sub	r28, r26
    225a:	db 0b       	sbc	r29, r27
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	19 94       	eijmp

00002268 <__epilogue_restores__>:
    2268:	2a 88       	ldd	r2, Y+18	; 0x12
    226a:	39 88       	ldd	r3, Y+17	; 0x11
    226c:	48 88       	ldd	r4, Y+16	; 0x10
    226e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2270:	6e 84       	ldd	r6, Y+14	; 0x0e
    2272:	7d 84       	ldd	r7, Y+13	; 0x0d
    2274:	8c 84       	ldd	r8, Y+12	; 0x0c
    2276:	9b 84       	ldd	r9, Y+11	; 0x0b
    2278:	aa 84       	ldd	r10, Y+10	; 0x0a
    227a:	b9 84       	ldd	r11, Y+9	; 0x09
    227c:	c8 84       	ldd	r12, Y+8	; 0x08
    227e:	df 80       	ldd	r13, Y+7	; 0x07
    2280:	ee 80       	ldd	r14, Y+6	; 0x06
    2282:	fd 80       	ldd	r15, Y+5	; 0x05
    2284:	0c 81       	ldd	r16, Y+4	; 0x04
    2286:	1b 81       	ldd	r17, Y+3	; 0x03
    2288:	aa 81       	ldd	r26, Y+2	; 0x02
    228a:	b9 81       	ldd	r27, Y+1	; 0x01
    228c:	ce 0f       	add	r28, r30
    228e:	d1 1d       	adc	r29, r1
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	ed 01       	movw	r28, r26
    229c:	08 95       	ret

0000229e <_exit>:
    229e:	f8 94       	cli

000022a0 <__stop_program>:
    22a0:	ff cf       	rjmp	.-2      	; 0x22a0 <__stop_program>
